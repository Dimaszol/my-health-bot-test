# vector_db.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –±–µ–∑ —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏

import chromadb
from chromadb import PersistentClient
import logging

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç ChromaDB
chroma_client = PersistentClient(path="./vector_store")
# –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
collection = chroma_client.get_or_create_collection(name="documents")

def get_recent_vector_documents(limit=3):
    """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º count() + –ª–∏–º–∏—Ç, –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å—ë"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ—Ä–µ–∑ count()
        total_count = collection.count()
        logger.info(f"üì¶ –í—Å–µ–≥–æ –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {total_count}")

        if total_count == 0:
            logger.warning("‚ö†Ô∏è –í ChromaDB –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
            return []

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        recent_docs = collection.get(
            limit=min(limit, total_count),  # –ù–µ –±–æ–ª—å—à–µ —á–µ–º –µ—Å—Ç—å
            include=["documents", "metadatas"]
        )
        
        return list(zip(recent_docs['ids'], recent_docs['metadatas']))

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ: {e}")
        return []

def delete_document_from_vector_db(document_id: int):
    """–£–¥–∞–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã"""
    try:
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º where –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ document_id
        results = collection.get(
            where={"document_id": str(document_id)},
            include=["metadatas"]
        )
        
        ids_to_delete = results['ids']
        
        if ids_to_delete:
            collection.delete(ids=ids_to_delete)
            logger.info(f"üß† Document {document_id} —É–¥–∞–ª—ë–Ω –∏–∑ ChromaDB ({len(ids_to_delete)} —á–∞–Ω–∫–æ–≤).")
        else:
            logger.warning(f"‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç {document_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {document_id} –∏–∑ ChromaDB: {e}")

def delete_all_chunks_by_user(user_id: int):
    """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º where –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    try:
        logger.info(f"üßπ –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ò—â–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ where
        results = collection.get(
            where={"user_id": str(user_id)},
            include=["metadatas"]
        )
        
        ids_to_delete = results['ids']

        if ids_to_delete:
            collection.delete(ids=ids_to_delete)
            logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω—ã –≤–µ–∫—Ç–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {len(ids_to_delete)} –∑–∞–ø–∏—Å–µ–π")
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –≤–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ–∫—Ç–æ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

def mark_chunks_unconfirmed(document_id: int):
    """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º where + batch update"""
    try:
        # –ù–∞—Ö–æ–¥–∏–º —á–∞–Ω–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        results = collection.get(
            where={"document_id": str(document_id)},
            include=["metadatas"]
        )
        
        ids_to_update = results['ids']
        
        if ids_to_update:
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö —á–∞–Ω–∫–æ–≤
            updated_metadatas = []
            for metadata in results['metadatas']:
                updated_metadata = metadata.copy()
                updated_metadata["confirmed"] = 0
                updated_metadatas.append(updated_metadata)
            
            collection.update(
                ids=ids_to_update,
                metadatas=updated_metadatas
            )
            logger.info(f"üü° –í–µ–∫—Ç–æ—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞ {document_id} –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ unconfirmed ({len(ids_to_update)} —á–∞–Ω–∫–æ–≤).")
        else:
            logger.warning(f"‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç {document_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–æ–≤ {document_id}: {e}")

def get_collection_stats():
    """–ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã"""
    try:
        total_count = collection.count()
        return {
            "total_documents": total_count,
            "status": "healthy" if total_count >= 0 else "error"
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {"total_documents": -1, "status": "error"}