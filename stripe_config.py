# stripe_config.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –ø–æ–ª–Ω–æ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π

import os
import stripe
import logging
from typing import Dict, Any, Optional, List
from dotenv import load_dotenv

load_dotenv()
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Stripe
stripe.api_key = os.getenv("STRIPE_SECRET_KEY")

class StripeConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è Stripe"""
    
    # –ö–ª—é—á–∏ –∏–∑ .env
    PUBLISHABLE_KEY = os.getenv("STRIPE_PUBLISHABLE_KEY")
    SECRET_KEY = os.getenv("STRIPE_SECRET_KEY") 
    WEBHOOK_SECRET = os.getenv("STRIPE_WEBHOOK_SECRET")
    
    # URL –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
    SUCCESS_URL = "https://t.me/DrZolinBot"
    CANCEL_URL = "https://t.me/DrZolinBot"
    
    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ø–∞–∫–µ—Ç—ã –ø–æ–¥–ø–∏—Å–æ–∫ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π
    SUBSCRIPTION_PACKAGES = {
        "basic_sub": {
            "name": "Basic Subscription",
            "price_cents": 399,
            "price_display": "$3.99",
            "documents": 5,
            "gpt4o_queries": 100,
            "type": "subscription",
            "duration_days": 30,
            "stripe_price_id": "price_1RXp3eCS4n1EZxNVbn0G3WsQ",  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π
            "user_friendly_name_key": "package_basic_name",  # ‚úÖ –ö–õ–Æ–ß –õ–û–ö–ê–õ–ò–ó–ê–¶–ò–ò
            "features_keys": [  # ‚úÖ –ö–õ–Æ–ß–ò –í–ú–ï–°–¢–û –ó–ê–•–ê–†–î–ö–û–ñ–ï–ù–ù–û–ì–û –¢–ï–ö–°–¢–ê
                "package_basic_feature_1",
                "package_basic_feature_2", 
                "package_basic_feature_3"
            ]
        },
        "premium_sub": {
            "name": "Premium Subscription", 
            "price_cents": 999,
            "price_display": "$9.99",
            "documents": 20,
            "gpt4o_queries": 400,
            "type": "subscription",
            "duration_days": 30,
            "stripe_price_id": "price_1RXp4qCS4n1EZxNVjJX9xNgf",  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π
            "user_friendly_name_key": "package_premium_name",  # ‚úÖ –ö–õ–Æ–ß –õ–û–ö–ê–õ–ò–ó–ê–¶–ò–ò
            "features_keys": [  # ‚úÖ –ö–õ–Æ–ß–ò –í–ú–ï–°–¢–û –ó–ê–•–ê–†–î–ö–û–ñ–ï–ù–ù–û–ì–û –¢–ï–ö–°–¢–ê
                "package_premium_feature_1",
                "package_premium_feature_2",
                "package_premium_feature_3",
                "package_premium_feature_4"
            ]
        },
        "extra_pack": {
            "name": "Extra Pack",
            "price_cents": 199,
            "price_display": "$1.99",
            "documents": 3,
            "gpt4o_queries": 30,
            "type": "one_time",
            "duration_days": 30,
            "user_friendly_name_key": "package_extra_name",  # ‚úÖ –ö–õ–Æ–ß –õ–û–ö–ê–õ–ò–ó–ê–¶–ò–ò
            "features_keys": [  # ‚úÖ –ö–õ–Æ–ß–ò –í–ú–ï–°–¢–û –ó–ê–•–ê–†–î–ö–û–ñ–ï–ù–ù–û–ì–û –¢–ï–ö–°–¢–ê
                "package_extra_feature_1",
                "package_extra_feature_2",
                "package_extra_feature_3"
            ]
        }
    }
    
    @classmethod
    def validate_config(cls) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª—é—á–µ–π"""
        required_keys = [cls.PUBLISHABLE_KEY, cls.SECRET_KEY]
        
        missing_keys = [key for key in required_keys if not key]
        
        if missing_keys:
            logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–∏ Stripe –≤ .env —Ñ–∞–π–ª–µ")
            return False
            
        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Stripe –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return True
    
    @classmethod
    def get_package_info(cls, package_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–∫–µ—Ç–µ –ø–æ ID"""
        return cls.SUBSCRIPTION_PACKAGES.get(package_id)
    
    @classmethod
    def get_all_packages(cls) -> Dict[str, Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã"""
        return cls.SUBSCRIPTION_PACKAGES.copy()
    
    @classmethod
    def get_localized_package_name(cls, package_id: str, lang: str) -> str:
        """‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–∞–µ—Ç –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞"""
        try:
            from db_postgresql import t
            
            package_info = cls.get_package_info(package_id)
            if not package_info:
                return "Unknown Package"
            
            name_key = package_info.get("user_friendly_name_key")
            if name_key:
                return t(name_key, lang)
            
            # Fallback –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            return package_info.get("name", "Unknown Package")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞–∫–µ—Ç–∞ {package_id}: {e}")
            # Fallback –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            package_info = cls.get_package_info(package_id)
            return package_info.get("name", "Unknown Package") if package_info else "Unknown Package"
    
    @classmethod
    def get_localized_package_features(cls, package_id: str, lang: str) -> List[str]:
        """‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–∞–µ—Ç –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –ø–∞–∫–µ—Ç–∞"""
        try:
            from db_postgresql import t
            
            package_info = cls.get_package_info(package_id)
            if not package_info:
                return []
            
            features_keys = package_info.get("features_keys", [])
            localized_features = []
            
            for feature_key in features_keys:
                try:
                    localized_feature = t(feature_key, lang)
                    localized_features.append(localized_feature)
                except:
                    # –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    logger.warning(f"–ö–ª—é—á –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ {feature_key} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —è–∑—ã–∫–∞ {lang}")
                    continue
            
            return localized_features
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –ø–∞–∫–µ—Ç–∞ {package_id}: {e}")
            return []
    
    @classmethod  
    def get_package_display_text(cls, package_id: str, lang: str) -> str:
        """‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            from db_postgresql import t
            
            package_info = cls.get_package_info(package_id)
            if not package_info:
                return t("package_not_found", lang)
            
            # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            name = cls.get_localized_package_name(package_id, lang)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ü–µ–Ω—É —Å —Ç–∏–ø–æ–º
            if package_info['type'] == 'subscription':
                price_text = f"{package_info['price_display']}/{t('subscription_monthly_short', lang)}"
            else:
                price_text = f"{package_info['price_display']} {t('subscription_one_time_short', lang)}"
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
            features = cls.get_localized_package_features(package_id, lang)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç
            text_parts = [
                f"**{name}** ‚Äî {price_text}",
                ""
            ]
            
            if features:
                text_parts.append(t("package_features_title", lang))
                for feature in features:
                    text_parts.append(f"‚úÖ {feature}")
            
            return "\n".join(text_parts)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –ø–∞–∫–µ—Ç–∞ {package_id}: {e}")
            
            # Fallback –æ–ø–∏—Å–∞–Ω–∏–µ
            package_info = cls.get_package_info(package_id)
            if package_info:
                return f"{package_info['name']} ‚Äî {package_info['price_display']}"
            return "Package information unavailable"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
def check_stripe_setup() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É Stripe –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Stripe...")
    
    if not StripeConfig.validate_config():
        print("‚ùå Stripe –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª")
        return False
    
    try:
        # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ Stripe API
        stripe.Account.retrieve()
        print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Stripe API —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except stripe.error.AuthenticationError:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π Stripe API –∫–ª—é—á")
        return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Stripe: {e}")
        return False

if __name__ == "__main__":
    # –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    success = check_stripe_setup()
    if success:
        print("\nüì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:")
        for pkg_id, pkg_info in StripeConfig.get_all_packages().items():
            print(f"  ‚Ä¢ {pkg_info['name']}: {pkg_info['price_display']}")
    else:
        print("\nüí° –î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á–∏ Stripe –≤ .env —Ñ–∞–π–ª")