# update_db_subscription.py - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–ø–∏—Å–æ–∫

import sqlite3
import os
from datetime import datetime

DB_PATH = "users.db"

def backup_database():
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    backup_name = f"users_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.db"
    
    try:
        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        import shutil
        shutil.copy2(DB_PATH, backup_name)
        print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_name}")
        return backup_name
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
        return None

def update_database():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    print("üîß –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ë–î
    if not os.path.exists(DB_PATH):
        print(f"‚ùå –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö {DB_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_file = backup_database()
    if not backup_file:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é. –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.")
        return False
    
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        print("\nüì¶ –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–∞–∫–µ—Ç–æ–≤ –ø–æ–¥–ø–∏—Å–æ–∫...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–∞–∫–µ—Ç–æ–≤
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS subscription_packages (
                id TEXT PRIMARY KEY,
                name TEXT NOT NULL,
                price_usd REAL NOT NULL,
                documents_included INTEGER NOT NULL,
                gpt4o_queries_included INTEGER NOT NULL,
                type TEXT NOT NULL, -- 'subscription' –∏–ª–∏ 'one_time'
                is_active BOOLEAN DEFAULT 1,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        """)
        print("   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ subscription_packages —Å–æ–∑–¥–∞–Ω–∞")
        
        print("\nüí∞ –®–∞–≥ 2: –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ç–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–∫–µ—Ç—ã
        packages = [
            ('basic_sub', 'Basic Subscription', 3.99, 5, 100, 'subscription'),
            ('premium_sub', 'Premium Subscription', 9.99, 20, 400, 'subscription'),
            ('extra_pack', 'Extra Pack', 1.99, 3, 30, 'one_time')
        ]
        
        for package in packages:
            cursor.execute("""
                INSERT OR REPLACE INTO subscription_packages 
                (id, name, price_usd, documents_included, gpt4o_queries_included, type, is_active, created_at)
                VALUES (?, ?, ?, ?, ?, ?, 1, datetime('now'))
            """, package)
            print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø–∞–∫–µ—Ç: {package[1]} (${package[2]})")
        
        print("\nüîó –®–∞–≥ 3: –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ transactions
        cursor.execute("PRAGMA table_info(transactions)")
        existing_columns = [row[1] for row in cursor.fetchall()]
        
        if 'package_id' not in existing_columns:
            cursor.execute("ALTER TABLE transactions ADD COLUMN package_id TEXT")
            print("   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ package_id")
        else:
            print("   ‚ö™ –ö–æ–ª–æ–Ω–∫–∞ package_id —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
        if 'documents_granted' not in existing_columns:
            cursor.execute("ALTER TABLE transactions ADD COLUMN documents_granted INTEGER DEFAULT 0")
            print("   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ documents_granted")
        else:
            print("   ‚ö™ –ö–æ–ª–æ–Ω–∫–∞ documents_granted —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
        if 'queries_granted' not in existing_columns:
            cursor.execute("ALTER TABLE transactions ADD COLUMN queries_granted INTEGER DEFAULT 0")
            print("   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ queries_granted")
        else:
            print("   ‚ö™ –ö–æ–ª–æ–Ω–∫–∞ queries_granted —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        print("\nüë• –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –∑–∞–ø–∏—Å–µ–π –≤ user_limits
        cursor.execute("""
            SELECT COUNT(*) FROM users 
            WHERE user_id NOT IN (SELECT user_id FROM user_limits)
        """)
        users_without_limits = cursor.fetchone()[0]
        
        if users_without_limits > 0:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ª–∏–º–∏—Ç–æ–≤
            cursor.execute("""
                INSERT INTO user_limits (user_id, documents_left, gpt4o_queries_left, subscription_type)
                SELECT user_id, 2, 10, 'free'
                FROM users 
                WHERE user_id NOT IN (SELECT user_id FROM user_limits)
            """)
            print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω—ã –ª–∏–º–∏—Ç—ã –¥–ª—è {users_without_limits} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        else:
            print("   ‚ö™ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ –∏–º–µ—é—Ç –ª–∏–º–∏—Ç—ã")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()
        
        print("\nüìä –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
        cursor.execute("""
            SELECT id, name, '$' || price_usd as price, 
                   documents_included || ' docs' as documents,
                   gpt4o_queries_included || ' queries' as queries,
                   type
            FROM subscription_packages 
            WHERE is_active = 1
        """)
        
        packages = cursor.fetchall()
        print("\nüì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:")
        for pkg in packages:
            print(f"   ‚Ä¢ {pkg[1]}: {pkg[2]} - {pkg[3]}, {pkg[4]} ({pkg[5]})")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute("SELECT COUNT(*) FROM user_limits")
        total_users = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM transactions")
        total_transactions = cursor.fetchone()[0]
        
        print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ª–∏–º–∏—Ç–∞–º–∏: {total_users}")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {total_transactions}")
        print(f"   ‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_file}")
        
        conn.close()
        
        print("\n" + "=" * 50)
        print("üéâ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–ø–∏—Å–æ–∫")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        print(f"üí° –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {backup_file}")
        
        if conn:
            conn.rollback()
            conn.close()
            
        return False

def show_current_structure():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤–∞–∂–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        print("\nüìã –¢–µ–∫—É—â–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü:")
        print("=" * 40)
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ user_limits
        print("\nüî∏ user_limits:")
        cursor.execute("PRAGMA table_info(user_limits)")
        for row in cursor.fetchall():
            print(f"   {row[1]}: {row[2]}")
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ transactions
        print("\nüî∏ transactions:")
        cursor.execute("PRAGMA table_info(transactions)")
        for row in cursor.fetchall():
            print(f"   {row[1]}: {row[2]}")
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ subscription_packages (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        cursor.execute("""
            SELECT name FROM sqlite_master 
            WHERE type='table' AND name='subscription_packages'
        """)
        
        if cursor.fetchone():
            print("\nüî∏ subscription_packages:")
            cursor.execute("PRAGMA table_info(subscription_packages)")
            for row in cursor.fetchall():
                print(f"   {row[1]}: {row[2]}")
        else:
            print("\nüî∏ subscription_packages: –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")

if __name__ == "__main__":
    print("üöÄ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–• - –°–ò–°–¢–ï–ú–ê –ü–û–î–ü–ò–°–û–ö")
    print("=" * 55)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    show_current_structure()
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    print("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –ë–î")
    confirm = input("\nüîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ? (y/N): ").lower().strip()
    
    if confirm in ['y', 'yes', '–¥–∞']:
        success = update_database()
        
        if success:
            print("\nüéØ –ß—Ç–æ –¥–∞–ª—å—à–µ:")
            print("1. –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –≤ –±–æ—Ç–∞")  
            print("2. –°–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–∫—É–ø–∫–∏")
            print("3. –ü–æ–¥–∫–ª—é—á–∏—Ç—å –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É")
        else:
            print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            print("- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É –ë–î")
            print("- –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ë–î –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º")
            print("- –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏")
    else:
        print("‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")