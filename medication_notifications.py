# medication_notifications.py - –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–∏–µ–º–µ –ª–µ–∫–∞—Ä—Å—Ç–≤

import asyncio
import logging
from datetime import datetime, timedelta, timezone
from typing import Dict, List, Optional
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from db_postgresql import get_db_connection, release_db_connection, get_user_language, t
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

logger = logging.getLogger(__name__)

class MedicationNotificationSystem:
    """–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–∏–µ–º–µ –ª–µ–∫–∞—Ä—Å—Ç–≤"""
    
    def __init__(self, bot: Bot):
        self.bot = bot
        self.scheduler = AsyncIOScheduler(timezone='UTC')
        self.user_timezones: Dict[int, str] = {}  # –ö—ç—à —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # 1. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            await self._create_notification_tables()
            
            # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await self._load_user_timezones()
            
            # 3. –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            self.scheduler.start()
            
            # 4. –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            self.scheduler.add_job(
                self._check_medication_reminders,
                CronTrigger(minute='*'),  # –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                id='medication_check',
                replace_existing=True
            )
            
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞—Ö –∑–∞–ø—É—â–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
    
    async def _create_notification_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        conn = await get_db_connection()
        try:
            await conn.execute("""
                -- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                CREATE TABLE IF NOT EXISTS notification_settings (
                    user_id BIGINT PRIMARY KEY REFERENCES users(user_id) ON DELETE CASCADE,
                    notifications_enabled BOOLEAN DEFAULT TRUE,
                    timezone_offset INTEGER DEFAULT 0,  -- –°–º–µ—â–µ–Ω–∏–µ –≤ –º–∏–Ω—É—Ç–∞—Ö –æ—Ç UTC
                    timezone_name TEXT DEFAULT 'UTC',
                    last_timezone_update TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );
                
                -- –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å)
                CREATE TABLE IF NOT EXISTS notification_history (
                    id SERIAL PRIMARY KEY,
                    user_id BIGINT REFERENCES users(user_id) ON DELETE CASCADE,
                    medication_name TEXT NOT NULL,
                    notification_time TIMESTAMP NOT NULL,
                    sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    UNIQUE(user_id, medication_name, notification_time)
                );
                
                -- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                CREATE INDEX IF NOT EXISTS idx_notification_history_user_time 
                    ON notification_history(user_id, notification_time);
            """)
        finally:
            await release_db_connection(conn)
    
    async def _load_user_timezones(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        conn = await get_db_connection()
        try:
            rows = await conn.fetch("""
                SELECT user_id, timezone_offset, timezone_name 
                FROM notification_settings 
                WHERE notifications_enabled = TRUE
            """)
            
            for row in rows:
                self.user_timezones[row['user_id']] = {
                    'offset': row['timezone_offset'],
                    'name': row['timezone_name']
                }
                
        finally:
            await release_db_connection(conn)
    
    async def _check_medication_reminders(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞—Ö"""
        try:
            current_utc = datetime.now(timezone.utc)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
            conn = await get_db_connection()
            try:
                users = await conn.fetch("""
                    SELECT DISTINCT u.user_id, ns.timezone_offset, ns.timezone_name
                    FROM users u
                    JOIN notification_settings ns ON u.user_id = ns.user_id
                    JOIN medications m ON u.user_id = m.user_id
                    WHERE ns.notifications_enabled = TRUE
                """)
                
                for user in users:
                    await self._check_user_medications(
                        user['user_id'], 
                        user['timezone_offset'],
                        current_utc
                    )
                    
            finally:
                await release_db_connection(conn)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
    
    async def _check_user_medications(self, user_id: int, timezone_offset: int, current_utc: datetime):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_local_time = current_utc + timedelta(minutes=timezone_offset)
            current_time_str = user_local_time.strftime("%H:%M")
            
            # –ü–æ–ª—É—á–∞–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            conn = await get_db_connection()
            try:
                medications = await conn.fetch("""
                    SELECT name, time, label 
                    FROM medications 
                    WHERE user_id = $1 AND time = $2
                """, user_id, current_time_str)
                
                if medications:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    today_start = user_local_time.replace(hour=0, minute=0, second=0, microsecond=0)
                    notification_time = today_start.replace(
                        hour=int(current_time_str.split(':')[0]),
                        minute=int(current_time_str.split(':')[1])
                    )
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                    already_sent = await conn.fetchrow("""
                        SELECT id FROM notification_history 
                        WHERE user_id = $1 
                        AND notification_time = $2
                        AND DATE(sent_at) = CURRENT_DATE
                    """, user_id, notification_time)
                    
                    if not already_sent:
                        await self._send_medication_reminder(user_id, medications, notification_time)
                        
            finally:
                await release_db_connection(conn)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    async def _send_medication_reminder(self, user_id: int, medications: list, notification_time: datetime):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞—Ö"""
        try:
            lang = await get_user_language(user_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤
            med_list = []
            for med in medications:
                label = med['label'] if med['label'] else med['time']
                med_list.append(f"üíä {med['name']} ({label})")
            
            # –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if len(medications) == 1:
                title = t("medication_reminder_single", lang)
            else:
                title = t("medication_reminder_multiple", lang)
            
            message_text = f"{title}\n\n" + "\n".join(med_list)
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=t("turn_off_notifications", lang),
                    callback_data="turn_off_med_notifications"
                )]
            ])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await self.bot.send_message(
                chat_id=user_id,
                text=message_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            await self._log_notification(user_id, medications, notification_time)
            
            logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ {len(medications)} –ª–µ–∫–∞—Ä—Å—Ç–≤–∞—Ö")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    async def _log_notification(self, user_id: int, medications: list, notification_time: datetime):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        conn = await get_db_connection()
        try:
            for med in medications:
                await conn.execute("""
                    INSERT INTO notification_history (user_id, medication_name, notification_time)
                    VALUES ($1, $2, $3)
                    ON CONFLICT (user_id, medication_name, notification_time) DO NOTHING
                """, user_id, med['name'], notification_time)
        finally:
            await release_db_connection(conn)
    
    async def set_user_timezone(self, user_id: int, timezone_offset: int, timezone_name: str = "Unknown"):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = await get_db_connection()
        try:
            await conn.execute("""
                INSERT INTO notification_settings (user_id, timezone_offset, timezone_name, last_timezone_update)
                VALUES ($1, $2, $3, CURRENT_TIMESTAMP)
                ON CONFLICT (user_id) DO UPDATE SET 
                    timezone_offset = EXCLUDED.timezone_offset,
                    timezone_name = EXCLUDED.timezone_name,
                    last_timezone_update = CURRENT_TIMESTAMP
            """, user_id, timezone_offset, timezone_name)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            self.user_timezones[user_id] = {
                'offset': timezone_offset,
                'name': timezone_name
            }
            
        finally:
            await release_db_connection(conn)
    
    async def toggle_notifications(self, user_id: int) -> bool:
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = await get_db_connection()
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            current = await conn.fetchrow("""
                SELECT notifications_enabled FROM notification_settings WHERE user_id = $1
            """, user_id)
            
            if current:
                new_state = not current['notifications_enabled']
            else:
                new_state = True
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await conn.execute("""
                INSERT INTO notification_settings (user_id, notifications_enabled)
                VALUES ($1, $2)
                ON CONFLICT (user_id) DO UPDATE SET 
                    notifications_enabled = EXCLUDED.notifications_enabled
            """, user_id, new_state)
            
            return new_state
            
        finally:
            await release_db_connection(conn)
    
    async def get_notification_settings(self, user_id: int) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = await get_db_connection()
        try:
            settings = await conn.fetchrow("""
                SELECT notifications_enabled, timezone_offset, timezone_name
                FROM notification_settings 
                WHERE user_id = $1
            """, user_id)
            
            if settings:
                return {
                    'enabled': settings['notifications_enabled'],
                    'timezone_offset': settings['timezone_offset'],
                    'timezone_name': settings['timezone_name']
                }
            else:
                return {
                    'enabled': False,
                    'timezone_offset': 0,
                    'timezone_name': 'UTC'
                }
                
        finally:
            await release_db_connection(conn)
    
    async def shutdown(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if self.scheduler.running:
            self.scheduler.shutdown()
            logger.info("üõë –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
notification_system: Optional[MedicationNotificationSystem] = None

async def initialize_medication_notifications(bot: Bot):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    global notification_system
    notification_system = MedicationNotificationSystem(bot)
    await notification_system.initialize()

async def shutdown_medication_notifications():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    global notification_system
    if notification_system:
        await notification_system.shutdown()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö

async def toggle_user_medication_notifications(user_id: int) -> bool:
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    global notification_system
    if notification_system:
        return await notification_system.toggle_notifications(user_id)
    return False

async def set_user_medication_timezone(user_id: int, offset_minutes: int, timezone_name: str = "Manual"):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    global notification_system
    if notification_system:
        await notification_system.set_user_timezone(user_id, offset_minutes, timezone_name)

async def get_user_notification_settings(user_id: int) -> Dict:
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    global notification_system
    if notification_system:
        return await notification_system.get_notification_settings(user_id)
    return {'enabled': False, 'timezone_offset': 0, 'timezone_name': 'UTC'}