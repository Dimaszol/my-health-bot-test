import sqlite3
import shutil
import os
import time
import re
import logging
from datetime import datetime
from vector_db import delete_document_from_vector_db, delete_all_chunks_by_user
from db_pool import get_db_connection, fetch_one, fetch_all, execute_query, insert_and_get_id
from locales import translations

DB_PATH = "users.db"
# –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ SQL –∑–∞–ø—Ä–æ—Å—ã (–¥–æ–±–∞–≤—å –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤)
SAFE_UPDATE_QUERIES = {
    'name': "UPDATE users SET name = ?, last_updated = ? WHERE user_id = ?",
    'birth_year': "UPDATE users SET birth_year = ?, last_updated = ? WHERE user_id = ?",
    'gender': "UPDATE users SET gender = ?, last_updated = ? WHERE user_id = ?",
    'height_cm': "UPDATE users SET height_cm = ?, last_updated = ? WHERE user_id = ?",
    'weight_kg': "UPDATE users SET weight_kg = ?, last_updated = ? WHERE user_id = ?",
    'chronic_conditions': "UPDATE users SET chronic_conditions = ?, last_updated = ? WHERE user_id = ?",
    'medications': "UPDATE users SET medications = ?, last_updated = ? WHERE user_id = ?",
    'allergies': "UPDATE users SET allergies = ?, last_updated = ? WHERE user_id = ?",
    'smoking': "UPDATE users SET smoking = ?, last_updated = ? WHERE user_id = ?",
    'alcohol': "UPDATE users SET alcohol = ?, last_updated = ? WHERE user_id = ?",
    'physical_activity': "UPDATE users SET physical_activity = ?, last_updated = ? WHERE user_id = ?",
    'family_history': "UPDATE users SET family_history = ?, last_updated = ? WHERE user_id = ?",
    'language': "UPDATE users SET language = ?, last_updated = ? WHERE user_id = ?"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
logging.basicConfig(
    filename='security.log',
    level=logging.WARNING,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# WHITELIST —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û!)
ALLOWED_USER_FIELDS = {
    'name', 'birth_year', 'gender', 'height_cm', 'weight_kg', 
    'chronic_conditions', 'medications', 'allergies', 'smoking', 
    'alcohol', 'physical_activity', 'family_history', 'language'
}

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
MAX_FIELD_LENGTHS = {
    'name': 100,
    'chronic_conditions': 1000,
    'medications': 1000,
    'allergies': 500,
    'smoking': 50,
    'alcohol': 50,
    'physical_activity': 100,
    'family_history': 1000,
    'language': 10
}

def log_suspicious_activity(user_id, action, data):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"""
    logging.warning(f"–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: user_id={user_id}, action={action}, data={str(data)[:100]}")

def detect_sql_injection(text):
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ SQL –∏–Ω—ä–µ–∫—Ü–∏–π –∏ XSS –∞—Ç–∞–∫"""
    if not isinstance(text, str):
        return False
    
    dangerous_patterns = [
        # SQL –∏–Ω—ä–µ–∫—Ü–∏–∏
        r"(union|select|insert|update|delete|drop|create|alter)\s",
        r";\s*(drop|delete|insert|update)",
        r"--\s*$",
        r"/\*.*\*/",
        r"'\s*(or|and)\s*'",
        r"'\s*=\s*'",
        
        # ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú XSS –∑–∞—â–∏—Ç—É
        r"<script[^>]*>",
        r"</script>",
        r"javascript:",
        r"on\w+\s*=",  # onclick, onload, etc.
        r"<iframe[^>]*>",
        r"<object[^>]*>",
        r"<embed[^>]*>"
    ]
    
    text_lower = text.lower()
    for pattern in dangerous_patterns:
        if re.search(pattern, text_lower):
            return True
    return False

def validate_user_id(user_id):
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç user_id"""
    if not isinstance(user_id, int) or user_id <= 0:
        raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id")
    return user_id

def validate_string(value, max_length=500, field_name="–ø–æ–ª–µ"):
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è"""
    if not isinstance(value, str):
        raise ValueError(f"{field_name} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
    
    value = value.strip()
    if len(value) == 0:
        raise ValueError(f"{field_name} –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
    
    if len(value) > max_length:
        raise ValueError(f"{field_name} —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º {max_length} —Å–∏–º–≤–æ–ª–æ–≤)")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ SQL –∏–Ω—ä–µ–∫—Ü–∏–∏
    if detect_sql_injection(value):
        log_suspicious_activity("unknown", "sql_injection_attempt", value)
        raise ValueError("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ SQL –∏–Ω—ä–µ–∫—Ü–∏–∏")
    
    return value

def validate_user_field(field: str, value):
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø–æ–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é –≤ –ë–î"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ
    if field not in ALLOWED_USER_FIELDS:
        raise ValueError(f"–ü–æ–ª–µ '{field}' –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    
    # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ None - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if value is None:
        return None
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ —Ç–∏–ø–∞–º –ø–æ–ª–µ–π
    if field == 'birth_year':
        if not isinstance(value, int):
            raise ValueError("–ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        current_year = datetime.now().year
        if value < 1900 or value > current_year:
            raise ValueError(f"–ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 1900 –∏ {current_year}")
    
    elif field in ['height_cm']:
        if not isinstance(value, int):
            raise ValueError("–†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º")
        if value < 50 or value > 300:
            raise ValueError("–†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 50 –∏ 300 —Å–º")
    
    elif field == 'weight_kg':
        if not isinstance(value, (int, float)):
            raise ValueError("–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        if value < 20 or value > 500:
            raise ValueError("–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 20 –∏ 500 –∫–≥")
    
    elif field == 'language':
        if not isinstance(value, str):
            raise ValueError("–Ø–∑—ã–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
        if value not in ['ru', 'uk', 'en']:
            raise ValueError("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –ø–æ–ª–µ–π
    if isinstance(value, str):
        max_length = MAX_FIELD_LENGTHS.get(field, 500)
        return validate_string(value, max_length, field)
    
    return value

def get_connection():
    return sqlite3.connect(DB_PATH)

async def save_user(user_id: int, name: str, birth_year: int = None):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—É–ª–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–∞–∫–æ–π –∂–µ
    user_id = validate_user_id(user_id)
    name = validate_string(name, 100, "–∏–º—è")
    
    if birth_year is not None:
        if not isinstance(birth_year, int):
            raise ValueError("–ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        current_year = datetime.now().year
        if birth_year < 1900 or birth_year > current_year:
            raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_year}")

    # üîÑ –ù–û–í–´–ô –ö–û–î: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å
    current_language_row = await fetch_one("SELECT language FROM users WHERE user_id = ?", (user_id,))
    current_language = current_language_row[0] if current_language_row else None

    await execute_query("""
        INSERT OR REPLACE INTO users (user_id, name, birth_year, language, created_at)
        VALUES (?, ?, ?, ?, ?)
    """, (user_id, name, birth_year, current_language, datetime.now()))

async def user_exists(user_id: int) -> bool:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = validate_user_id(user_id)
    
    result = await fetch_one("SELECT 1 FROM users WHERE user_id = ?", (user_id,))
    return result is not None

async def get_user_name(user_id):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = validate_user_id(user_id)
    
    result = await fetch_one("SELECT name FROM users WHERE user_id=?", (user_id,))
    return result[0] if result else None

async def save_document(user_id: int, title: str, file_path: str, file_type: str, raw_text: str, summary: str, confirmed: bool = True):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–∞–∫–æ–π –∂–µ
    user_id = validate_user_id(user_id)
    title = validate_string(title, 500, "–∑–∞–≥–æ–ª–æ–≤–æ–∫")
    
    if not isinstance(file_type, str) or file_type not in ['pdf', 'image', 'note']:
        raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞")
    
    if file_path and not file_path.startswith(f"files/{user_id}") and file_path != "memory_note":
        raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É")

    # üîÑ –ù–û–í–´–ô –ö–û–î: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–ª
    document_id = await insert_and_get_id("""
        INSERT INTO documents (user_id, title, file_path, file_type, raw_text, summary, confirmed, uploaded_at)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
    """, (
        user_id, title, file_path, file_type, raw_text, summary,
        int(confirmed), datetime.now()
    ))
    
    return document_id
    
async def get_document_by_id(document_id):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ ID"""
    if not isinstance(document_id, int) or document_id <= 0:
        raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π document_id")
    
    row = await fetch_one("SELECT id, user_id, title, raw_text, file_path FROM documents WHERE id = ?", (document_id,))
    
    if row:
        return {
            "id": row[0],
            "user_id": row[1],
            "title": row[2],
            "raw_text": row[3],
            "file_path": row[4]
        }
    return None

async def update_document_title(document_id: int, new_title: str):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    if not isinstance(document_id, int) or document_id <= 0:
        raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π document_id")
    
    new_title = validate_string(new_title, 500, "–Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫")
    
    await execute_query("UPDATE documents SET title = ? WHERE id = ?", (new_title, document_id))

async def delete_document(document_id: int):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    if not isinstance(document_id, int) or document_id <= 0:
        raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π document_id")
    
    from vector_db import delete_document_from_vector_db
    delete_document_from_vector_db(document_id)  # –≠—Ç–æ –æ—Å—Ç–∞–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º
    
    await execute_query("DELETE FROM documents WHERE id = ?", (document_id,))

async def get_documents_by_user(user_id: int):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = validate_user_id(user_id)
    
    rows = await fetch_all("""
        SELECT id, title, uploaded_at, file_type FROM documents
        WHERE user_id = ? AND confirmed = 1
        ORDER BY uploaded_at DESC
    """, (user_id,))

    documents = []
    for row in rows:
        documents.append({
            "id": row[0],
            "title": row[1],
            "date": row[2],
            "file_type": row[3]
        })
    return documents

async def delete_user_completely(user_id: int):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è delete_user_completely"""
    user_id = validate_user_id(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    doc_rows = await fetch_all("SELECT id FROM documents WHERE user_id = ?", (user_id,))
    doc_ids = [row[0] for row in doc_rows]

    # –£–¥–∞–ª—è–µ–º –∏–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã
    delete_all_chunks_by_user(user_id)

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await execute_query("DELETE FROM documents WHERE user_id = ?", (user_id,))
    await execute_query("DELETE FROM medications WHERE user_id = ?", (user_id,))
    await execute_query("DELETE FROM chat_history WHERE user_id = ?", (user_id,))
    await execute_query("DELETE FROM conversation_summary WHERE user_id = ?", (user_id,))
    await execute_query("DELETE FROM users WHERE user_id = ?", (user_id,))

    # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É —Å —Ñ–∞–π–ª–∞–º–∏
    user_folder = f"files/{user_id}"
    if os.path.exists(user_folder):
        shutil.rmtree(user_folder)
        print(f"üìÇ –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞: {user_folder}")

async def update_document_confirmed(doc_id: int, confirmed: int):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è update_document_confirmed"""
    if not isinstance(doc_id, int) or doc_id <= 0:
        raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π doc_id")
    
    if confirmed not in [0, 1]:
        raise ValueError("confirmed –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0 –∏–ª–∏ 1")
    
    await execute_query("UPDATE documents SET confirmed = ? WHERE id = ?", (confirmed, doc_id))

async def save_message(user_id, role, message):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    user_id = validate_user_id(user_id)
    
    if role not in ['user', 'bot', 'system']:
        raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–æ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è")
    
    message = validate_string(message, 10000, "—Å–æ–æ–±—â–µ–Ω–∏–µ")
    
    await execute_query("""
        INSERT INTO chat_history (user_id, role, message, timestamp)
        VALUES (?, ?, ?, ?);
    """, (user_id, role, message, datetime.now()))

async def get_last_messages(user_id, limit=5):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = validate_user_id(user_id)
    
    if not isinstance(limit, int) or limit <= 0 or limit > 100:
        raise ValueError("–õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 1 –∏ 100")
    
    rows = await fetch_all("""
        SELECT role, message FROM chat_history
        WHERE user_id = ?
        ORDER BY id DESC
        LIMIT ?
    """, (user_id, limit))
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
    return rows[::-1]

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ summary –∏ –¥–æ –∫–∞–∫–æ–≥–æ id –æ–Ω–æ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç
async def get_conversation_summary(user_id):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—é–º–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
    user_id = validate_user_id(user_id)
    
    result = await fetch_one("""
        SELECT summary_text, last_message_id FROM conversation_summary
        WHERE user_id = ?
        ORDER BY updated_at DESC LIMIT 1
    """, (user_id,))
    
    return result if result else ("", 0)

async def get_messages_after(user_id, after_id, limit=50):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ ID"""
    user_id = validate_user_id(user_id)
    
    if not isinstance(after_id, int) or after_id < 0:
        raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π after_id")
    
    if not isinstance(limit, int) or limit <= 0 or limit > 1000:
        raise ValueError("–õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 1 –∏ 1000")
    
    rows = await fetch_all("""
        SELECT id, role, message FROM chat_history
        WHERE user_id = ? AND id > ?
        ORDER BY id ASC LIMIT ?
    """, (user_id, after_id, limit))
    
    return rows

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ summary
async def save_conversation_summary(user_id, summary_text, last_message_id):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—é–º–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
    user_id = validate_user_id(user_id)
    summary_text = validate_string(summary_text, 5000, "—Ç–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ")
    
    if not isinstance(last_message_id, int) or last_message_id < 0:
        raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π last_message_id")
    
    await execute_query("""
        INSERT INTO conversation_summary (user_id, summary_text, last_message_id)
        VALUES (?, ?, ?)
    """, (user_id, summary_text, last_message_id))

async def get_last_summary(user_id):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–∑—é–º–µ"""
    user_id = validate_user_id(user_id)
    
    result = await fetch_one("""
        SELECT id, summary FROM documents
        WHERE user_id = ? AND confirmed = 1
        ORDER BY uploaded_at DESC LIMIT 1
    """, (user_id,))
    
    return (result[0], result[1]) if result else (None, "")

# –ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–ü–ò–°–ê–ù–ù–ê–Ø –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø update_user_field
async def update_user_field(user_id: int, field: str, value):
    """‚úÖ –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –≤–µ—Ä—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = validate_user_id(user_id)
        validated_value = validate_user_field(field, value)
        
        # ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        if field not in SAFE_UPDATE_QUERIES:
            print(f"‚ùå –ü–æ–ª–µ '{field}' –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            log_suspicious_activity(user_id, f"update_field_{field}", value)
            return False
        
        # –ë–µ—Ä–µ–º –≥–æ—Ç–æ–≤—ã–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–π SQL –∑–∞–ø—Ä–æ—Å (–ù–ï f-—Å—Ç—Ä–æ–∫–∞!)
        safe_query = SAFE_UPDATE_QUERIES[field]
        
        rowcount = await execute_query(safe_query, (validated_value, datetime.now(), user_id))
        
        if rowcount == 0:
            print(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—è {field}")
            return False
        
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª–µ {field} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return True
        
    except ValueError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—è {field}: {e}")
        log_suspicious_activity(user_id, f"update_field_{field}", value)
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—è {field} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False

async def get_user_profile(user_id: int) -> dict:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = validate_user_id(user_id)
    
    row = await fetch_one("""
        SELECT name, birth_year, gender, height_cm, weight_kg, chronic_conditions,
               medications, allergies, smoking, alcohol, physical_activity, family_history
        FROM users
        WHERE user_id = ?
    """, (user_id,))

    if not row:
        return {}

    fields = [
        "name", "birth_year", "gender", "height_cm", "weight_kg",
        "chronic_conditions", "medications", "allergies",
        "smoking", "alcohol", "physical_activity", "family_history"
    ]
    return dict(zip(fields, row))

async def get_medications(user_id: int):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = validate_user_id(user_id)
    
    rows = await fetch_all("SELECT name, time, label FROM medications WHERE user_id = ? ORDER BY time", (user_id,))
    return [{"name": row[0], "time": row[1], "label": row[2]} for row in rows]

async def replace_medications(user_id: int, new_list: list):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞ —Å–ø–∏—Å–∫–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤"""
    user_id = validate_user_id(user_id)
    
    if not isinstance(new_list, list):
        raise ValueError("new_list –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º")
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞
    for item in new_list:
        if not isinstance(item, dict):
            raise ValueError("–ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º")
        
        required_keys = {"name", "time", "label"}
        if not required_keys.issubset(item.keys()):
            raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–∏: {required_keys}")
        
        validate_string(item["name"], 200, "–Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞")
        validate_string(item["time"], 10, "–≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞")
        validate_string(item["label"], 100, "–º–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏")
    
    # üîÑ –ü–†–ê–í–ò–õ–¨–ù–´–ô –ö–û–î: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ db_pool
    # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
    await execute_query("DELETE FROM medications WHERE user_id = ?", (user_id,))
    
    # –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
    for item in new_list:
        await execute_query(
            "INSERT INTO medications (user_id, name, time, label) VALUES (?, ?, ?, ?)",
            (user_id, item["name"], item["time"], item["label"])
        )

async def get_user_medications_text(user_id: int) -> str:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = validate_user_id(user_id)
    
    rows = await fetch_all("SELECT name FROM medications WHERE user_id = ? ORDER BY time", (user_id,))
    return ", ".join([row[0] for row in rows])

async def format_medications_schedule(user_id: int) -> str:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤"""
    user_id = validate_user_id(user_id)
    
    rows = await fetch_all("SELECT name, time, label FROM medications WHERE user_id = ? ORDER BY time", (user_id,))
    
    if not rows:
        lang = await get_user_language(user_id)  # –¢–µ–ø–µ—Ä—å —Ç–æ–∂–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è!
        return t("schedule_empty", lang)
    
    return "\n".join([f"{row[1]} ‚Äî {row[0]} ({row[2]})" for row in rows])

async def set_user_language(user_id: int, language: str):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = validate_user_id(user_id)
    
    if language not in ['ru', 'uk', 'en']:
        raise ValueError("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫")
    
    await execute_query("""
        INSERT INTO users (user_id, language, created_at)
        VALUES (?, ?, ?)
        ON CONFLICT(user_id) DO UPDATE SET language=excluded.language
    """, (user_id, language, datetime.now()))

def t(key: str, lang: str = "ru", **kwargs) -> str:
    return translations.get(lang, {}).get(key, key).format(**kwargs)

async def get_user_language(user_id: int) -> str:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = validate_user_id(user_id)
    
    result = await fetch_one("SELECT language FROM users WHERE user_id = ?", (user_id,))
    return result[0] if result and result[0] else "ru"

async def is_fully_registered(user_id: int) -> bool:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    user_id = validate_user_id(user_id)
    
    result = await fetch_one("SELECT name FROM users WHERE user_id = ?", (user_id,))
    return result is not None and result[0] not in (None, "")

def get_all_values_for_key(key: str) -> list[str]:
    key = validate_string(key, 100, "–∫–ª—é—á")
    return [lang_data.get(key) for lang_data in translations.values() if key in lang_data]