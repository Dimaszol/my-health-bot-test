# garmin_connector.py - –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Garmin Connect API

import os
import json
import asyncio
import logging
from datetime import datetime, date, timedelta
from typing import Dict, Optional, List, Any
from cryptography.fernet import Fernet
import psycopg2
from psycopg2.extras import RealDictCursor
from garminconnect import Garmin
from dotenv import load_dotenv

load_dotenv()
logger = logging.getLogger(__name__)

# ================================
# –®–ò–§–†–û–í–ê–ù–ò–ï –î–ê–ù–ù–´–• GARMIN
# ================================

def get_encryption_key():
    """–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    key = os.getenv("GARMIN_ENCRYPTION_KEY")
    if not key:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        key = Fernet.generate_key().decode()
        logger.warning(f"‚ö†Ô∏è –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {key}")
        logger.warning("–î–æ–±–∞–≤—å—Ç–µ –≤ .env: GARMIN_ENCRYPTION_KEY=" + key)
    return key.encode() if isinstance(key, str) else key

def encrypt_data(data: str) -> str:
    """–ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É"""
    try:
        f = Fernet(get_encryption_key())
        return f.encrypt(data.encode()).decode()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return data

def decrypt_data(encrypted_data: str) -> str:
    """–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É"""
    try:
        f = Fernet(get_encryption_key())
        return f.decrypt(encrypted_data.encode()).decode()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: {e}")
        return encrypted_data

# ================================
# –ö–õ–ê–°–° –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö GARMIN
# ================================

class GarminConnector:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Garmin Connect API"""
    
    def __init__(self):
        self.db_url = os.getenv("DATABASE_URL")
        self._api_cache = {}  # –ö–µ—à –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π API
        
    def get_db_connection(self):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
        return psycopg2.connect(self.db_url, cursor_factory=RealDictCursor)

    async def save_garmin_connection(self, user_id: int, email: str, password: str, 
                                   notification_time: str = "07:00", timezone_offset: int = 0,
                                   timezone_name: str = "UTC") -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Garmin"""
        try:
            encrypted_email = encrypt_data(email)
            encrypted_password = encrypt_data(password)
            
            conn = self.get_db_connection()
            cursor = conn.cursor()
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ON CONFLICT –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
            cursor.execute("""
                INSERT INTO garmin_connections 
                (user_id, garmin_email, garmin_password, notification_time, 
                 timezone_offset, timezone_name, is_active, sync_errors)
                VALUES (%s, %s, %s, %s, %s, %s, TRUE, 0)
                ON CONFLICT (user_id) 
                DO UPDATE SET 
                    garmin_email = EXCLUDED.garmin_email,
                    garmin_password = EXCLUDED.garmin_password,
                    notification_time = EXCLUDED.notification_time,
                    timezone_offset = EXCLUDED.timezone_offset,
                    timezone_name = EXCLUDED.timezone_name,
                    is_active = TRUE,
                    sync_errors = 0,
                    updated_at = NOW()
            """, (user_id, encrypted_email, encrypted_password, notification_time,
                  timezone_offset, timezone_name))
            
            conn.commit()
            conn.close()
            logger.info(f"‚úÖ Garmin –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Garmin –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False

    async def get_garmin_connection(self, user_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Garmin"""
        try:
            conn = self.get_db_connection()
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT * FROM garmin_connections 
                WHERE user_id = %s AND is_active = TRUE
            """, (user_id,))
            
            result = cursor.fetchone()
            conn.close()
            
            if result:
                # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                result = dict(result)
                result['garmin_email'] = decrypt_data(result['garmin_email'])
                result['garmin_password'] = decrypt_data(result['garmin_password'])
                return result
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Garmin –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return None

    async def test_garmin_connection(self, email: str, password: str) -> tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Garmin"""
        try:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Garmin
            api = Garmin(email, password)
            await asyncio.get_event_loop().run_in_executor(None, api.login)
            
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            profile = await asyncio.get_event_loop().run_in_executor(None, api.get_full_name)
            
            return True, f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {profile}"
            
        except Exception as e:
            error_msg = str(e).lower()
            if "username" in error_msg or "password" in error_msg or "credentials" in error_msg:
                return False, "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å"
            elif "rate limit" in error_msg:
                return False, "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
            else:
                return False, f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"

    async def disconnect_garmin(self, user_id: int) -> bool:
        """–û—Ç–∫–ª—é—á–∏—Ç—å Garmin –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = self.get_db_connection()
            cursor = conn.cursor()
            
            cursor.execute("""
                UPDATE garmin_connections 
                SET is_active = FALSE, updated_at = NOW()
                WHERE user_id = %s
            """, (user_id,))
            
            conn.commit()
            conn.close()
            
            # –û—á–∏—â–∞–µ–º –∫–µ—à
            if user_id in self._api_cache:
                del self._api_cache[user_id]
                
            logger.info(f"‚úÖ Garmin –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è Garmin: {e}")
            return False

    async def get_garmin_api(self, user_id: int) -> Optional[Garmin]:
        """–ü–æ–ª—É—á–∏—Ç—å API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Garmin —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
            if user_id in self._api_cache:
                return self._api_cache[user_id]
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            connection = await self.get_garmin_connection(user_id)
            if not connection:
                return None
            
            # –°–æ–∑–¥–∞–µ–º API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            api = Garmin(connection['garmin_email'], connection['garmin_password'])
            
            # –õ–æ–≥–∏–Ω–∏–º—Å—è
            await asyncio.get_event_loop().run_in_executor(None, api.login)
            
            # –ö–µ—à–∏—Ä—É–µ–º –Ω–∞ 1 —á–∞—Å
            self._api_cache[user_id] = api
            
            return api
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Garmin API –¥–ª—è {user_id}: {e}")
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
            try:
                conn = self.get_db_connection()
                cursor = conn.cursor()
                cursor.execute("""
                    UPDATE garmin_connections 
                    SET sync_errors = sync_errors + 1, updated_at = NOW()
                    WHERE user_id = %s
                """, (user_id,))
                conn.commit()
                conn.close()
            except:
                pass
                
            return None

    async def collect_daily_data(self, user_id: int, target_date: date = None) -> Optional[Dict]:
        """–°–æ–±—Ä–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –¥–µ–Ω—å"""
        if not target_date:
            target_date = date.today() - timedelta(days=1)  # –í—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
            
        try:
            api = await self.get_garmin_api(user_id)
            if not api:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Garmin API –¥–ª—è {user_id}")
                return None
            
            logger.info(f"üìä –°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ Garmin –∑–∞ {target_date} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            tasks = []
            loop = asyncio.get_event_loop()
            
            # –ë–∞–∑–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            tasks.append(loop.run_in_executor(None, lambda: api.get_steps_data(target_date.isoformat())))
            tasks.append(loop.run_in_executor(None, lambda: api.get_heart_rates(target_date.isoformat())))
            tasks.append(loop.run_in_executor(None, lambda: api.get_sleep_data(target_date.isoformat())))
            tasks.append(loop.run_in_executor(None, lambda: api.get_body_battery(target_date.isoformat(), target_date.isoformat())))
            tasks.append(loop.run_in_executor(None, lambda: api.get_stress_data(target_date.isoformat())))
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–º–æ–≥—É—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏)
            tasks.append(loop.run_in_executor(None, lambda: safe_api_call(api.get_spo2_data, target_date.isoformat())))
            tasks.append(loop.run_in_executor(None, lambda: safe_api_call(api.get_respiration_data, target_date.isoformat())))
            tasks.append(loop.run_in_executor(None, lambda: safe_api_call(api.get_training_readiness, target_date.isoformat())))
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã
            results = await asyncio.gather(*tasks, return_exceptions=True)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            steps_data, heart_data, sleep_data, battery_data, stress_data, spo2_data, respiration_data, readiness_data = results
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            daily_data = {
                'user_id': user_id,
                'data_date': target_date,
                'sync_timestamp': datetime.now()
            }
            
            # –®–∞–≥–∏ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            if not isinstance(steps_data, Exception) and steps_data:
                daily_data.update({
                    'steps': steps_data.get('totalSteps', 0),
                    'calories': steps_data.get('totalKilocalories', 0),
                    'distance_meters': int(steps_data.get('totalDistanceMeters', 0)),
                    'floors_climbed': steps_data.get('floorsAscended', 0)
                })
            
            # –ü—É–ª—å—Å
            if not isinstance(heart_data, Exception) and heart_data:
                daily_data.update({
                    'resting_heart_rate': heart_data.get('restingHeartRate'),
                    'avg_heart_rate': calculate_avg_heart_rate(heart_data),
                    'max_heart_rate': heart_data.get('maxHeartRate'),
                })
            
            # –°–æ–Ω
            if not isinstance(sleep_data, Exception) and sleep_data:
                daily_data.update(parse_sleep_data(sleep_data))
            
            # Body Battery
            if not isinstance(battery_data, Exception) and battery_data and len(battery_data) > 0:
                battery_values = [item.get('charged', 0) for item in battery_data if item.get('charged')]
                if battery_values:
                    daily_data.update({
                        'body_battery_max': max(battery_values),
                        'body_battery_min': min(battery_values)
                    })
            
            # –°—Ç—Ä–µ—Å—Å
            if not isinstance(stress_data, Exception) and stress_data:
                daily_data.update(parse_stress_data(stress_data))
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if not isinstance(spo2_data, Exception) and spo2_data:
                daily_data['spo2_avg'] = spo2_data.get('averageSpO2')
            
            if not isinstance(respiration_data, Exception) and respiration_data:
                daily_data['respiration_avg'] = respiration_data.get('avgRespirationValue')
            
            if not isinstance(readiness_data, Exception) and readiness_data:
                daily_data['training_readiness'] = readiness_data.get('score')
            
            logger.info(f"‚úÖ –°–æ–±—Ä–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ Garmin: {len([k for k,v in daily_data.items() if v is not None])} –ø–æ–ª–µ–π")
            return daily_data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö Garmin –¥–ª—è {user_id}: {e}")
            return None

    async def save_daily_data(self, daily_data: Dict) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î"""
        try:
            conn = self.get_db_connection()
            cursor = conn.cursor()
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            fields = []
            values = []
            placeholders = []
            
            for key, value in daily_data.items():
                if value is not None:
                    fields.append(key)
                    values.append(value)
                    placeholders.append('%s')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º ON CONFLICT –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            update_fields = ', '.join([f"{field} = EXCLUDED.{field}" for field in fields if field not in ['user_id', 'data_date']])
            
            query = f"""
                INSERT INTO garmin_daily_data ({', '.join(fields)})
                VALUES ({', '.join(placeholders)})
                ON CONFLICT (user_id, data_date)
                DO UPDATE SET {update_fields}
            """
            
            cursor.execute(query, values)
            conn.commit()
            conn.close()
            
            logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ Garmin —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {daily_data['user_id']}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Garmin: {e}")
            return False

# ================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ================================

def safe_api_call(func, *args, **kwargs):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ API —Ñ—É–Ω–∫—Ü–∏–∏"""
    try:
        return func(*args, **kwargs)
    except Exception as e:
        logger.debug(f"API –≤—ã–∑–æ–≤ –Ω–µ —É–¥–∞–ª—Å—è: {func.__name__}: {e}")
        return None

def calculate_avg_heart_rate(heart_data):
    """–í—ã—á–∏—Å–ª–∏—Ç—å —Å—Ä–µ–¥–Ω–∏–π –ø—É–ª—å—Å –∏–∑ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        if isinstance(heart_data, list):
            rates = [item.get('heartRate') for item in heart_data if item.get('heartRate')]
            return sum(rates) // len(rates) if rates else None
        return heart_data.get('averageHeartRate')
    except:
        return None

def parse_sleep_data(sleep_data):
    """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Å–Ω–∞"""
    try:
        result = {}
        
        if isinstance(sleep_data, dict):
            # –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞
            result['sleep_duration_minutes'] = sleep_data.get('sleepTimeSeconds', 0) // 60
            
            # –§–∞–∑—ã —Å–Ω–∞
            sleep_levels = sleep_data.get('sleepLevels', [])
            deep_seconds = sum(level.get('seconds', 0) for level in sleep_levels if level.get('activityLevel') == 'deep')
            light_seconds = sum(level.get('seconds', 0) for level in sleep_levels if level.get('activityLevel') == 'light')
            rem_seconds = sum(level.get('seconds', 0) for level in sleep_levels if level.get('activityLevel') == 'rem')
            awake_seconds = sum(level.get('seconds', 0) for level in sleep_levels if level.get('activityLevel') == 'awake')
            
            result.update({
                'sleep_deep_minutes': deep_seconds // 60,
                'sleep_light_minutes': light_seconds // 60,
                'sleep_rem_minutes': rem_seconds // 60,
                'sleep_awake_minutes': awake_seconds // 60,
            })
            
            # –û—Ü–µ–Ω–∫–∞ —Å–Ω–∞
            result['sleep_score'] = sleep_data.get('overallSleepScore')
        
        return result
    except Exception as e:
        logger.debug(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–Ω–∞: {e}")
        return {}

def parse_stress_data(stress_data):
    """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–µ—Å—Å–∞"""
    try:
        result = {}
        
        if isinstance(stress_data, list) and len(stress_data) > 0:
            stress_values = [item.get('stressLevel') for item in stress_data if item.get('stressLevel') is not None]
            if stress_values:
                result['stress_avg'] = sum(stress_values) // len(stress_values)
                result['stress_max'] = max(stress_values)
        
        return result
    except:
        return {}

# ================================
# –ì–õ–û–ë–ê–õ–¨–ù–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–†
# ================================

garmin_connector = GarminConnector()