# db_postgresql.py - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –±–æ—Ç–∞

import os
import asyncio
import asyncpg
import re
from typing import Optional, List, Dict, Any
from datetime import datetime
import json
from error_handler import log_error_with_context

# üîó –ü–£–õ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô
db_pool: Optional[asyncpg.Pool] = None

async def get_db_connection():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    global db_pool
    if db_pool is None:
        raise Exception("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    return await db_pool.acquire()

async def release_db_connection(connection):
    """–û—Å–≤–æ–±–æ–¥–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"""
    global db_pool
    if db_pool:
        await db_pool.release(connection)

async def initialize_db_pool(max_connections: int = 10):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π PostgreSQL"""
    global db_pool
    
    # üîó –ü–æ–ª—É—á–∞–µ–º URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    database_url = os.getenv("DATABASE_URL")
    
    if not database_url:
        # üìù –ï—Å–ª–∏ –Ω–µ—Ç DATABASE_URL, —Å–æ–±–∏—Ä–∞–µ–º –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        db_host = os.getenv("DB_HOST", "localhost")
        db_port = os.getenv("DB_PORT", "5432")
        db_name = os.getenv("DB_NAME", "medical_bot")
        db_user = os.getenv("DB_USER", "postgres")
        db_password = os.getenv("DB_PASSWORD", "")
        
        database_url = f"postgresql://{db_user}:{db_password}@{db_host}:{db_port}/{db_name}"
    
    try:
        print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...")
        db_pool = await asyncpg.create_pool(
            database_url,
            min_size=2,
            max_size=max_connections,
            command_timeout=60,
            statement_cache_size=0
        )
        
        # ‚úÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        async with db_pool.acquire() as conn:
            result = await conn.fetchval("SELECT version()")
            print(f"‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω: {result[:50]}...")
        
        # üèóÔ∏è –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        await create_tables()
        print("üóÑÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞")
        
    except Exception as e:
        log_error_with_context(e, {"action": "db_connection"})
        raise

async def close_db_pool():
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    global db_pool
    if db_pool:
        await db_pool.close()

async def create_tables():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è Railway"""
    
    # üîß –°–ù–ê–ß–ê–õ–ê –ø–æ–¥–∫–ª—é—á–∞–µ–º pgvector —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
    pgvector_setup = """
    -- –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ pgvector (–µ—Å–ª–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ)
    CREATE EXTENSION IF NOT EXISTS vector;
    """
    
    tables_sql = """
    -- üë§ –¢–ê–ë–õ–ò–¶–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
    CREATE TABLE IF NOT EXISTS users (
        user_id BIGINT PRIMARY KEY,
        name TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        birth_year INTEGER,
        gender TEXT,
        height_cm INTEGER,
        weight_kg REAL,
        chronic_conditions TEXT,
        medications TEXT,
        allergies TEXT,
        smoking TEXT,
        alcohol TEXT,
        physical_activity TEXT,
        family_history TEXT,
        last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        language TEXT DEFAULT 'ru',
        gdpr_consent BOOLEAN DEFAULT FALSE,
        gdpr_consent_time TIMESTAMP DEFAULT NULL,
        total_messages_count INTEGER DEFAULT 0        
    );

    -- üí¨ –ò–°–¢–û–†–ò–Ø –ß–ê–¢–ê
    CREATE TABLE IF NOT EXISTS chat_history (
        id SERIAL PRIMARY KEY,
        user_id BIGINT REFERENCES users(user_id) ON DELETE CASCADE,
        role TEXT NOT NULL,
        message TEXT NOT NULL,
        timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- üìÑ –î–û–ö–£–ú–ï–ù–¢–´
    CREATE TABLE IF NOT EXISTS documents (
        id SERIAL PRIMARY KEY,
        user_id BIGINT REFERENCES users(user_id) ON DELETE CASCADE,
        title TEXT,
        file_path TEXT,
        file_type TEXT,
        raw_text TEXT,
        summary TEXT,
        confirmed BOOLEAN DEFAULT FALSE,
        uploaded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        vector_id TEXT
    );

    -- üß† –í–ï–ö–¢–û–†–´ –î–û–ö–£–ú–ï–ù–¢–û–í (pgvector) - –≠–¢–ê –¢–ê–ë–õ–ò–¶–ê –í–ê–ñ–ù–ê!
    CREATE TABLE IF NOT EXISTS document_vectors (
        id SERIAL PRIMARY KEY,
        document_id INTEGER REFERENCES documents(id) ON DELETE CASCADE,
        user_id BIGINT REFERENCES users(user_id) ON DELETE CASCADE,
        chunk_index INTEGER NOT NULL,
        chunk_text TEXT NOT NULL,
        embedding vector(1536),  -- OpenAI embeddings —Ä–∞–∑–º–µ—Ä
        metadata JSONB DEFAULT '{}',
        keywords TEXT DEFAULT '',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        
        -- üîç –£–ù–ò–ö–ê–õ–¨–ù–´–ô –ò–ù–î–ï–ö–°
        CONSTRAINT unique_chunk UNIQUE(document_id, chunk_index)
    );

    -- üíä –õ–ï–ö–ê–†–°–¢–í–ê
    CREATE TABLE IF NOT EXISTS medications (
        id SERIAL PRIMARY KEY,
        user_id BIGINT REFERENCES users(user_id) ON DELETE CASCADE,
        name TEXT NOT NULL,
        time TEXT,
        label TEXT
    );

    -- üìä –õ–ò–ú–ò–¢–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
    CREATE TABLE IF NOT EXISTS user_limits (
        user_id BIGINT PRIMARY KEY REFERENCES users(user_id) ON DELETE CASCADE,
        documents_left INTEGER DEFAULT 2,
        gpt4o_queries_left INTEGER DEFAULT 10,
        subscription_type TEXT DEFAULT 'free',
        subscription_expires_at TIMESTAMP,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- üí≥ –¢–†–ê–ù–ó–ê–ö–¶–ò–ò
    CREATE TABLE IF NOT EXISTS transactions (
        id SERIAL PRIMARY KEY,
        user_id BIGINT REFERENCES users(user_id) ON DELETE CASCADE,
        stripe_session_id TEXT UNIQUE,
        amount_usd REAL,
        package_type TEXT,
        status TEXT DEFAULT 'pending',
        payment_method TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        completed_at TIMESTAMP,
        package_id TEXT,
        documents_granted INTEGER DEFAULT 0,
        queries_granted INTEGER DEFAULT 0,
        promo_code TEXT
    );

    -- üì¶ –ü–ê–ö–ï–¢–´ –ü–û–î–ü–ò–°–û–ö
    CREATE TABLE IF NOT EXISTS subscription_packages (
        id TEXT PRIMARY KEY,
        name TEXT NOT NULL,
        price_usd REAL NOT NULL,
        documents_included INTEGER DEFAULT 0,
        gpt4o_queries_included INTEGER DEFAULT 0,
        type TEXT DEFAULT 'one_time',
        is_active BOOLEAN DEFAULT TRUE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- üîÑ –ü–û–î–ü–ò–°–ö–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
    CREATE TABLE IF NOT EXISTS user_subscriptions (
        id SERIAL PRIMARY KEY,
        user_id BIGINT REFERENCES users(user_id) ON DELETE CASCADE,
        stripe_subscription_id TEXT UNIQUE,
        package_id TEXT REFERENCES subscription_packages(id),
        status TEXT DEFAULT 'active',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        cancelled_at TIMESTAMP
    );

    -- üß† –†–ï–ó–Æ–ú–ï –†–ê–ó–ì–û–í–û–†–û–í
    CREATE TABLE IF NOT EXISTS conversation_summary (
        id SERIAL PRIMARY KEY,
        user_id BIGINT REFERENCES users(user_id) ON DELETE CASCADE,
        summary_text TEXT,
        last_message_id INTEGER,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- üìã –ú–ï–î–ò–¶–ò–ù–°–ö–ê–Ø –ö–ê–†–¢–ê –ü–ê–¶–ò–ï–ù–¢–ê
    CREATE TABLE IF NOT EXISTS medical_timeline (
        id SERIAL PRIMARY KEY,
        user_id BIGINT REFERENCES users(user_id) ON DELETE CASCADE,
        source_document_id INTEGER REFERENCES documents(id) ON DELETE CASCADE,
        event_date DATE NOT NULL,
        category TEXT DEFAULT 'general' CHECK (category IN ('diagnosis', 'treatment', 'test', 'procedure', 'general')),
        importance TEXT DEFAULT 'normal' CHECK (importance IN ('critical', 'important', 'normal')),
        description TEXT NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- üìä –ê–ù–ê–õ–ò–¢–ò–ö–ê
    CREATE TABLE IF NOT EXISTS analytics_events (
        id SERIAL PRIMARY KEY,
        user_id BIGINT NOT NULL,
        event TEXT NOT NULL,
        properties JSONB DEFAULT '{}',
        timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- üìä –ò–ù–î–ï–ö–°–´ –î–õ–Ø –í–ï–ö–¢–û–†–ù–û–ì–û –ü–û–ò–°–ö–ê (–í–ê–ñ–ù–û!)
    CREATE INDEX IF NOT EXISTS idx_document_vectors_user_id ON document_vectors(user_id);
    CREATE INDEX IF NOT EXISTS idx_document_vectors_document_id ON document_vectors(document_id);
    CREATE INDEX IF NOT EXISTS idx_document_vectors_embedding ON document_vectors USING ivfflat (embedding vector_cosine_ops) WITH (lists = 100);
    CREATE INDEX IF NOT EXISTS idx_document_vectors_keywords ON document_vectors USING gin(to_tsvector('russian', keywords));

    -- üìä –û–°–¢–ê–õ–¨–ù–´–ï –ò–ù–î–ï–ö–°–´
    CREATE INDEX IF NOT EXISTS idx_analytics_user_id ON analytics_events(user_id);
    CREATE INDEX IF NOT EXISTS idx_analytics_event ON analytics_events(event);
    CREATE INDEX IF NOT EXISTS idx_analytics_timestamp ON analytics_events(timestamp);
    CREATE INDEX IF NOT EXISTS idx_analytics_user_event ON analytics_events(user_id, event);
    CREATE INDEX IF NOT EXISTS idx_medical_timeline_user_date ON medical_timeline(user_id, event_date DESC);
    CREATE INDEX IF NOT EXISTS idx_medical_timeline_user_importance ON medical_timeline(user_id, importance);
    CREATE INDEX IF NOT EXISTS idx_medical_timeline_category ON medical_timeline(user_id, category);
    CREATE INDEX IF NOT EXISTS idx_chat_history_user_id ON chat_history(user_id);
    CREATE INDEX IF NOT EXISTS idx_documents_user_id ON documents(user_id);
    CREATE INDEX IF NOT EXISTS idx_medications_user_id ON medications(user_id);
    CREATE INDEX IF NOT EXISTS idx_transactions_user_id ON transactions(user_id);
    CREATE INDEX IF NOT EXISTS idx_user_subscriptions_user_id ON user_subscriptions(user_id);
    CREATE INDEX IF NOT EXISTS idx_users_gdpr_consent ON users(gdpr_consent);

    -- üîÑ –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –¢–†–ò–ì–ì–ï–†–ê
    CREATE OR REPLACE FUNCTION update_medical_timeline_timestamp()
    RETURNS TRIGGER AS $$
    BEGIN
        NEW.updated_at = CURRENT_TIMESTAMP;
        RETURN NEW;
    END;
    $$ LANGUAGE plpgsql;

    -- üîÑ –¢–†–ò–ì–ì–ï–†
    DO $$ 
    BEGIN
        IF NOT EXISTS (
            SELECT 1 FROM pg_trigger 
            WHERE tgname = 'medical_timeline_update_timestamp'
        ) THEN
            CREATE TRIGGER medical_timeline_update_timestamp
                BEFORE UPDATE ON medical_timeline
                FOR EACH ROW
                EXECUTE FUNCTION update_medical_timeline_timestamp();
        END IF;
    END $$;

    -- üìù –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò
    COMMENT ON COLUMN users.gdpr_consent IS '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞–ª —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö (GDPR)';
    COMMENT ON COLUMN users.gdpr_consent_time IS '–í—Ä–µ–º—è –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞–ª —Å–æ–≥–ª–∞—Å–∏–µ GDPR';
    COMMENT ON TABLE document_vectors IS '–í–µ–∫—Ç–æ—Ä–Ω—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞';
    """
    
    conn = await get_db_connection()
    try:
        # 1. –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∞–µ–º pgvector
        print("üîß –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ pgvector —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è...")
        await conn.execute(pgvector_setup)
        
        # 2. –ó–∞—Ç–µ–º —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        print("üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
        await conn.execute(tables_sql)
        
        print("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        log_error_with_context(e, {"action": "create_tables"})
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
        raise
    finally:
        await release_db_connection(conn)

# üë§ –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò
async def get_user(user_id: int) -> Optional[Dict]:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = await get_db_connection()
    try:
        row = await conn.fetchrow("SELECT * FROM users WHERE user_id = $1", user_id)
        return dict(row) if row else None
    except Exception as e:
        log_error_with_context(e, {"function": "get_user", "user_id": user_id})
        return None
    finally:
        await release_db_connection(conn)

async def update_user_profile(user_id: int, field: str, value: Any) -> bool:
    """–û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª–µ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = await get_db_connection()
    try:
        query = f"UPDATE users SET {field} = $1, last_updated = CURRENT_TIMESTAMP WHERE user_id = $2"
        await conn.execute(query, value, user_id)
        return True
    except Exception as e:
        log_error_with_context(e, {"function": "update_user_profile", "user_id": user_id, "field": field})
        return False
    finally:
        await release_db_connection(conn)

# üìÑ –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –î–û–ö–£–ú–ï–ù–¢–ê–ú–ò
async def save_document(user_id: int, title: str, file_path: str, file_type: str, 
                       raw_text: str, summary: str, confirmed: bool = True, vector_id: str = None) -> Optional[int]:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    conn = await get_db_connection()
    try:
        doc_id = await conn.fetchval(
            """INSERT INTO documents (user_id, title, file_path, file_type, raw_text, summary, confirmed, vector_id)
               VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING id""",
            user_id, title, file_path, file_type, raw_text, summary, confirmed, vector_id
        )
        return doc_id
    except Exception as e:
        log_error_with_context(e, {"function": "save_document", "user_id": user_id})
        return None
    finally:
        await release_db_connection(conn)

# üíä –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –õ–ï–ö–ê–†–°–¢–í–ê–ú–ò
async def get_user_medications(user_id: int) -> List[Dict]:
    """–ü–æ–ª—É—á–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = await get_db_connection()
    try:
        rows = await conn.fetch(
            "SELECT * FROM medications WHERE user_id = $1 ORDER BY time",
            user_id
        )
        return [dict(row) for row in rows]
    except Exception as e:
        log_error_with_context(e, {"function": "get_user_medications", "user_id": user_id})
        return []
    finally:
        await release_db_connection(conn)

async def update_user_medications(user_id: int, medications: List[Dict]) -> bool:
    """–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = await get_db_connection()
    try:
        # üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
        await conn.execute("DELETE FROM medications WHERE user_id = $1", user_id)
        
        # ‚ûï –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
        for med in medications:
            await conn.execute(
                "INSERT INTO medications (user_id, name, time, label) VALUES ($1, $2, $3, $4)",
                user_id, med['name'], med['time'], med['label']
            )
        return True
    except Exception as e:
        log_error_with_context(e, {"function": "update_user_medications", "user_id": user_id})
        return False
    finally:
        await release_db_connection(conn)

# üí≥ –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –õ–ò–ú–ò–¢–ê–ú–ò –ò –ü–û–î–ü–ò–°–ö–ê–ú–ò
async def get_user_limits(user_id: int) -> Dict:
    """–ü–æ–ª—É—á–∏—Ç—å –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = await get_db_connection()
    try:
        row = await conn.fetchrow("SELECT * FROM user_limits WHERE user_id = $1", user_id)
        return dict(row) if row else {
            "documents_left": 2,
            "gpt4o_queries_left": 10,
            "subscription_type": "free"
        }
    except Exception as e:
        log_error_with_context(e, {"function": "get_user_limits", "user_id": user_id})
        return {"documents_left": 0, "gpt4o_queries_left": 0, "subscription_type": "free"}
    finally:
        await release_db_connection(conn)

# üìÑ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –î–û–ö–£–ú–ï–ù–¢–ê–ú–ò
async def get_document_by_id(document_id: int) -> Optional[Dict]:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ ID"""
    conn = await get_db_connection()
    try:
        row = await conn.fetchrow("SELECT * FROM documents WHERE id = $1", document_id)
        return dict(row) if row else None
    except Exception as e:
        log_error_with_context(e, {"function": "get_document_by_id", "document_id": document_id})
        return None
    finally:
        await release_db_connection(conn)

async def update_document_title(document_id: int, new_title: str) -> bool:
    """–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    conn = await get_db_connection()
    try:
        result = await conn.execute(
            "UPDATE documents SET title = $1 WHERE id = $2",
            new_title, document_id
        )
        return result != "UPDATE 0"
    except Exception as e:
        log_error_with_context(e, {"function": "update_document_title", "document_id": document_id})
        return False
    finally:
        await release_db_connection(conn)

async def delete_document(document_id: int) -> bool:
    """–£–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"""
    conn = await get_db_connection()
    try:
        result = await conn.execute("DELETE FROM documents WHERE id = $1", document_id)
        return result != "DELETE 0"
    except Exception as e:
        log_error_with_context(e, {"function": "delete_document", "document_id": document_id})
        return False
    finally:
        await release_db_connection(conn)

# üí¨ –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –°–û–û–ë–©–ï–ù–ò–Ø–ú–ò
async def save_message(user_id: int, role: str, message: str) -> bool:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞"""
    conn = await get_db_connection()
    try:
        await conn.execute(
            "INSERT INTO chat_history (user_id, role, message) VALUES ($1, $2, $3)",
            user_id, role, message
        )
        return True
    except Exception as e:
        log_error_with_context(e, {"function": "save_message", "user_id": user_id})
        return False
    finally:
        await release_db_connection(conn)

async def get_last_messages(user_id: int, limit: int = 5) -> List[tuple]:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å - –≤–æ–∑–≤—Ä–∞—Ç tuples)"""
    conn = await get_db_connection()
    try:
        rows = await conn.fetch(
            """SELECT role, message FROM chat_history 
               WHERE user_id = $1 
               ORDER BY id DESC 
               LIMIT $2""",
            user_id, limit
        )
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ –∫–∞–∫ list of tuples
        return [(row['role'], row['message']) for row in reversed(rows)]
    except Exception as e:
        log_error_with_context(e, {"function": "get_last_messages", "user_id": user_id})
        return []
    finally:
        await release_db_connection(conn)

# üìù –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –†–ï–ó–Æ–ú–ï –†–ê–ó–ì–û–í–û–†–û–í
async def get_conversation_summary(user_id: int) -> tuple:
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—é–º–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)"""
    conn = await get_db_connection()
    try:
        row = await conn.fetchrow(
            "SELECT summary_text, last_message_id FROM conversation_summary WHERE user_id = $1 ORDER BY updated_at DESC LIMIT 1",
            user_id
        )
        return (row['summary_text'], row['last_message_id']) if row else ("", 0)
    except Exception as e:
        log_error_with_context(e, {"function": "get_conversation_summary", "user_id": user_id})
        return ("", 0)
    finally:
        await release_db_connection(conn)

async def save_conversation_summary(user_id: int, summary: str, last_message_id: int) -> bool:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—é–º–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
    conn = await get_db_connection()
    try:
        await conn.execute(
            """INSERT INTO conversation_summary (user_id, summary_text, last_message_id, updated_at)
               VALUES ($1, $2, $3, CURRENT_TIMESTAMP)
               ON CONFLICT (user_id) DO UPDATE SET
               summary_text = $2, last_message_id = $3, updated_at = CURRENT_TIMESTAMP""",
            user_id, summary, last_message_id
        )
        return True
    except Exception as e:
        log_error_with_context(e, {"function": "save_conversation_summary", "user_id": user_id})
        return False
    finally:
        await release_db_connection(conn)

async def get_messages_after(user_id: int, message_id: int) -> List[Dict]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ ID"""
    conn = await get_db_connection()
    try:
        rows = await conn.fetch(
            """SELECT id, role, message, timestamp 
               FROM chat_history 
               WHERE user_id = $1 AND id > $2 
               ORDER BY id ASC""",
            user_id, message_id
        )
        return [dict(row) for row in rows]
    except Exception as e:
        log_error_with_context(e, {"function": "get_messages_after", "user_id": user_id})
        return []
    finally:
        await release_db_connection(conn)

# üåê –§–£–ù–ö–¶–ò–ò –õ–û–ö–ê–õ–ò–ó–ê–¶–ò–ò
async def get_user_language(user_id: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = await get_db_connection()
    try:
        row = await conn.fetchrow("SELECT language FROM users WHERE user_id = $1", user_id)
        return row['language'] if row and row['language'] else 'ru'
    except Exception as e:
        log_error_with_context(e, {"function": "get_user_language", "user_id": user_id})
        return 'ru'
    finally:
        await release_db_connection(conn)

async def set_user_language(user_id: int, language: str, telegram_user=None) -> bool:
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–æ–∑–¥–∞—Ç—å –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç) + –∏–º—è –∏–∑ Telegram"""
    conn = await get_db_connection()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏–∑ Telegram
        name = None
        if telegram_user:
            name = telegram_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        # ‚úÖ –°–û–ó–î–ê–ï–ú –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–º–µ–Ω–µ–º –∏ —è–∑—ã–∫–æ–º
        if name:
            await conn.execute(
                "INSERT INTO users (user_id, language, name) VALUES ($1, $2, $3) ON CONFLICT (user_id) DO NOTHING",
                user_id, language, name
            )
        else:
            # Fallback –µ—Å–ª–∏ –Ω–µ—Ç telegram_user
            await conn.execute(
                "INSERT INTO users (user_id, language) VALUES ($1, $2) ON CONFLICT (user_id) DO NOTHING",
                user_id, language
            )
        
        # ‚úÖ –ü–û–¢–û–ú –æ–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª)
        await conn.execute(
            "UPDATE users SET language = $1 WHERE user_id = $2",
            language, user_id
        )
        
        # ‚úÖ –°–û–ó–î–ê–ï–ú –ª–∏–º–∏—Ç—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await conn.execute(
            "INSERT INTO user_limits (user_id) VALUES ($1) ON CONFLICT (user_id) DO NOTHING",
            user_id
        )
        
        return True
    except Exception as e:
        log_error_with_context(e, {"function": "set_user_language", "user_id": user_id})
        return False
    finally:
        await release_db_connection(conn)

def t(key: str, lang: str = "ru", **kwargs) -> str:
    """–§—É–Ω–∫—Ü–∏—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è)"""
    try:
        from locales import translations
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
        lang_translations = translations.get(lang, translations.get('ru', {}))
        text = lang_translations.get(key, key)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        return text.format(**kwargs) if kwargs else text
    except Exception as e:
        # Fallback –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return key

def get_all_values_for_key(key: str) -> List[str]:
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–ª—é—á–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏"""
    from locales import translations
    return [lang_data.get(key) for lang_data in translations.values() if key in lang_data]

# üë§ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –ü–†–û–§–ò–õ–Ø
async def get_user_profile(user_id: int) -> Dict:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = await get_db_connection()
    try:
        row = await conn.fetchrow("SELECT * FROM users WHERE user_id = $1", user_id)
        return dict(row) if row else {}
    except Exception as e:
        log_error_with_context(e, {"function": "get_user_profile", "user_id": user_id})
        return {}
    finally:
        await release_db_connection(conn)

async def get_user_medications_text(user_id: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ"""
    medications = await get_user_medications(user_id)
    if not medications:
        try:
            lang = await get_user_language(user_id)
            return t("no_medications", lang)
        except:
            return "No medications"
    
    med_texts = []
    for med in medications:
        med_texts.append(f"{med['name']} ({med['label']})")
    
    return "; ".join(med_texts)

# üóëÔ∏è –§–£–ù–ö–¶–ò–Ø –£–î–ê–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
async def delete_user_completely(user_id: int) -> bool:
    """
    GDPR-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –£–¥–∞–ª—è–µ—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ: —Ñ–∞–π–ª—ã + –±–∞–∑–∞ + –≤–µ–∫—Ç–æ—Ä—ã + Stripe
    """
    conn = await get_db_connection()
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        documents = await conn.fetch(
            "SELECT file_path FROM documents WHERE user_id = $1", 
            user_id
        )
        
        # 2. –£–¥–∞–ª—è–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
        import os
        for doc in documents:
            file_path = doc['file_path']
            if file_path and file_path != "memory_note" and os.path.exists(file_path):
                try:
                    os.remove(file_path)
                except OSError as e:
                    pass
        
        # 3. ‚úÖ –ù–û–í–û–ï: –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Stripe (GDPR)
        try:
            from stripe_manager import StripeGDPRManager
            await StripeGDPRManager.delete_user_stripe_data_gdpr(user_id)
        except Exception as e:
            pass
        
        # 4. –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ)
        tables_to_clear = [
            "chat_history",
            "conversation_summary", 
            "medical_timeline",
            "medications",
            "documents",
            "user_limits",
            "transactions", 
            "user_subscriptions",
            "analytics_events",
            "users"  # –í –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—á–µ—Ä–µ–¥—å
        ]
        
        for table in tables_to_clear:
            try:
                await conn.execute(f"DELETE FROM {table} WHERE user_id = $1", user_id)
            except Exception as e:
                pass
        
        # 5. –£–¥–∞–ª—è–µ–º –≤–µ–∫—Ç–æ—Ä—ã
        try:
            from vector_db_postgresql import delete_all_chunks_by_user
            await delete_all_chunks_by_user(user_id)
        except Exception as e:
            pass
        
        # 6. –õ–æ–≥–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É (–≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ)
        try:
            from analytics_system import Analytics
            await Analytics.track(user_id, "user_data_deleted_gdpr", {
                "timestamp": datetime.now().isoformat(),
                "reason": "user_request",
                "stripe_cleaned": True
            })
        except Exception as e:
            pass
        
        return True
        
    except Exception as e:
        log_error_with_context(e, {"function": "delete_user_completely", "user_id": user_id})
        return False
    finally:
        await release_db_connection(conn)

async def update_user_field(user_id: int, field: str, value: Any) -> bool:
    """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: update_user_field -> update_user_profile"""
    return await update_user_profile(user_id, field, value)

async def save_user(user_id: int, name: str = None, birth_year: int = None,
                   gdpr_consent: bool = None, username: str = None) -> bool:
    """
    ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Å GDPR —Å–æ–≥–ª–∞—Å–∏–µ–º
    """
    conn = await get_db_connection()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        existing_user = await conn.fetchrow(
            "SELECT user_id FROM users WHERE user_id = $1", user_id
        )
        
        if existing_user:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
            await conn.execute("""
                UPDATE users SET 
                    name = COALESCE($2, name),
                    birth_year = COALESCE($3, birth_year),
                    gdpr_consent = COALESCE($4, gdpr_consent),
                    username = COALESCE($5, username),
                    gdpr_consent_time = CASE WHEN $4 = TRUE THEN CURRENT_TIMESTAMP ELSE gdpr_consent_time END,
                    last_updated = CURRENT_TIMESTAMP
                WHERE user_id = $1
            """, user_id, name, birth_year, gdpr_consent, username)
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await conn.execute("""
                INSERT INTO users 
                (user_id, name, birth_year, gdpr_consent, username, gdpr_consent_time, created_at)
                VALUES ($1, $2, $3, $4, $5,
                        CASE WHEN $4 = TRUE THEN CURRENT_TIMESTAMP ELSE NULL END,
                        CURRENT_TIMESTAMP)
            """, user_id, name, birth_year, gdpr_consent, username)
            
            # ‚úÖ –°–û–ó–î–ê–ï–ú –î–ï–§–û–õ–¢–ù–´–ï –õ–ò–ú–ò–¢–´ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await conn.execute("""
                INSERT INTO user_limits (user_id, documents_left, gpt4o_queries_left, subscription_type)
                VALUES ($1, 2, 10, 'free')
                ON CONFLICT (user_id) DO NOTHING
            """, user_id)
        
        return True
        
    except Exception as e:
        log_error_with_context(e, {"function": "save_user", "user_id": user_id})
        return False
    finally:
        await release_db_connection(conn)

async def get_user_name(user_id: int) -> Optional[str]:
    """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_data = await get_user(user_id)
    return user_data.get('name') if user_data else None

async def is_fully_registered(user_id: int) -> bool:
    """
    ‚úÖ –î–õ–Ø –ú–ï–î–ò–¶–ò–ù–°–ö–û–ì–û –ë–û–¢–ê: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–º—è –∏ –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è
    –≠—Ç–æ –º–∏–Ω–∏–º—É–º –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    """
    conn = await get_db_connection()
    try:
        row = await conn.fetchrow(
            "SELECT name, birth_year FROM users WHERE user_id = $1", 
            user_id
        )
        
        if not row:
            return False
            
        # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –±–æ—Ç–∞
        name = row['name']
        birth_year = row['birth_year']
        
        # –ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
        if not name or len(name.strip()) == 0:
            return False
            
        # –ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω—É–∂–µ–Ω –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        if not birth_year:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å –≥–æ–¥–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (1900-2025)
        current_year = datetime.now().year
        if birth_year < 1900 or birth_year > current_year:
            return False
        
        return True
        
    except Exception as e:
        log_error_with_context(e, {"function": "is_fully_registered", "user_id": user_id})
        return False
    finally:
        await release_db_connection(conn)

async def update_document_confirmed(document_id: int, confirmed: int) -> bool:
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    conn = await get_db_connection()
    try:
        result = await conn.execute(
            "UPDATE documents SET confirmed = $1 WHERE id = $2",
            bool(confirmed), document_id
        )
        return result != "UPDATE 0"
    except Exception as e:
        log_error_with_context(e, {"function": "update_document_confirmed", "document_id": document_id})
        return False
    finally:
        await release_db_connection(conn)

async def get_documents_by_user(user_id: int, limit: int = 999) -> List[Dict]:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = await get_db_connection()
    try:
        rows = await conn.fetch(
            """SELECT id, title, file_type, uploaded_at as date 
               FROM documents 
               WHERE user_id = $1 AND confirmed = TRUE
               ORDER BY uploaded_at DESC 
               LIMIT $2""",
            user_id, limit
        )
        return [dict(row) for row in rows]
    except Exception as e:
        log_error_with_context(e, {"function": "get_documents_by_user", "user_id": user_id})
        return []
    finally:
        await release_db_connection(conn)

# üîß –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò

async def get_medications(user_id: int) -> List[Dict]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–µ–π)"""
    conn = await get_db_connection()
    try:
        rows = await conn.fetch(
            "SELECT name, time, label FROM medications WHERE user_id = $1 ORDER BY time",
            user_id
        )
        return [{"name": row['name'], "time": row['time'], "label": row['label']} for row in rows]
    except Exception as e:
        log_error_with_context(e, {"function": "get_medications", "user_id": user_id})
        return []
    finally:
        await release_db_connection(conn)

async def replace_medications(user_id: int, new_list: List[Dict]) -> bool:
    """–ó–∞–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = await get_db_connection()
    try:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ
        await conn.execute("DELETE FROM medications WHERE user_id = $1", user_id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
        for med in new_list:
            await conn.execute(
                "INSERT INTO medications (user_id, name, time, label) VALUES ($1, $2, $3, $4)",
                user_id, med.get('name', ''), med.get('time', ''), med.get('label', '')
            )
        return True
    except Exception as e:
        log_error_with_context(e, {"function": "replace_medications", "user_id": user_id})
        return False
    finally:
        await release_db_connection(conn)

async def format_medications_schedule(user_id: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = await get_db_connection()
    try:
        rows = await conn.fetch(
            "SELECT name, time, label FROM medications WHERE user_id = $1 ORDER BY time",
            user_id
        )
        
        if not rows:
            lang = await get_user_language(user_id)
            return t("schedule_empty", lang)
        
        return "\n".join([f"{row['time']} ‚Äî {row['name']} ({row['label']})" for row in rows])
    except Exception as e:
        log_error_with_context(e, {"function": "format_medications_schedule", "user_id": user_id})
        try:
            lang = await get_user_language(user_id)
            return t("schedule_empty", lang)
        except:
            return "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
    finally:
        await release_db_connection(conn)

def validate_user_id(user_id):
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç user_id"""
    if not isinstance(user_id, int) or user_id <= 0:
        raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id")
    return user_id

def validate_string(value, max_length=500, field_name="–ø–æ–ª–µ"):
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è"""
    if not isinstance(value, str):
        raise ValueError(f"{field_name} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
    
    value = value.strip()
    if len(value) == 0:
        raise ValueError(f"{field_name} –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
    
    if len(value) > max_length:
        raise ValueError(f"{field_name} —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º {max_length} —Å–∏–º–≤–æ–ª–æ–≤)")
    
    return value

def convert_sql_to_postgresql(query: str, params: tuple) -> tuple:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç SQLite –∑–∞–ø—Ä–æ—Å –≤ PostgreSQL"""
    placeholder_count = 0
    
    def replace_placeholder(match):
        nonlocal placeholder_count
        placeholder_count += 1
        return f"${placeholder_count}"
    
    converted_query = re.sub(r'\?', replace_placeholder, query)
    return converted_query, params

async def fetch_one(query: str, params: tuple = ()):
    """–°–æ–≤–º–µ—Å—Ç–∏–º–∞—è –≤–µ—Ä—Å–∏—è fetch_one —Å –∞–≤—Ç–æ–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π SQLite ‚Üí PostgreSQL"""
    pg_query, pg_params = convert_sql_to_postgresql(query, params)
    
    conn = await get_db_connection()
    try:
        result = await conn.fetchrow(pg_query, *pg_params)
        return tuple(result.values()) if result else None
    finally:
        await release_db_connection(conn)

async def fetch_all(query: str, params: tuple = ()):
    """–°–æ–≤–º–µ—Å—Ç–∏–º–∞—è –≤–µ—Ä—Å–∏—è fetch_all —Å –∞–≤—Ç–æ–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π SQLite ‚Üí PostgreSQL"""
    pg_query, pg_params = convert_sql_to_postgresql(query, params)
    
    conn = await get_db_connection()
    try:
        results = await conn.fetch(pg_query, *pg_params)
        return [tuple(row.values()) for row in results]
    finally:
        await release_db_connection(conn)

async def execute_query(query: str, params: tuple = ()):
    """–°–æ–≤–º–µ—Å—Ç–∏–º–∞—è –≤–µ—Ä—Å–∏—è execute_query —Å –∞–≤—Ç–æ–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π SQLite ‚Üí PostgreSQL"""
    pg_query, pg_params = convert_sql_to_postgresql(query, params)
    
    conn = await get_db_connection()
    try:
        result = await conn.execute(pg_query, *pg_params)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö —Å—Ç—Ä–æ–∫
        if result.startswith(('INSERT', 'UPDATE', 'DELETE')):
            return int(result.split()[-1])
        return 0
    finally:
        await release_db_connection(conn)

async def insert_and_get_id(query: str, params: tuple = ()):
    """–°–æ–≤–º–µ—Å—Ç–∏–º–∞—è –≤–µ—Ä—Å–∏—è INSERT —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º ID"""
    pg_query, pg_params = convert_sql_to_postgresql(query, params)
    
    # –î–æ–±–∞–≤–ª—è–µ–º RETURNING id –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if 'RETURNING' not in pg_query.upper():
        pg_query += ' RETURNING id'
    
    conn = await get_db_connection()
    try:
        result = await conn.fetchval(pg_query, *pg_params)
        return result
    finally:
        await release_db_connection(conn)

async def set_gdpr_consent(user_id: int, consent: bool = True) -> bool:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç GDPR —Å–æ–≥–ª–∞—Å–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = await get_db_connection()
    try:
        await conn.execute(
            """UPDATE users SET 
               gdpr_consent = $1, 
               gdpr_consent_time = CURRENT_TIMESTAMP 
               WHERE user_id = $2""",
            consent, user_id
        )
        
        # üìä –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–≥–ª–∞—Å–∏–µ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        if consent:
            from analytics_system import Analytics
            await Analytics.track(user_id, "gdpr_consent_given", {
                "timestamp": datetime.now().isoformat(),
                "user_agent": "telegram_bot"
            })

        return True
        
    except Exception as e:
        log_error_with_context(e, {
            "function": "set_gdpr_consent", 
            "user_id": user_id, 
            "consent": consent
        })
        return False
    finally:
        await release_db_connection(conn)

async def has_gdpr_consent(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å GDPR —Å–æ–≥–ª–∞—Å–∏–µ"""
    conn = await get_db_connection()
    try:
        row = await conn.fetchrow(
            "SELECT gdpr_consent FROM users WHERE user_id = $1", 
            user_id
        )
        return bool(row['gdpr_consent']) if row else False
    except Exception as e:
        log_error_with_context(e, {"function": "has_gdpr_consent", "user_id": user_id})
        return False
    finally:
        await release_db_connection(conn)

async def delete_user_gdpr_compliant(user_id: int) -> bool:
    """
    GDPR-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –£–¥–∞–ª—è–µ—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü + —Ñ–∞–π–ª—ã
    """
    conn = await get_db_connection()
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        documents = await conn.fetch(
            "SELECT file_path FROM documents WHERE user_id = $1", 
            user_id
        )
        
        # 2. –£–¥–∞–ª—è–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
        import os
        for doc in documents:
            file_path = doc['file_path']
            if file_path and os.path.exists(file_path):
                try:
                    os.remove(file_path)
                except OSError as e:
                    pass
        
        # 3. –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ)
        tables_to_clear = [
            "chat_history",
            "conversation_summary", 
            "document_vectors",  # –í–µ–∫—Ç–æ—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            "medical_timeline",
            "medications",
            "documents",
            "user_limits",
            "transactions", 
            "user_subscriptions",
            "users"  # –í –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—á–µ—Ä–µ–¥—å
        ]
        
        for table in tables_to_clear:
            try:
                await conn.execute(f"DELETE FROM {table} WHERE user_id = $1", user_id)
            except Exception as e:
                pass
        # 4. –£–¥–∞–ª—è–µ–º –≤–µ–∫—Ç–æ—Ä—ã (–µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
        try:
            from vector_db_postgresql import delete_all_chunks_by_user
            await delete_all_chunks_by_user(user_id)

        except Exception as e:
            pass
        # 5. –õ–æ–≥–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É (–ø–µ—Ä–µ–¥ –ø–æ–ª–Ω—ã–º —É–¥–∞–ª–µ–Ω–∏–µ–º)
        try:
            from analytics_system import Analytics
            await Analytics.track(user_id, "user_data_deleted_gdpr", {
                "timestamp": datetime.now().isoformat(),
                "reason": "gdpr_request"
            })
        except Exception as e:
            pass

        return True
        
    except Exception as e:
        log_error_with_context(e, {
            "function": "delete_user_gdpr_compliant", 
            "user_id": user_id
        })
        return False
    finally:
        await release_db_connection(conn)

async def get_last_message_id(user_id: int) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = await get_db_connection()
    try:
        row = await conn.fetchrow(
            "SELECT id FROM chat_history WHERE user_id = $1 ORDER BY id DESC LIMIT 1",
            user_id
        )
        return row['id'] if row else 0
    except Exception as e:
        log_error_with_context(e, {"function": "get_last_message_id", "user_id": user_id})
        return 0
    finally:
        await release_db_connection(conn)