# db_postgresql.py - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –±–æ—Ç–∞

import os
import asyncio
import asyncpg
from typing import Optional, List, Dict, Any
from datetime import datetime
import json
from error_handler import log_error_with_context

# üîó –ü–£–õ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô
db_pool: Optional[asyncpg.Pool] = None

async def get_db_connection():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—Ñ—Ö"""
    global db_pool
    if db_pool is None:
        raise Exception("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    return await db_pool.acquire()

async def release_db_connection(connection):
    """–û—Å–≤–æ–±–æ–¥–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"""
    global db_pool
    if db_pool:
        await db_pool.release(connection)

async def initialize_db_pool(max_connections: int = 10):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π PostgreSQL"""
    global db_pool
    
    # üîó –ü–æ–ª—É—á–∞–µ–º URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    database_url = os.getenv("DATABASE_URL")
    
    if not database_url:
        # üìù –ï—Å–ª–∏ –Ω–µ—Ç DATABASE_URL, —Å–æ–±–∏—Ä–∞–µ–º –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        db_host = os.getenv("DB_HOST", "localhost")
        db_port = os.getenv("DB_PORT", "5432")
        db_name = os.getenv("DB_NAME", "medical_bot")
        db_user = os.getenv("DB_USER", "postgres")
        db_password = os.getenv("DB_PASSWORD", "")
        
        database_url = f"postgresql://{db_user}:{db_password}@{db_host}:{db_port}/{db_name}"
    
    try:
        print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...")
        db_pool = await asyncpg.create_pool(
            database_url,
            min_size=2,
            max_size=max_connections,
            command_timeout=60
        )
        
        # ‚úÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        async with db_pool.acquire() as conn:
            result = await conn.fetchval("SELECT version()")
            print(f"‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω: {result[:50]}...")
        
        # üèóÔ∏è –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        await create_tables()
        print("üóÑÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
        log_error_with_context(e, {"action": "db_connection"})
        raise

async def close_db_pool():
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    global db_pool
    if db_pool:
        await db_pool.close()
        print("üîó –ü—É–ª PostgreSQL –∑–∞–∫—Ä—ã—Ç")

async def create_tables():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –±–æ—Ç–∞"""
    
    tables_sql = """
    -- üë§ –¢–ê–ë–õ–ò–¶–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
    CREATE TABLE IF NOT EXISTS users (
        user_id BIGINT PRIMARY KEY,
        name TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        birth_year INTEGER,
        gender TEXT,
        height_cm INTEGER,
        weight_kg REAL,
        chronic_conditions TEXT,
        medications TEXT,
        allergies TEXT,
        smoking TEXT,
        alcohol TEXT,
        physical_activity TEXT,
        family_history TEXT,
        last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        language TEXT DEFAULT 'ru'
    );

    -- üí¨ –ò–°–¢–û–†–ò–Ø –ß–ê–¢–ê
    CREATE TABLE IF NOT EXISTS chat_history (
        id SERIAL PRIMARY KEY,
        user_id BIGINT REFERENCES users(user_id) ON DELETE CASCADE,
        role TEXT NOT NULL,
        message TEXT NOT NULL,
        timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- üìÑ –î–û–ö–£–ú–ï–ù–¢–´
    CREATE TABLE IF NOT EXISTS documents (
        id SERIAL PRIMARY KEY,
        user_id BIGINT REFERENCES users(user_id) ON DELETE CASCADE,
        title TEXT,
        file_path TEXT,
        file_type TEXT,
        raw_text TEXT,
        summary TEXT,
        confirmed BOOLEAN DEFAULT FALSE,
        uploaded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        vector_id TEXT
    );

    -- üíä –õ–ï–ö–ê–†–°–¢–í–ê
    CREATE TABLE IF NOT EXISTS medications (
        id SERIAL PRIMARY KEY,
        user_id BIGINT REFERENCES users(user_id) ON DELETE CASCADE,
        name TEXT NOT NULL,
        time TEXT,
        label TEXT
    );

    -- üìä –õ–ò–ú–ò–¢–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
    CREATE TABLE IF NOT EXISTS user_limits (
        user_id BIGINT PRIMARY KEY REFERENCES users(user_id) ON DELETE CASCADE,
        documents_left INTEGER DEFAULT 3,
        gpt4o_queries_left INTEGER DEFAULT 5,
        subscription_type TEXT DEFAULT 'free',
        subscription_expires_at TIMESTAMP,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- üí≥ –¢–†–ê–ù–ó–ê–ö–¶–ò–ò
    CREATE TABLE IF NOT EXISTS transactions (
        id SERIAL PRIMARY KEY,
        user_id BIGINT REFERENCES users(user_id) ON DELETE CASCADE,
        stripe_session_id TEXT UNIQUE,
        amount_usd REAL,
        package_type TEXT,
        status TEXT DEFAULT 'pending',
        payment_method TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        completed_at TIMESTAMP,
        package_id TEXT,
        documents_granted INTEGER DEFAULT 0,
        queries_granted INTEGER DEFAULT 0
    );

    -- üì¶ –ü–ê–ö–ï–¢–´ –ü–û–î–ü–ò–°–û–ö
    CREATE TABLE IF NOT EXISTS subscription_packages (
        id TEXT PRIMARY KEY,
        name TEXT NOT NULL,
        price_usd REAL NOT NULL,
        documents_included INTEGER DEFAULT 0,
        gpt4o_queries_included INTEGER DEFAULT 0,
        type TEXT DEFAULT 'one_time',
        is_active BOOLEAN DEFAULT TRUE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- üîÑ –ü–û–î–ü–ò–°–ö–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
    CREATE TABLE IF NOT EXISTS user_subscriptions (
        id SERIAL PRIMARY KEY,
        user_id BIGINT REFERENCES users(user_id) ON DELETE CASCADE,
        stripe_subscription_id TEXT UNIQUE,
        package_id TEXT REFERENCES subscription_packages(id),
        status TEXT DEFAULT 'active',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        cancelled_at TIMESTAMP
    );

    -- üß† –†–ï–ó–Æ–ú–ï –†–ê–ó–ì–û–í–û–†–û–í
    CREATE TABLE IF NOT EXISTS conversation_summary (
        id SERIAL PRIMARY KEY,
        user_id BIGINT REFERENCES users(user_id) ON DELETE CASCADE,
        summary_text TEXT,
        last_message_id INTEGER,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- üìö –ò–ù–î–ï–ö–°–´ –î–õ–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò
    CREATE INDEX IF NOT EXISTS idx_chat_history_user_id ON chat_history(user_id);
    CREATE INDEX IF NOT EXISTS idx_documents_user_id ON documents(user_id);
    CREATE INDEX IF NOT EXISTS idx_medications_user_id ON medications(user_id);
    CREATE INDEX IF NOT EXISTS idx_transactions_user_id ON transactions(user_id);
    CREATE INDEX IF NOT EXISTS idx_user_subscriptions_user_id ON user_subscriptions(user_id);
    """
    
    conn = await get_db_connection()
    try:
        await conn.execute(tables_sql)
        print("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
        log_error_with_context(e, {"action": "create_tables"})
        raise
    finally:
        await release_db_connection(conn)

# üë§ –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò
async def get_user(user_id: int) -> Optional[Dict]:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = await get_db_connection()
    try:
        row = await conn.fetchrow("SELECT * FROM users WHERE user_id = $1", user_id)
        return dict(row) if row else None
    except Exception as e:
        log_error_with_context(e, {"function": "get_user", "user_id": user_id})
        return None
    finally:
        await release_db_connection(conn)

async def create_user(user_id: int, name: str = "") -> bool:
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = await get_db_connection()
    try:
        await conn.execute(
            "INSERT INTO users (user_id, name) VALUES ($1, $2) ON CONFLICT (user_id) DO NOTHING",
            user_id, name or None  # ‚Üê –ü—É—Å—Ç–æ–µ –∏–º—è = NULL
        )
        
        # –°–æ–∑–¥–∞–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await conn.execute(
            "INSERT INTO user_limits (user_id) VALUES ($1) ON CONFLICT (user_id) DO NOTHING",
            user_id
        )
        return True
    except Exception as e:
        log_error_with_context(e, {"function": "create_user", "user_id": user_id})
        return False
    finally:
        await release_db_connection(conn)

async def update_user_profile(user_id: int, field: str, value: Any) -> bool:
    """–û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª–µ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = await get_db_connection()
    try:
        query = f"UPDATE users SET {field} = $1, last_updated = CURRENT_TIMESTAMP WHERE user_id = $2"
        await conn.execute(query, value, user_id)
        return True
    except Exception as e:
        log_error_with_context(e, {"function": "update_user_profile", "user_id": user_id, "field": field})
        return False
    finally:
        await release_db_connection(conn)

# üìÑ –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –î–û–ö–£–ú–ï–ù–¢–ê–ú–ò
async def save_document(user_id: int, title: str, file_path: str, file_type: str, 
                       raw_text: str, summary: str, confirmed: bool = True, vector_id: str = None) -> Optional[int]:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    conn = await get_db_connection()
    try:
        doc_id = await conn.fetchval(
            """INSERT INTO documents (user_id, title, file_path, file_type, raw_text, summary, confirmed, vector_id)
               VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING id""",
            user_id, title, file_path, file_type, raw_text, summary, confirmed, vector_id
        )
        return doc_id
    except Exception as e:
        log_error_with_context(e, {"function": "save_document", "user_id": user_id})
        return None
    finally:
        await release_db_connection(conn)

async def get_user_documents(user_id: int, limit: int = 10) -> List[Dict]:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = await get_db_connection()
    try:
        rows = await conn.fetch(
            """SELECT id, title, file_type, uploaded_at as date 
               FROM documents 
               WHERE user_id = $1 
               ORDER BY uploaded_at DESC 
               LIMIT $2""",
            user_id, limit
        )
        return [dict(row) for row in rows]
    except Exception as e:
        log_error_with_context(e, {"function": "get_user_documents", "user_id": user_id})
        return []
    finally:
        await release_db_connection(conn)

# üíä –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –õ–ï–ö–ê–†–°–¢–í–ê–ú–ò
async def get_user_medications(user_id: int) -> List[Dict]:
    """–ü–æ–ª—É—á–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = await get_db_connection()
    try:
        rows = await conn.fetch(
            "SELECT * FROM medications WHERE user_id = $1 ORDER BY time",
            user_id
        )
        return [dict(row) for row in rows]
    except Exception as e:
        log_error_with_context(e, {"function": "get_user_medications", "user_id": user_id})
        return []
    finally:
        await release_db_connection(conn)

async def update_user_medications(user_id: int, medications: List[Dict]) -> bool:
    """–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = await get_db_connection()
    try:
        # üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
        await conn.execute("DELETE FROM medications WHERE user_id = $1", user_id)
        
        # ‚ûï –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
        for med in medications:
            await conn.execute(
                "INSERT INTO medications (user_id, name, time, label) VALUES ($1, $2, $3, $4)",
                user_id, med['name'], med['time'], med['label']
            )
        return True
    except Exception as e:
        log_error_with_context(e, {"function": "update_user_medications", "user_id": user_id})
        return False
    finally:
        await release_db_connection(conn)

# üí≥ –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –õ–ò–ú–ò–¢–ê–ú–ò –ò –ü–û–î–ü–ò–°–ö–ê–ú–ò
async def get_user_limits(user_id: int) -> Dict:
    """–ü–æ–ª—É—á–∏—Ç—å –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = await get_db_connection()
    try:
        row = await conn.fetchrow("SELECT * FROM user_limits WHERE user_id = $1", user_id)
        return dict(row) if row else {
            "documents_left": 3,
            "gpt4o_queries_left": 5,
            "subscription_type": "free"
        }
    except Exception as e:
        log_error_with_context(e, {"function": "get_user_limits", "user_id": user_id})
        return {"documents_left": 0, "gpt4o_queries_left": 0, "subscription_type": "free"}
    finally:
        await release_db_connection(conn)

async def decrease_user_limit(user_id: int, limit_type: str, amount: int = 1) -> bool:
    """–£–º–µ–Ω—å—à–∏—Ç—å –ª–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = await get_db_connection()
    try:
        if limit_type == "documents":
            field = "documents_left"
        elif limit_type == "gpt4o_queries":
            field = "gpt4o_queries_left"
        else:
            return False
            
        await conn.execute(
            f"UPDATE user_limits SET {field} = GREATEST({field} - $1, 0) WHERE user_id = $2",
            amount, user_id
        )
        return True
    except Exception as e:
        log_error_with_context(e, {"function": "decrease_user_limit", "user_id": user_id})
        return False
    finally:
        await release_db_connection(conn)

async def get_db_stats() -> Dict:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    import logging
    logger = logging.getLogger(__name__)  # ‚úÖ –î–û–ë–ê–í–ò–õ–ò
    
    global db_pool
    if not db_pool:
        return {"status": "error", "message": "DB pool not initialized"}
    
    conn = await get_db_connection()
    try:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        pool_stats = {
            "pool_size": db_pool.get_size(),
            "pool_min_size": db_pool.get_min_size(),
            "pool_max_size": db_pool.get_max_size(),
            "pool_idle": db_pool.get_idle_size(),
        }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞–±–ª–∏—Ü
        tables_stats = await conn.fetch("""
            SELECT 
                schemaname,
                tablename,
                n_tup_ins as inserts,
                n_tup_upd as updates,
                n_tup_del as deletes
            FROM pg_stat_user_tables 
            ORDER BY n_tup_ins DESC
            LIMIT 10
        """)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î
        db_size = await conn.fetchval("SELECT pg_database_size(current_database())")
        db_version = await conn.fetchval("SELECT version()")
        
        return {
            "status": "healthy",
            "database_size": db_size,
            "database_version": db_version[:50] + "..." if len(db_version) > 50 else db_version,
            "pool_stats": pool_stats,
            "tables_count": len(tables_stats),
            "tables_stats": [dict(row) for row in tables_stats]
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–î: {e}")  # ‚úÖ –ó–ê–ú–ï–ù–ò–õ–ò –ù–ê print
        return {"status": "error", "message": str(e)}
    finally:
        await release_db_connection(conn)

async def db_health_check() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    global db_pool
    if not db_pool:
        return False
    
    conn = await get_db_connection()
    try:
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        result = await conn.fetchval("SELECT 1")
        return result == 1
    except Exception as e:
        print(f"‚ùå Health check failed: {e}")  # ‚úÖ –ó–ê–ú–ï–ù–ò–õ–ò –ù–ê print
        return False
    finally:
        await release_db_connection(conn)

# üìÑ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –î–û–ö–£–ú–ï–ù–¢–ê–ú–ò
async def get_document_by_id(document_id: int) -> Optional[Dict]:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ ID"""
    conn = await get_db_connection()
    try:
        row = await conn.fetchrow("SELECT * FROM documents WHERE id = $1", document_id)
        return dict(row) if row else None
    except Exception as e:
        log_error_with_context(e, {"function": "get_document_by_id", "document_id": document_id})
        return None
    finally:
        await release_db_connection(conn)

async def update_document_title(document_id: int, new_title: str) -> bool:
    """–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    conn = await get_db_connection()
    try:
        result = await conn.execute(
            "UPDATE documents SET title = $1 WHERE id = $2",
            new_title, document_id
        )
        return result != "UPDATE 0"
    except Exception as e:
        log_error_with_context(e, {"function": "update_document_title", "document_id": document_id})
        return False
    finally:
        await release_db_connection(conn)

async def delete_document(document_id: int) -> bool:
    """–£–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"""
    conn = await get_db_connection()
    try:
        result = await conn.execute("DELETE FROM documents WHERE id = $1", document_id)
        return result != "DELETE 0"
    except Exception as e:
        log_error_with_context(e, {"function": "delete_document", "document_id": document_id})
        return False
    finally:
        await release_db_connection(conn)

# üí¨ –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –°–û–û–ë–©–ï–ù–ò–Ø–ú–ò
async def save_message(user_id: int, role: str, message: str) -> bool:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞"""
    conn = await get_db_connection()
    try:
        await conn.execute(
            "INSERT INTO chat_history (user_id, role, message) VALUES ($1, $2, $3)",
            user_id, role, message
        )
        return True
    except Exception as e:
        log_error_with_context(e, {"function": "save_message", "user_id": user_id})
        return False
    finally:
        await release_db_connection(conn)

async def get_last_messages(user_id: int, limit: int = 5) -> List[tuple]:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å - –≤–æ–∑–≤—Ä–∞—Ç tuples)"""
    conn = await get_db_connection()
    try:
        rows = await conn.fetch(
            """SELECT role, message FROM chat_history 
               WHERE user_id = $1 
               ORDER BY id DESC 
               LIMIT $2""",
            user_id, limit
        )
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ –∫–∞–∫ list of tuples
        return [(row['role'], row['message']) for row in reversed(rows)]
    except Exception as e:
        log_error_with_context(e, {"function": "get_last_messages", "user_id": user_id})
        return []
    finally:
        await release_db_connection(conn)

# üìù –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –†–ï–ó–Æ–ú–ï –†–ê–ó–ì–û–í–û–†–û–í
async def get_conversation_summary(user_id: int) -> tuple:
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—é–º–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)"""
    conn = await get_db_connection()
    try:
        row = await conn.fetchrow(
            "SELECT summary_text, last_message_id FROM conversation_summary WHERE user_id = $1 ORDER BY updated_at DESC LIMIT 1",
            user_id
        )
        return (row['summary_text'], row['last_message_id']) if row else ("", 0)
    except Exception as e:
        log_error_with_context(e, {"function": "get_conversation_summary", "user_id": user_id})
        return ("", 0)
    finally:
        await release_db_connection(conn)

async def save_conversation_summary(user_id: int, summary: str, last_message_id: int) -> bool:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—é–º–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
    conn = await get_db_connection()
    try:
        await conn.execute(
            """INSERT INTO conversation_summary (user_id, summary_text, last_message_id, updated_at)
               VALUES ($1, $2, $3, CURRENT_TIMESTAMP)
               ON CONFLICT (user_id) DO UPDATE SET
               summary_text = $2, last_message_id = $3, updated_at = CURRENT_TIMESTAMP""",
            user_id, summary, last_message_id
        )
        return True
    except Exception as e:
        log_error_with_context(e, {"function": "save_conversation_summary", "user_id": user_id})
        return False
    finally:
        await release_db_connection(conn)

async def get_messages_after(user_id: int, message_id: int) -> List[Dict]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ ID"""
    conn = await get_db_connection()
    try:
        rows = await conn.fetch(
            """SELECT id, role, message, timestamp 
               FROM chat_history 
               WHERE user_id = $1 AND id > $2 
               ORDER BY id ASC""",
            user_id, message_id
        )
        return [dict(row) for row in rows]
    except Exception as e:
        log_error_with_context(e, {"function": "get_messages_after", "user_id": user_id})
        return []
    finally:
        await release_db_connection(conn)

async def get_last_summary(user_id: int) -> tuple:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ä–µ–∑—é–º–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)"""
    conn = await get_db_connection()
    try:
        row = await conn.fetchrow(
            "SELECT id, summary FROM documents WHERE user_id = $1 AND confirmed = true ORDER BY uploaded_at DESC LIMIT 1",
            user_id
        )
        return (row['id'], row['summary']) if row else (None, "")
    except Exception as e:
        log_error_with_context(e, {"function": "get_last_summary", "user_id": user_id})
        return (None, "")
    finally:
        await release_db_connection(conn)

# üåê –§–£–ù–ö–¶–ò–ò –õ–û–ö–ê–õ–ò–ó–ê–¶–ò–ò
async def get_user_language(user_id: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = await get_db_connection()
    try:
        row = await conn.fetchrow("SELECT language FROM users WHERE user_id = $1", user_id)
        return row['language'] if row and row['language'] else 'ru'
    except Exception as e:
        log_error_with_context(e, {"function": "get_user_language", "user_id": user_id})
        return 'ru'
    finally:
        await release_db_connection(conn)

async def set_user_language(user_id: int, language: str) -> bool:
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–æ–∑–¥–∞—Ç—å –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)"""
    conn = await get_db_connection()
    try:
        # ‚úÖ –°–ù–ê–ß–ê–õ–ê —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        await conn.execute(
            "INSERT INTO users (user_id, language) VALUES ($1, $2) ON CONFLICT (user_id) DO NOTHING",
            user_id, language
        )
        
        # ‚úÖ –ü–û–¢–û–ú –æ–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª)
        await conn.execute(
            "UPDATE users SET language = $1 WHERE user_id = $2",
            language, user_id
        )
        
        # ‚úÖ –°–û–ó–î–ê–ï–ú –ª–∏–º–∏—Ç—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await conn.execute(
            "INSERT INTO user_limits (user_id) VALUES ($1) ON CONFLICT (user_id) DO NOTHING",
            user_id
        )
        
        return True
    except Exception as e:
        log_error_with_context(e, {"function": "set_user_language", "user_id": user_id})
        return False
    finally:
        await release_db_connection(conn)

def t(key: str, lang: str = "ru", **kwargs) -> str:
    """–§—É–Ω–∫—Ü–∏—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è)"""
    try:
        from locales import translations
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
        lang_translations = translations.get(lang, translations.get('ru', {}))
        text = lang_translations.get(key, key)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        return text.format(**kwargs) if kwargs else text
    except Exception as e:
        # Fallback –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return key

def get_all_values_for_key(key: str) -> List[str]:
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–ª—é—á–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏"""
    from locales import translations
    return [lang_data.get(key) for lang_data in translations.values() if key in lang_data]

# üë§ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –ü–†–û–§–ò–õ–Ø
async def get_user_profile(user_id: int) -> Dict:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = await get_db_connection()
    try:
        row = await conn.fetchrow("SELECT * FROM users WHERE user_id = $1", user_id)
        return dict(row) if row else {}
    except Exception as e:
        log_error_with_context(e, {"function": "get_user_profile", "user_id": user_id})
        return {}
    finally:
        await release_db_connection(conn)

async def get_user_medications_text(user_id: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ"""
    medications = await get_user_medications(user_id)
    if not medications:
        return "–ù–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ª–µ–∫–∞—Ä—Å—Ç–≤–∞"
    
    med_texts = []
    for med in medications:
        med_texts.append(f"{med['name']} ({med['label']})")
    
    return "; ".join(med_texts)

# üóëÔ∏è –§–£–ù–ö–¶–ò–Ø –£–î–ê–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
async def delete_user_completely(user_id: int) -> bool:
    """–ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—Å–µ –µ–≥–æ –¥–∞–Ω–Ω—ã–µ"""
    conn = await get_db_connection()
    try:
        # –£–¥–∞–ª—è–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–∏–∑-–∑–∞ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π)
        await conn.execute("DELETE FROM chat_history WHERE user_id = $1", user_id)
        await conn.execute("DELETE FROM conversation_summary WHERE user_id = $1", user_id)
        await conn.execute("DELETE FROM medications WHERE user_id = $1", user_id)
        await conn.execute("DELETE FROM documents WHERE user_id = $1", user_id)
        await conn.execute("DELETE FROM user_limits WHERE user_id = $1", user_id)
        await conn.execute("DELETE FROM transactions WHERE user_id = $1", user_id)
        await conn.execute("DELETE FROM user_subscriptions WHERE user_id = $1", user_id)
        await conn.execute("DELETE FROM users WHERE user_id = $1", user_id)
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã
        from vector_db_postgresql import delete_all_chunks_by_user
        await delete_all_chunks_by_user(user_id)
        
        return True
    except Exception as e:
        log_error_with_context(e, {"function": "delete_user_completely", "user_id": user_id})
        return False
    finally:
        await release_db_connection(conn)

# üìä –§–£–ù–ö–¶–ò–ò –°–¢–ê–¢–ò–°–¢–ò–ö–ò
async def get_db_stats() -> Dict:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = await get_db_connection()
    try:
        users_count = await conn.fetchval("SELECT COUNT(*) FROM users")
        docs_count = await conn.fetchval("SELECT COUNT(*) FROM documents")
        messages_count = await conn.fetchval("SELECT COUNT(*) FROM chat_history")
        
        return {
            "users": users_count,
            "documents": docs_count,
            "messages": messages_count,
            "status": "healthy"
        }
    except Exception as e:
        log_error_with_context(e, {"function": "get_db_stats"})
        return {"status": "error", "error": str(e)}
    finally:
        await release_db_connection(conn)

async def db_health_check() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = await get_db_connection()
        await conn.fetchval("SELECT 1")
        await release_db_connection(conn)
        return True
    except Exception:
        return False

# üîÑ –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨ –°–û –°–¢–ê–†–´–ú–ò –ò–ú–ï–ù–ê–ú–ò –§–£–ù–ö–¶–ò–ô
async def get_user_documents(user_id: int, limit: int = 10) -> List[Dict]:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = await get_db_connection()
    try:
        rows = await conn.fetch(
            """SELECT id, title, file_type, uploaded_at as date 
               FROM documents 
               WHERE user_id = $1 AND confirmed = TRUE
               ORDER BY uploaded_at DESC 
               LIMIT $2""",
            user_id, limit
        )
        return [dict(row) for row in rows]
    except Exception as e:
        log_error_with_context(e, {"function": "get_user_documents", "user_id": user_id})
        return []
    finally:
        await release_db_connection(conn)

async def update_user_field(user_id: int, field: str, value: Any) -> bool:
    """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: update_user_field -> update_user_profile"""
    return await update_user_profile(user_id, field, value)

async def save_user(user_id: int, name: str, birth_year: int = None) -> bool:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = await get_db_connection()
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è
        if name:
            await conn.execute(
                "UPDATE users SET name = $1 WHERE user_id = $2",
                name, user_id
            )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è
        if birth_year is not None:
            await conn.execute(
                "UPDATE users SET birth_year = $1 WHERE user_id = $2",
                birth_year, user_id
            )
        
        return True
    except Exception as e:
        log_error_with_context(e, {"function": "save_user", "user_id": user_id})
        return False
    finally:
        await release_db_connection(conn)

async def user_exists(user_id: int) -> bool:
    """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_data = await get_user(user_id)
    return user_data is not None

async def get_user_name(user_id: int) -> Optional[str]:
    """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_data = await get_user(user_id)
    return user_data.get('name') if user_data else None

async def is_fully_registered(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–ª–Ω–æ—Å—Ç—å—é –ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    conn = await get_db_connection()
    try:
        row = await conn.fetchrow(
            "SELECT name, birth_year FROM users WHERE user_id = $1", 
            user_id
        )
        
        if not row:
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        name = row['name']
        birth_year = row['birth_year']
        
        return bool(name and len(name.strip()) > 0 and birth_year)
        
    except Exception as e:
        log_error_with_context(e, {"function": "is_fully_registered", "user_id": user_id})
        return False
    finally:
        await release_db_connection(conn)

async def get_user_name(user_id: int) -> Optional[str]:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)"""
    user_data = await get_user(user_id)
    return user_data.get('name') if user_data else None

async def update_document_confirmed(document_id: int, confirmed: int) -> bool:
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    conn = await get_db_connection()
    try:
        result = await conn.execute(
            "UPDATE documents SET confirmed = $1 WHERE id = $2",
            bool(confirmed), document_id
        )
        return result != "UPDATE 0"
    except Exception as e:
        log_error_with_context(e, {"function": "update_document_confirmed", "document_id": document_id})
        return False
    finally:
        await release_db_connection(conn)

async def get_documents_by_user(user_id: int, limit: int = 10) -> List[Dict]:
    """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: get_documents_by_user -> get_user_documents"""
    return await get_user_documents(user_id, limit)

# üîß –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò

async def execute_query(query: str, params: tuple = ()) -> int:
    """
    –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (INSERT, UPDATE, DELETE)
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö —Å—Ç—Ä–æ–∫
    """
    conn = await get_db_connection()
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º SQLite —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –≤ PostgreSQL
        pg_query = query.replace('?', '${}').format(*[i+1 for i in range(len(params))])
        result = await conn.execute(pg_query, *params)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if result.startswith('INSERT'):
            return 1
        elif result.startswith('UPDATE'):
            return int(result.split()[-1]) if result.split()[-1].isdigit() else 1
        elif result.startswith('DELETE'):
            return int(result.split()[-1]) if result.split()[-1].isdigit() else 1
        else:
            return 0
    except Exception as e:
        log_error_with_context(e, {"function": "execute_query", "query": query[:100]})
        return 0
    finally:
        await release_db_connection(conn)

async def fetch_one(query: str, params: tuple = ()) -> Optional[tuple]:
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SELECT –∑–∞–ø—Ä–æ—Å–∞, –≤–æ–∑–≤—Ä–∞—Ç –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∫–∞–∫ tuple"""
    conn = await get_db_connection()
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º SQLite —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –≤ PostgreSQL
        pg_query = query.replace('?', '${}').format(*[i+1 for i in range(len(params))])
        row = await conn.fetchrow(pg_query, *params)
        return tuple(row) if row else None
    except Exception as e:
        log_error_with_context(e, {"function": "fetch_one", "query": query[:100]})
        return None
    finally:
        await release_db_connection(conn)

async def fetch_all(query: str, params: tuple = ()) -> List[tuple]:
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SELECT –∑–∞–ø—Ä–æ—Å–∞, –≤–æ–∑–≤—Ä–∞—Ç –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ –∫–∞–∫ list of tuples"""
    conn = await get_db_connection()
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º SQLite —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –≤ PostgreSQL
        pg_query = query.replace('?', '${}').format(*[i+1 for i in range(len(params))])
        rows = await conn.fetch(pg_query, *params)
        return [tuple(row) for row in rows]
    except Exception as e:
        log_error_with_context(e, {"function": "fetch_all", "query": query[:100]})
        return []
    finally:
        await release_db_connection(conn)

async def insert_and_get_id(query: str, params: tuple = ()) -> int:
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ INSERT –∏ –≤–æ–∑–≤—Ä–∞—Ç ID –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏"""
    conn = await get_db_connection()
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º SQLite —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –≤ PostgreSQL –∏ –¥–æ–±–∞–≤–ª—è–µ–º RETURNING id
        pg_query = query.replace('?', '${}').format(*[i+1 for i in range(len(params))])
        
        if 'RETURNING' not in pg_query.upper():
            # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º RETURNING id
            if 'INSERT INTO' in pg_query.upper():
                pg_query = pg_query.rstrip(';') + ' RETURNING id'
        
        result = await conn.fetchval(pg_query, *params)
        return result if result else 0
    except Exception as e:
        log_error_with_context(e, {"function": "insert_and_get_id", "query": query[:100]})
        return 0
    finally:
        await release_db_connection(conn)

async def get_medications(user_id: int) -> List[Dict]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–µ–π)"""
    conn = await get_db_connection()
    try:
        rows = await conn.fetch(
            "SELECT name, time, label FROM medications WHERE user_id = $1 ORDER BY time",
            user_id
        )
        return [{"name": row['name'], "time": row['time'], "label": row['label']} for row in rows]
    except Exception as e:
        log_error_with_context(e, {"function": "get_medications", "user_id": user_id})
        return []
    finally:
        await release_db_connection(conn)

async def replace_medications(user_id: int, new_list: List[Dict]) -> bool:
    """–ó–∞–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = await get_db_connection()
    try:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ
        await conn.execute("DELETE FROM medications WHERE user_id = $1", user_id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
        for med in new_list:
            await conn.execute(
                "INSERT INTO medications (user_id, name, time, label) VALUES ($1, $2, $3, $4)",
                user_id, med.get('name', ''), med.get('time', ''), med.get('label', '')
            )
        return True
    except Exception as e:
        log_error_with_context(e, {"function": "replace_medications", "user_id": user_id})
        return False
    finally:
        await release_db_connection(conn)

async def format_medications_schedule(user_id: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = await get_db_connection()
    try:
        rows = await conn.fetch(
            "SELECT name, time, label FROM medications WHERE user_id = $1 ORDER BY time",
            user_id
        )
        
        if not rows:
            lang = await get_user_language(user_id)
            return t("schedule_empty", lang)
        
        return "\n".join([f"{row['time']} ‚Äî {row['name']} ({row['label']})" for row in rows])
    except Exception as e:
        log_error_with_context(e, {"function": "format_medications_schedule", "user_id": user_id})
        try:
            lang = await get_user_language(user_id)
            return t("schedule_empty", lang)
        except:
            return "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
    finally:
        await release_db_connection(conn)

def validate_user_id(user_id):
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç user_id"""
    if not isinstance(user_id, int) or user_id <= 0:
        raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id")
    return user_id

def validate_string(value, max_length=500, field_name="–ø–æ–ª–µ"):
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è"""
    if not isinstance(value, str):
        raise ValueError(f"{field_name} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
    
    value = value.strip()
    if len(value) == 0:
        raise ValueError(f"{field_name} –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
    
    if len(value) > max_length:
        raise ValueError(f"{field_name} —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º {max_length} —Å–∏–º–≤–æ–ª–æ–≤)")
    
    return value

# –î–æ–±–∞–≤—å—Ç–µ –≠–¢–ò –§–£–ù–ö–¶–ò–ò –≤ –ö–û–ù–ï–¶ –≤–∞—à–µ–≥–æ db_postgresql.py

import re

def convert_sql_to_postgresql(query: str, params: tuple) -> tuple:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç SQLite –∑–∞–ø—Ä–æ—Å –≤ PostgreSQL"""
    placeholder_count = 0
    
    def replace_placeholder(match):
        nonlocal placeholder_count
        placeholder_count += 1
        return f"${placeholder_count}"
    
    converted_query = re.sub(r'\?', replace_placeholder, query)
    return converted_query, params

# ‚úÖ –°–û–í–ú–ï–°–¢–ò–ú–´–ï –§–£–ù–ö–¶–ò–ò (–¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω–µ—Ü db_postgresql.py)
async def fetch_one(query: str, params: tuple = ()):
    """–°–æ–≤–º–µ—Å—Ç–∏–º–∞—è –≤–µ—Ä—Å–∏—è fetch_one —Å –∞–≤—Ç–æ–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π SQLite ‚Üí PostgreSQL"""
    pg_query, pg_params = convert_sql_to_postgresql(query, params)
    
    conn = await get_db_connection()
    try:
        result = await conn.fetchrow(pg_query, *pg_params)
        return tuple(result.values()) if result else None
    finally:
        await release_db_connection(conn)

async def fetch_all(query: str, params: tuple = ()):
    """–°–æ–≤–º–µ—Å—Ç–∏–º–∞—è –≤–µ—Ä—Å–∏—è fetch_all —Å –∞–≤—Ç–æ–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π SQLite ‚Üí PostgreSQL"""
    pg_query, pg_params = convert_sql_to_postgresql(query, params)
    
    conn = await get_db_connection()
    try:
        results = await conn.fetch(pg_query, *pg_params)
        return [tuple(row.values()) for row in results]
    finally:
        await release_db_connection(conn)

async def execute_query(query: str, params: tuple = ()):
    """–°–æ–≤–º–µ—Å—Ç–∏–º–∞—è –≤–µ—Ä—Å–∏—è execute_query —Å –∞–≤—Ç–æ–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π SQLite ‚Üí PostgreSQL"""
    pg_query, pg_params = convert_sql_to_postgresql(query, params)
    
    conn = await get_db_connection()
    try:
        result = await conn.execute(pg_query, *pg_params)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö —Å—Ç—Ä–æ–∫
        if result.startswith(('INSERT', 'UPDATE', 'DELETE')):
            return int(result.split()[-1])
        return 0
    finally:
        await release_db_connection(conn)

async def insert_and_get_id(query: str, params: tuple = ()):
    """–°–æ–≤–º–µ—Å—Ç–∏–º–∞—è –≤–µ—Ä—Å–∏—è INSERT —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º ID"""
    pg_query, pg_params = convert_sql_to_postgresql(query, params)
    
    # –î–æ–±–∞–≤–ª—è–µ–º RETURNING id –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if 'RETURNING' not in pg_query.upper():
        pg_query += ' RETURNING id'
    
    conn = await get_db_connection()
    try:
        result = await conn.fetchval(pg_query, *pg_params)
        return result
    finally:
        await release_db_connection(conn)

# –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
# async def fetch_one_native(query: str, params: tuple = ()):
#     """–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è PostgreSQL –≤–µ—Ä—Å–∏—è"""
#     ...