# profile_manager.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –ø–æ–ª–Ω–æ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π

from db_postgresql import get_user_profile, update_user_field, t, set_user_language
import logging

logger = logging.getLogger(__name__)

class ProfileManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    @staticmethod
    async def get_profile_text(user_id: int, lang: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            profile = await get_user_profile(user_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
            profile_lines = [t("profile_title", lang)]
            
            # –ò–º—è
            name = profile.get("name") or t("profile_not_specified", lang)
            profile_lines.append(t("profile_name", lang, name=name))
            
            # –†–æ—Å—Ç
            height = profile.get("height_cm")
            height_text = f"{height}" if height else t("profile_not_specified", lang)
            profile_lines.append(t("profile_height", lang, height=height_text))
            
            # –í–µ—Å
            weight = profile.get("weight_kg")
            weight_text = f"{weight}" if weight else t("profile_not_specified", lang)
            profile_lines.append(t("profile_weight", lang, weight=weight_text))
            
            # –ê–ª–ª–µ—Ä–≥–∏–∏
            allergies = profile.get("allergies") or t("profile_not_specified", lang)
            profile_lines.append(t("profile_allergies", lang, allergies=allergies))
            
            # –ö—É—Ä–µ–Ω–∏–µ
            smoking = profile.get("smoking") or t("profile_not_specified", lang)
            profile_lines.append(t("profile_smoking", lang, smoking=smoking))
            
            # –ê–ª–∫–æ–≥–æ–ª—å
            alcohol = profile.get("alcohol") or t("profile_not_specified", lang)
            profile_lines.append(t("profile_alcohol", lang, alcohol=alcohol))
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å —ç–º–æ–¥–∑–∏
            activity = profile.get("physical_activity")
            if activity:
                # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                activity_with_emoji = ProfileManager._add_activity_emoji(activity, lang)
                profile_lines.append(t("profile_activity", lang, activity=activity_with_emoji))
            else:
                profile_lines.append(t("profile_activity", lang, activity=t("profile_not_specified", lang)))
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —è–∑—ã–∫–æ–≤
            current_lang_name = ProfileManager._get_language_name(lang)
            profile_lines.append(t("profile_language", lang, language=current_lang_name))
            
            return "\n\n".join(profile_lines)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return t("profile_load_error", lang)

    @staticmethod 
    def _get_language_name(lang: str) -> str:
        """‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–∞–µ—Ç –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º—É –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π —è–∑—ã–∫–æ–≤
            return t(f"language_name_{lang}", lang)
        except:
            # Fallback –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            fallback_names = {
                "ru": "–†—É—Å—Å–∫–∏–π", 
                "uk": "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", 
                "en": "English", 
                "de": "Deutsch"
            }
            return fallback_names.get(lang, lang)

    @staticmethod 
    def _add_activity_emoji(activity: str, lang: str) -> str:
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: –î–æ–±–∞–≤–ª—è–µ—Ç —ç–º–æ–¥–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤"""
        if not activity:
            return activity
        
        # ‚úÖ –ü–û–õ–ù–´–ô –º–∞–ø–ø–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫ —ç–º–æ–¥–∑–∏ –¥–ª—è –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤
        emoji_mapping = {
            # –†—É—Å—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏": "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
            "–ù–∏–∑–∫–∞—è": "üö∂ –ù–∏–∑–∫–∞—è",
            "–°—Ä–µ–¥–Ω—è—è": "üèÉ –°—Ä–µ–¥–Ω—è—è", 
            "–í—ã—Å–æ–∫–∞—è": "üí™ –í—ã—Å–æ–∫–∞—è",
            "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è": "üèÜ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è",
            
            # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –£–∫—Ä–∞–∏–Ω—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            "–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ": "‚ùå –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ",
            "–ù–∏–∑—å–∫–∞": "üö∂ –ù–∏–∑—å–∫–∞",
            "–°–µ—Ä–µ–¥–Ω—è": "üèÉ –°–µ—Ä–µ–¥–Ω—è",
            "–í–∏—Å–æ–∫–∞": "üí™ –í–∏—Å–æ–∫–∞",
            "–ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∞": "üèÜ –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∞",
            
            # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            "No activity": "‚ùå No activity",
            "Low": "üö∂ Low",
            "Medium": "üèÉ Medium",
            "High": "üí™ High", 
            "Professional": "üèÜ Professional",
            
            # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ù–µ–º–µ—Ü–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            "Keine Aktivit√§t": "‚ùå Keine Aktivit√§t",
            "Niedrig": "üö∂ Niedrig",
            "Mittel": "üèÉ Mittel",
            "Hoch": "üí™ Hoch",
            "Professionell": "üèÜ Professionell"
        }
        
        result = emoji_mapping.get(activity, activity)
        return result
    
    @staticmethod
    async def update_field(user_id: int, field: str, value: str, lang: str) -> tuple[bool, str]:
        """
        –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª–µ –ø—Ä–æ—Ñ–∏–ª—è
        
        Returns:
            (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
        """
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π
            processed_value = ProfileManager._process_field_value(field, value, lang)
            
            if processed_value is None:
                return False, ProfileManager._get_validation_error(field, lang)
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —è–∑—ã–∫–∞
            if field == "language":
                await set_user_language(user_id, processed_value)
                return True, t("profile_updated", processed_value)  # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤–æ–º —è–∑—ã–∫–µ
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –≤ –±–∞–∑–µ
            success = await update_user_field(user_id, field, processed_value)
            
            if success:
                return True, t("profile_updated", lang)
            else:
                return False, t("profile_update_error", lang)
                
        except Exception as e:
            return False, t("profile_update_error", lang)
    
    @staticmethod
    def _process_field_value(field: str, value: str, lang: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è"""
        value = value.strip()
        
        if field == "name":
            if len(value) < 1 or len(value) > 100:
                return None
            return value
            
        elif field == "height_cm":
            try:
                height = int(value)
                if 100 <= height <= 250:
                    return height
                return None
            except ValueError:
                return None
                
        elif field == "weight_kg":
            try:
                weight = float(value)
                if 30 <= weight <= 300:
                    return weight
                return None
            except ValueError:
                return None
                
        elif field == "allergies":
            if len(value) < 1 or len(value) > 200:
                return None
            return value
            
        elif field == "physical_activity":
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            return ProfileManager._normalize_activity_value(value, lang)
                
        elif field in ["smoking", "alcohol"]:
            return value  # –≠—Ç–∏ –ø–æ–ª—è –ø—Ä–∏—Ö–æ–¥—è—Ç —É–∂–µ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∏–∑ –∫–Ω–æ–ø–æ–∫
            
        elif field == "language":
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö 4 —è–∑—ã–∫–æ–≤
            if value in ["ru", "uk", "en", "de"]:
                return value
            return None
            
        return value
    
    @staticmethod
    def _get_validation_error(field: str, lang: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        if field == "height_cm":
            return t("invalid_height", lang)
        elif field == "weight_kg":
            return t("invalid_weight", lang)
        else:
            return t("invalid_value", lang)
        
    @staticmethod
    def _normalize_activity_value(value: str, lang: str) -> str:
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤"""
        if not value:
            return value
        
        # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        clean_value = value.strip()
        for emoji in ["‚ùå", "üö∂", "üèÉ", "üí™", "üèÜ"]:
            clean_value = clean_value.replace(emoji, "").strip()
        
        # ‚úÖ –ü–û–õ–ù–´–ô –º–∞–ø–ø–∏–Ω–≥ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
        activity_mapping = {
            # –†—É—Å—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            "–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏": "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
            "–Ω–∏–∑–∫–∞—è": "–ù–∏–∑–∫–∞—è", 
            "—Å—Ä–µ–¥–Ω—è—è": "–°—Ä–µ–¥–Ω—è—è",
            "–≤—ã—Å–æ–∫–∞—è": "–í—ã—Å–æ–∫–∞—è",
            "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è",
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–∫—Ä–∞–∏–Ω—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –º–∞–ø–ø–∏–Ω–≥–æ–º
            "–Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ": "–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ",
            "–Ω–∏–∑—å–∫–∞": "–ù–∏–∑—å–∫–∞",
            "—Å–µ—Ä–µ–¥–Ω—è": "–°–µ—Ä–µ–¥–Ω—è", 
            "–≤–∏—Å–æ–∫–∞": "–í–∏—Å–æ–∫–∞",
            "–ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∞": "–ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∞",
            
            # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            "no activity": "No activity",
            "low": "Low",
            "medium": "Medium", 
            "high": "High",
            "professional": "Professional",
            
            # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –Ω–µ–º–µ—Ü–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            "keine aktivit√§t": "Keine Aktivit√§t",
            "niedrig": "Niedrig",
            "mittel": "Mittel",
            "hoch": "Hoch", 
            "professionell": "Professionell"
        }
        
        normalized = activity_mapping.get(clean_value.lower(), clean_value)
        return normalized

# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: –ú–∞–ø–ø–∏–Ω–≥ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å –ø–æ–ª–Ω–æ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π
CHOICE_MAPPINGS = {
    "smoking": {
        "smoking_yes": {
            "ru": "–î–∞", 
            "uk": "–¢–∞–∫", 
            "en": "Yes", 
            "de": "Ja"  # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û
        },
        "smoking_no": {
            "ru": "–ù–µ—Ç", 
            "uk": "–ù—ñ", 
            "en": "No", 
            "de": "Nein"  # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û
        },
        "smoking_vape": {
            "ru": "Vape", 
            "uk": "Vape", 
            "en": "Vape", 
            "de": "Vape"  # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û
        }
    },
    "alcohol": {
        "alcohol_never": {
            "ru": "–ù–µ —É–ø–æ—Ç—Ä–µ–±–ª—è—é", 
            "uk": "–ù–µ –≤–∂–∏–≤–∞—é", 
            "en": "Never", 
            "de": "Nie"  # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û
        },
        "alcohol_sometimes": {
            "ru": "–ò–Ω–æ–≥–¥–∞", 
            "uk": "–Ü–Ω–æ–¥—ñ", 
            "en": "Sometimes", 
            "de": "Manchmal"  # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û
        },
        "alcohol_often": {
            "ru": "–ß–∞—Å—Ç–æ", 
            "uk": "–ß–∞—Å—Ç–æ", 
            "en": "Often", 
            "de": "Oft"  # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û
        }
    },
    "physical_activity": {
        "activity_none": {
            "ru": "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", 
            "uk": "–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ", 
            "en": "No activity", 
            "de": "Keine Aktivit√§t"  # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û
        },
        "activity_low": {
            "ru": "–ù–∏–∑–∫–∞—è", 
            "uk": "–ù–∏–∑—å–∫–∞", 
            "en": "Low", 
            "de": "Niedrig"  # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û
        },
        "activity_medium": {
            "ru": "–°—Ä–µ–¥–Ω—è—è", 
            "uk": "–°–µ—Ä–µ–¥–Ω—è", 
            "en": "Medium", 
            "de": "Mittel"  # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û
        },
        "activity_high": {
            "ru": "–í—ã—Å–æ–∫–∞—è", 
            "uk": "–í–∏—Å–æ–∫–∞", 
            "en": "High", 
            "de": "Hoch"  # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û
        },
        "activity_pro": {
            "ru": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è", 
            "uk": "–ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∞", 
            "en": "Professional", 
            "de": "Professionell"  # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û
        }
    }
}