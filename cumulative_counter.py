# cumulative_counter.py
"""
üìä –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤

–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–æ–º–µ–Ω—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 30-–º).
"""

import logging
from typing import Optional
from db_postgresql import execute_query, fetch_one

logger = logging.getLogger(__name__)

class CumulativeCounter:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    @staticmethod
    async def increment_message_count(user_id: int) -> int:
        """
        üìà –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ—Å–ª–µ —É–≤–µ–ª–∏—á–µ–Ω–∏—è
        """
        try:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ –ë–î –∞—Ç–æ–º–∞—Ä–Ω–æ
            await execute_query("""
                UPDATE users 
                SET total_messages_count = COALESCE(total_messages_count, 0) + 1 
                WHERE user_id = ?
            """, (user_id,))
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            result = await fetch_one("""
                SELECT total_messages_count FROM users WHERE user_id = ?
            """, (user_id,))
            
            if result:
                new_count = result[0] if isinstance(result, tuple) else result['total_messages_count']
                logger.debug(f"User {user_id}: –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ = {new_count}")
                return new_count
            else:
                logger.warning(f"User {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞")
                return 0
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –¥–ª—è user {user_id}: {e}")
            return 0
    
    @staticmethod
    async def get_message_count(user_id: int) -> int:
        """
        üìä –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ (0 –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω)
        """
        try:
            result = await fetch_one("""
                SELECT total_messages_count FROM users WHERE user_id = ?
            """, (user_id,))
            
            if result and result[0] is not None:
                count = result[0] if isinstance(result, tuple) else result['total_messages_count']
                logger.debug(f"User {user_id}: —Ç–µ–∫—É—â–∏–π –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ = {count}")
                return count
            else:
                logger.debug(f"User {user_id}: —Å—á–µ—Ç—á–∏–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0")
                return 0
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –¥–ª—è user {user_id}: {e}")
            return 0
    
    @staticmethod
    async def reset_message_count(user_id: int) -> bool:
        """
        üîÑ –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ (–æ–±—ã—á–Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            True –µ—Å–ª–∏ —Å–±—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            await execute_query("""
                UPDATE users SET total_messages_count = 0 WHERE user_id = ?
            """, (user_id,))
            
            logger.info(f"User {user_id}: –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ —Å–±—Ä–æ—à–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–∞ –¥–ª—è user {user_id}: {e}")
            return False
    
    @staticmethod
    async def init_counter_for_user(user_id: int) -> bool:
        """
        üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω)
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            True –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            current_count = await CumulativeCounter.get_message_count(user_id)
            
            if current_count == 0:
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫
                await execute_query("""
                    UPDATE users 
                    SET total_messages_count = 0 
                    WHERE user_id = ? AND total_messages_count IS NULL
                """, (user_id,))
                
                logger.debug(f"User {user_id}: –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞ –¥–ª—è user {user_id}: {e}")
            return False
    
    @staticmethod
    async def get_users_by_message_count(target_count: int, limit: int = 100) -> list:
        """
        üîç –ù–∞—Ö–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π
        
        –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ - –∫—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø–æ—Ä–æ–≥–µ –ø–æ–∫–∞–∑–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
        
        Args:
            target_count: –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            
        Returns:
            –°–ø–∏—Å–æ–∫ user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        """
        try:
            from db_postgresql import fetch_all
            
            results = await fetch_all("""
                SELECT user_id, total_messages_count 
                FROM users 
                WHERE total_messages_count = ?
                ORDER BY user_id
                LIMIT ?
            """, (target_count, limit))
            
            user_ids = [row['user_id'] for row in results] if results else []
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å {target_count} —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏")
            
            return user_ids
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å {target_count} —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏: {e}")
            return []

# üîß –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å main.py

async def increment_and_get_total_messages(user_id: int) -> int:
    """
    üéØ –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ main.py
    
    –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞
    """
    return await CumulativeCounter.increment_message_count(user_id)

async def get_total_messages(user_id: int) -> int:
    """
    üìä –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –±–µ–∑ —É–≤–µ–ª–∏—á–µ–Ω–∏—è
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞
    """
    return await CumulativeCounter.get_message_count(user_id)