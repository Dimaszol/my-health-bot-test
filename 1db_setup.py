# create_payment_tables.py - –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ª–∏–º–∏—Ç–æ–≤ –∏ –ø–ª–∞—Ç–µ–∂–µ–π

import sqlite3
from datetime import datetime

DB_PATH = "users.db"

def create_payment_tables():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ª–∏–º–∏—Ç–æ–≤ –∏ –ø–ª–∞—Ç–µ–∂–µ–π"""
    
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    print("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–ª–∞—Ç–µ–∂–µ–π...")
    
    # 1. –¢–∞–±–ª–∏—Ü–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS user_limits (
            user_id INTEGER PRIMARY KEY,
            documents_left INTEGER DEFAULT 2,
            gpt4o_queries_left INTEGER DEFAULT 10,
            subscription_type TEXT DEFAULT 'free',
            subscription_expires_at DATETIME NULL,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE
        )
    """)
    print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ user_limits —Å–æ–∑–¥–∞–Ω–∞")
    
    # 2. –¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS transactions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            stripe_session_id TEXT,
            amount_usd REAL NOT NULL,
            package_type TEXT NOT NULL,
            status TEXT DEFAULT 'pending',
            payment_method TEXT NOT NULL,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            completed_at DATETIME NULL,
            FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE
        )
    """)
    print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ transactions —Å–æ–∑–¥–∞–Ω–∞")
    
    # 3. –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    cursor.execute("CREATE INDEX IF NOT EXISTS idx_transactions_user_id ON transactions(user_id)")
    cursor.execute("CREATE INDEX IF NOT EXISTS idx_transactions_status ON transactions(status)")
    cursor.execute("CREATE INDEX IF NOT EXISTS idx_user_limits_subscription ON user_limits(subscription_type)")
    print("‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã")
    
    # 4. –°–æ–∑–¥–∞–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute("""
        INSERT OR IGNORE INTO user_limits (user_id, created_at, updated_at)
        SELECT user_id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
        FROM users
    """)
    
    added_users = cursor.rowcount
    if added_users > 0:
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –ª–∏–º–∏—Ç—ã –¥–ª—è {added_users} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    else:
        print("‚úÖ –õ–∏–º–∏—Ç—ã –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É–∂–µ —Å–æ–∑–¥–∞–Ω—ã")
    
    # 5. –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏)
    cursor.execute("""
        INSERT OR IGNORE INTO transactions 
        (user_id, stripe_session_id, amount_usd, package_type, status, payment_method)
        VALUES (1, 'test_session_123', 3.99, 'basic_sub', 'completed', 'stripe')
    """)
    
    conn.commit()
    conn.close()
    
    print("\nüéâ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
    print("üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è:")
    print("   ‚îú‚îÄ‚îÄ –°–∏—Å—Ç–µ–º—ã –ª–∏–º–∏—Ç–æ–≤")
    print("   ‚îú‚îÄ‚îÄ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π") 
    print("   ‚îî‚îÄ‚îÄ –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏")

def show_table_info():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö"""
    
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    print("\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–±–ª–∏—Ü–∞—Ö:")
    print("=" * 50)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ user_limits
    cursor.execute("SELECT COUNT(*) FROM user_limits")
    limits_count = cursor.fetchone()[0]
    print(f"üë• user_limits: {limits_count} –∑–∞–ø–∏—Å–µ–π")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ transactions  
    cursor.execute("SELECT COUNT(*) FROM transactions")
    transactions_count = cursor.fetchone()[0]
    print(f"üí≥ transactions: {transactions_count} –∑–∞–ø–∏—Å–µ–π")
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É user_limits
    print("\nüèóÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ user_limits:")
    cursor.execute("PRAGMA table_info(user_limits)")
    for row in cursor.fetchall():
        col_name, col_type, not_null, default_val = row[1], row[2], row[3], row[4]
        print(f"   ‚îú‚îÄ‚îÄ {col_name}: {col_type} {f'DEFAULT {default_val}' if default_val else ''}")
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É transactions
    print("\nüí∞ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ transactions:")
    cursor.execute("PRAGMA table_info(transactions)")
    for row in cursor.fetchall():
        col_name, col_type, not_null, default_val = row[1], row[2], row[3], row[4]
        print(f"   ‚îú‚îÄ‚îÄ {col_name}: {col_type} {f'DEFAULT {default_val}' if default_val else ''}")
    
    conn.close()

if __name__ == "__main__":
    print("üöÄ PulseBook - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–ª–∞—Ç–µ–∂–µ–π")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    create_payment_tables()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    show_table_info()
    
    print(f"\n‚úÖ –ì–æ—Ç–æ–≤–æ! –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.")