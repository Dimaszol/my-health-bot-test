# debug_utils.py - –û—Ç–ª–∞–¥–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏)

import logging
import traceback

logger = logging.getLogger(__name__)

async def full_process_debug_7374723347(user_id: int, message_text: str):
    """
    üîç –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –í–°–ï–ì–û –ü–†–û–¶–ï–°–°–ê –í–´–ë–û–†–ö–ò –î–ê–ù–ù–´–•
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∂–¥—ã–π —à–∞–≥ –∫–∞–∫ –≤ process_user_question_detailed
    """
    
    if user_id != 7374723347:
        return  # –û—Ç–ª–∞–¥–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    logger.info(f"üöÄ [FULL-DEBUG] ========== –ù–ê–ß–ò–ù–ê–ï–ú –ü–û–õ–ù–£–Æ –î–ò–ê–ì–ù–û–°–¢–ò–ö–£ ==========")
    logger.info(f"üìù [FULL-DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
    logger.info(f"üìù [FULL-DEBUG] –°–æ–æ–±—â–µ–Ω–∏–µ: {message_text}")
    
    try:
        # ========================================
        # –®–ê–ì 1: –ü–†–û–í–ï–†–ö–ê –í–ï–ö–¢–û–†–ù–û–ô –ë–ê–ó–´
        # ========================================
        logger.info(f"üîç [FULL-DEBUG] –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É...")
        
        try:
            from prompt_logger import get_user_vector_count
            vector_count = await get_user_vector_count(user_id)
            logger.info(f"üìä [FULL-DEBUG] –í–µ–∫—Ç–æ—Ä–æ–≤ –≤ –±–∞–∑–µ: {vector_count}")
            
            if vector_count == 0:
                logger.info(f"‚ö†Ô∏è [FULL-DEBUG] –ü—É—Å—Ç–∞—è –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ - –ø–æ–∏—Å–∫ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω")
            elif vector_count <= 4:
                logger.info(f"‚úÖ [FULL-DEBUG] –ú–∞–ª–æ –≤–µ–∫—Ç–æ—Ä–æ–≤ ({vector_count}) - –≤–æ–∑—å–º–µ–º –≤—Å–µ")
            else:
                logger.info(f"üîç [FULL-DEBUG] –ú–Ω–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–æ–≤ ({vector_count}) - –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –ø–æ–∏—Å–∫")
            
        except Exception as e:
            logger.error(f"‚ùå [FULL-DEBUG] –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –≤–µ–∫—Ç–æ—Ä–æ–≤: {e}")
            vector_count = 0
        
        # ========================================
        # –®–ê–ì 2: –ü–û–õ–£–ß–ï–ù–ò–ï –ü–†–û–§–ò–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
        # ========================================
        logger.info(f"üîç [FULL-DEBUG] –®–ê–ì 2: –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        
        try:
            from save_utils import format_user_profile
            profile_text = await format_user_profile(user_id)
            logger.info(f"üìã [FULL-DEBUG] –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω: {len(profile_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            logger.debug(f"üìã [FULL-DEBUG] –ü—Ä–æ—Ñ–∏–ª—å: {profile_text[:200]}...")
        except Exception as e:
            logger.error(f"‚ùå [FULL-DEBUG] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            profile_text = "–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ü–∏–µ–Ω—Ç–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω"
        
        # ========================================
        # –®–ê–ì 3: –ü–û–õ–£–ß–ï–ù–ò–ï –°–í–û–î–ö–ò –†–ê–ó–ì–û–í–û–†–ê
        # ========================================
        logger.info(f"üîç [FULL-DEBUG] –®–ê–ì 3: –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É —Ä–∞–∑–≥–æ–≤–æ—Ä–∞...")
        
        try:
            from db_postgresql import get_conversation_summary
            summary_text, last_msg_id = await get_conversation_summary(user_id)
            
            if not summary_text:
                summary_text = "–ù–æ–≤—ã–π –ø–∞—Ü–∏–µ–Ω—Ç, –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –±–µ—Å–µ–¥ –Ω–µ—Ç"
                logger.info(f"üìù [FULL-DEBUG] –°–≤–æ–¥–∫–∞ –ø—É—Å—Ç–∞—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É")
            else:
                logger.info(f"üìù [FULL-DEBUG] –°–≤–æ–¥–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: {len(summary_text)} —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {last_msg_id}")
                logger.debug(f"üìù [FULL-DEBUG] –°–≤–æ–¥–∫–∞: {summary_text[:200]}...")
                
        except Exception as e:
            logger.error(f"‚ùå [FULL-DEBUG] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏: {e}")
            summary_text = "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"
        
        # ========================================
        # –®–ê–ì 4: –û–ë–†–ê–ë–û–¢–ö–ê –í–ï–ö–¢–û–†–û–í (–ì–õ–ê–í–ù–ê–Ø –õ–û–ì–ò–ö–ê!)
        # ========================================
        logger.info(f"üîç [FULL-DEBUG] –®–ê–ì 4: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–µ–∫—Ç–æ—Ä—ã...")
        logger.info(f"üéØ [FULL-DEBUG] –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∫–∏ –¥–ª—è {vector_count} –≤–µ–∫—Ç–æ—Ä–æ–≤:")
        
        if vector_count == 0:
            # –ü—É—Å—Ç–∞—è –±–∞–∑–∞: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
            logger.info(f"üö´ [FULL-DEBUG] –ü—É—Å—Ç–∞—è –±–∞–∑–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫")
            chunks_text = "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
            chunks_found = 0
            
        elif vector_count <= 4:
            # –ú–∞–ª–æ –≤–µ–∫—Ç–æ—Ä–æ–≤: –±–µ—Ä–µ–º –≤—Å–µ
            logger.info(f"üì• [FULL-DEBUG] –ú–∞–ª–æ –≤–µ–∫—Ç–æ—Ä–æ–≤ - –±–µ—Ä–µ–º –≤—Å–µ —á–µ—Ä–µ–∑ get_all_user_chunks")
            
            try:
                from prompt_logger import get_all_user_chunks
                all_chunks = await get_all_user_chunks(user_id, limit=4)
                
                logger.info(f"üìä [FULL-DEBUG] –ü–æ–ª—É—á–µ–Ω–æ —á–∞–Ω–∫–æ–≤: {len(all_chunks) if all_chunks else 0}")
                
                if all_chunks:
                    chunk_texts = [chunk.get("chunk_text", "") for chunk in all_chunks if chunk.get("chunk_text", "").strip()]
                    chunks_text = "\n\n".join(chunk_texts)
                    chunks_found = len(chunk_texts)
                    
                    logger.info(f"‚úÖ [FULL-DEBUG] –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞–Ω–∫–æ–≤: {chunks_found}")
                    logger.info(f"üìä [FULL-DEBUG] –û–±—â–∞—è –¥–ª–∏–Ω–∞ chunks_text: {len(chunks_text)} —Å–∏–º–≤–æ–ª–æ–≤")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–∑—Ü—ã —á–∞–Ω–∫–æ–≤
                    for i, chunk in enumerate(all_chunks[:2]):
                        doc_title = chunk.get("document_title", "Unknown")
                        chunk_preview = chunk.get("chunk_text", "")[:100]
                        logger.debug(f"üìÑ [FULL-DEBUG] –ß–∞–Ω–∫ {i+1} –∏–∑ '{doc_title}': {chunk_preview}...")
                        
                else:
                    chunks_text = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
                    chunks_found = 0
                    logger.warning(f"‚ö†Ô∏è [FULL-DEBUG] get_all_user_chunks –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                    
            except Exception as e:
                logger.error(f"‚ùå [FULL-DEBUG] –û—à–∏–±–∫–∞ get_all_user_chunks: {e}")
                chunks_text = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"
                chunks_found = 0
                
        else:
            # –ú–Ω–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–æ–≤: –ø–æ–ª–Ω—ã–π –ø–æ–∏—Å–∫
            logger.info(f"üîç [FULL-DEBUG] –ú–Ω–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–æ–≤ - –¥–µ–ª–∞–µ–º –ø–æ–ª–Ω—ã–π –ø–æ–∏—Å–∫")
            
            # –®–∞–≥ 4.1: –£–ª—É—á—à–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
            logger.info(f"üîç [FULL-DEBUG] –®–∞–≥ 4.1: –£–ª—É—á—à–∞–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ GPT...")
            
            try:
                from gpt import enrich_query_for_vector_search, extract_keywords
                
                refined_query = await enrich_query_for_vector_search(message_text)
                logger.info(f"‚úÖ [FULL-DEBUG] –£–ª—É—á—à–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: '{refined_query}'")
                
                keywords = await extract_keywords(message_text)
                logger.info(f"‚úÖ [FULL-DEBUG] –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keywords}")
                
            except Exception as e:
                logger.error(f"‚ùå [FULL-DEBUG] –û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
                refined_query = message_text
                keywords = []
            
            # –®–∞–≥ 4.2: –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
            logger.info(f"üîç [FULL-DEBUG] –®–∞–≥ 4.2: –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫...")
            
            try:
                from vector_db_postgresql import search_similar_chunks
                vector_chunks = await search_similar_chunks(user_id, refined_query, limit=10)
                
                logger.info(f"üìä [FULL-DEBUG] –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫: –Ω–∞–π–¥–µ–Ω–æ {len(vector_chunks) if vector_chunks else 0} —á–∞–Ω–∫–æ–≤")
                
                if vector_chunks:
                    for i, chunk in enumerate(vector_chunks[:3]):
                        similarity = chunk.get("similarity", "unknown")
                        chunk_preview = chunk.get("chunk_text", "")[:100]
                        logger.debug(f"üîç [FULL-DEBUG] –í–µ–∫—Ç–æ—Ä–Ω—ã–π —á–∞–Ω–∫ {i+1} (similarity: {similarity}): {chunk_preview}...")
                        
            except Exception as e:
                logger.error(f"‚ùå [FULL-DEBUG] –û—à–∏–±–∫–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞: {e}")
                vector_chunks = []
            
            # –®–∞–≥ 4.3: –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            logger.info(f"üîç [FULL-DEBUG] –®–∞–≥ 4.3: –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º...")
            
            try:
                from vector_db_postgresql import keyword_search_chunks
                keyword_list_str = ", ".join(keywords) if keywords else message_text
                keyword_chunks = await keyword_search_chunks(user_id, keyword_list_str, limit=5)
                
                logger.info(f"üìä [FULL-DEBUG] –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: –Ω–∞–π–¥–µ–Ω–æ {len(keyword_chunks) if keyword_chunks else 0} —á–∞–Ω–∫–æ–≤")
                
                if keyword_chunks:
                    for i, chunk in enumerate(keyword_chunks[:3]):
                        chunk_preview = chunk.get("chunk_text", "")[:100]
                        logger.debug(f"üîë [FULL-DEBUG] –ö–ª—é—á–µ–≤–æ–π —á–∞–Ω–∫ {i+1}: {chunk_preview}...")
                        
            except Exception as e:
                logger.error(f"‚ùå [FULL-DEBUG] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: {e}")
                keyword_chunks = []
            
            # –®–∞–≥ 4.4: –ì–∏–±—Ä–∏–¥–Ω–æ–µ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ
            logger.info(f"üîç [FULL-DEBUG] –®–∞–≥ 4.4: –ì–∏–±—Ä–∏–¥–Ω–æ–µ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ...")
            
            try:
                from vector_db_postgresql import create_hybrid_ranking
                
                ranked_chunk_texts = create_hybrid_ranking(
                    vector_chunks=vector_chunks,
                    keyword_chunks=keyword_chunks,
                    boost_factor=1.8
                )
                
                selected_chunks = ranked_chunk_texts[:5]
                chunks_text = "\n\n".join(selected_chunks)
                chunks_found = len(selected_chunks)
                
                logger.info(f"‚úÖ [FULL-DEBUG] –ì–∏–±—Ä–∏–¥–Ω–æ–µ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ: –≤—ã–±—Ä–∞–Ω–æ {chunks_found} —á–∞–Ω–∫–æ–≤")
                logger.info(f"üìä [FULL-DEBUG] –û–±—â–∞—è –¥–ª–∏–Ω–∞ –ø–æ—Å–ª–µ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è: {len(chunks_text)} —Å–∏–º–≤–æ–ª–æ–≤")
                
            except Exception as e:
                logger.error(f"‚ùå [FULL-DEBUG] –û—à–∏–±–∫–∞ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
                logger.info(f"üîÑ [FULL-DEBUG] Fallback –Ω–∞ –ø—Ä–æ—Å—Ç–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ...")
                
                # Fallback –Ω–∞ –ø—Ä–æ—Å—Ç–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ
                vector_texts = [chunk.get("chunk_text", "") for chunk in vector_chunks[:3] if chunk.get("chunk_text", "").strip()]
                keyword_texts = [chunk.get("chunk_text", "") for chunk in keyword_chunks[:2] if chunk.get("chunk_text", "").strip()]
                all_chunks = list(dict.fromkeys(vector_texts + keyword_texts))
                chunks_text = "\n\n".join(all_chunks[:5])
                chunks_found = len(all_chunks)
                
                logger.info(f"‚úÖ [FULL-DEBUG] Fallback –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ: {chunks_found} —á–∞–Ω–∫–æ–≤, {len(chunks_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # ========================================
        # –®–ê–ì 5: –ü–û–õ–£–ß–ï–ù–ò–ï –Ø–ó–´–ö–ê –ò –°–û–ó–î–ê–ù–ò–ï –°–ò–°–¢–ï–ú–ù–û–ì–û –ü–†–û–ú–¢–ê
        # ========================================
        logger.info(f"üîç [FULL-DEBUG] –®–ê–ì 5: –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –∏ —Å–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç...")
        
        try:
            from db_postgresql import get_user_language
            lang = await get_user_language(user_id)
            
            system_prompt = (
                "You are a compassionate and knowledgeable virtual physician who guides the user through their medical journey. "
                "You speak in a friendly, human tone and provide explanations when needed. "
                f"Always respond in the '{lang}' language."
            )
            
            logger.info(f"üåç [FULL-DEBUG] –Ø–∑—ã–∫: {lang}")
            logger.info(f"üìã [FULL-DEBUG] –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å–æ–∑–¥–∞–Ω: {len(system_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
            
        except Exception as e:
            logger.error(f"‚ùå [FULL-DEBUG] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞: {e}")
            system_prompt = "You are a helpful medical assistant."
            lang = 'ru'
        
        # ========================================
        # –®–ê–ì 6: –ü–û–õ–£–ß–ï–ù–ò–ï –ú–ï–î–ò–¶–ò–ù–°–ö–û–ô –•–†–û–ù–û–õ–û–ì–ò–ò
        # ========================================
        logger.info(f"üîç [FULL-DEBUG] –®–ê–ì 6: –ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—é...")
        
        try:
            from prompt_logger import get_medical_timeline_simple
            medical_timeline = await get_medical_timeline_simple(user_id, limit=6)
            logger.info(f"üìÖ [FULL-DEBUG] –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—è: {len(medical_timeline)} —Å–∏–º–≤–æ–ª–æ–≤")
            logger.debug(f"üìÖ [FULL-DEBUG] Timeline: {medical_timeline[:200]}...")
        except Exception as e:
            logger.error(f"‚ùå [FULL-DEBUG] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏: {e}")
            medical_timeline = "Medical timeline: unavailable"
        
        # ========================================
        # –®–ê–ì 7: –ü–û–õ–£–ß–ï–ù–ò–ï –ü–û–°–õ–ï–î–ù–ò–• –°–û–û–ë–©–ï–ù–ò–ô
        # ========================================
        logger.info(f"üîç [FULL-DEBUG] –®–ê–ì 7: –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")
        
        try:
            from prompt_logger import get_recent_messages_formatted
            recent_messages_text = await get_recent_messages_formatted(user_id, limit=6)
            logger.info(f"üí¨ [FULL-DEBUG] –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {len(recent_messages_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            logger.debug(f"üí¨ [FULL-DEBUG] Messages: {recent_messages_text[:200]}...")
        except Exception as e:
            logger.error(f"‚ùå [FULL-DEBUG] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            recent_messages_text = "Recent messages unavailable"
        
        # ========================================
        # –®–ê–ì 8: –°–û–ó–î–ê–ù–ò–ï –§–ò–ù–ê–õ–¨–ù–û–ì–û –ü–†–û–ú–¢–ê
        # ========================================
        logger.info(f"üîç [FULL-DEBUG] –®–ê–ì 8: –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç...")
        
        user_prompt_parts = [            
            f"üìå Patient profile:\n{profile_text}",
            "",
            f"üß† Conversation summary:\n{summary_text}",
            "",
            f"üè• Medical timeline:\n{medical_timeline}",
            "",
            f"üîé Related historical data:\n{chunks_text or '–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}",
            "",
            f"üí¨ Recent messages (last 3 pairs):\n{recent_messages_text}",
            "",
            f"Patient: {message_text}"
        ]
        
        final_user_prompt = "\n".join(user_prompt_parts)
        
        # ========================================
        # –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê
        # ========================================
        logger.info(f"üìä [FULL-DEBUG] ========== –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ==========")
        logger.info(f"üìä [FULL-DEBUG] –†–∞–∑–º–µ—Ä—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:")
        logger.info(f"  üìã Profile: {len(profile_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        logger.info(f"  üß† Summary: {len(summary_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        logger.info(f"  üìÖ Timeline: {len(medical_timeline)} —Å–∏–º–≤–æ–ª–æ–≤")
        logger.info(f"  üîç Chunks: {len(chunks_text)} —Å–∏–º–≤–æ–ª–æ–≤ ({chunks_found} —á–∞–Ω–∫–æ–≤)")
        logger.info(f"  üí¨ Messages: {len(recent_messages_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        logger.info(f"üìä [FULL-DEBUG] –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç: {len(final_user_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
        logger.info(f"üìä [FULL-DEBUG] –í–µ–∫—Ç–æ—Ä–æ–≤ –≤ –±–∞–∑–µ: {vector_count}")
        
        # –ü–†–û–í–ï–†–Ø–ï–ú –ù–ê –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –†–ê–ó–ú–ï–†–´
        if len(final_user_prompt) > 100000:
            logger.error(f"üö® [FULL-DEBUG] –ö–†–ò–¢–ò–ß–ï–°–ö–ò –î–õ–ò–ù–ù–´–ô –ü–†–û–ú–ü–¢: {len(final_user_prompt)} —Å–∏–º–≤–æ–ª–æ–≤!")
            logger.error(f"üö® [FULL-DEBUG] –≠—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å —Ç–∞–π–º-–∞—É—Ç—ã GPT!")
        elif len(final_user_prompt) > 50000:
            logger.warning(f"‚ö†Ô∏è [FULL-DEBUG] –î–õ–ò–ù–ù–´–ô –ü–†–û–ú–ü–¢: {len(final_user_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–∑–µ—Ü —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
        logger.info(f"üìù [FULL-DEBUG] –ü–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞:")
        logger.info(f"     {final_user_prompt[:300]}...")
        
        logger.info(f"üèÅ [FULL-DEBUG] ========== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ==========")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        return {
            "profile_text": profile_text,
            "summary_text": summary_text,
            "medical_timeline": medical_timeline,
            "recent_messages": recent_messages_text,
            "chunks_text": chunks_text or "–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
            "chunks_found": chunks_found,
            "lang": lang,
            "context_text": final_user_prompt,
            "vector_count": vector_count
        }
        
    except Exception as e:
        logger.error(f"üí• [FULL-DEBUG] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        logger.error(f"üìã [FULL-DEBUG] Traceback:\n{traceback.format_exc()}")
        return None

async def debug_user_7374723347(user_id: int, message_text: str):
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    if user_id != 7374723347:
        return  # –û—Ç–ª–∞–¥–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    await full_process_debug_7374723347(user_id, message_text)

    logger.info(f"üîç [DEBUG-USER] –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ª–∞–¥–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    logger.info(f"üìù [DEBUG-USER] –°–æ–æ–±—â–µ–Ω–∏–µ: {message_text[:100]}")
    
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            from db_postgresql import get_user_name, get_user_language
            
            name = await get_user_name(user_id)
            lang = await get_user_language(user_id)
            
            logger.info(f"üë§ [DEBUG-USER] –ò–º—è: {name}")
            logger.info(f"üåç [DEBUG-USER] –Ø–∑—ã–∫: {lang}")
            
        except Exception as e:
            logger.error(f"‚ùå [DEBUG-USER] –û—à–∏–±–∫–∞ –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ò–°–ü–†–ê–í–õ–ï–ù–û!)
        try:
            from db_postgresql import get_documents_by_user  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ò–ú–ü–û–†–¢!
            
            docs = await get_documents_by_user(user_id)  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –í–´–ó–û–í!
            logger.info(f"üìÑ [DEBUG-USER] –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(docs) if docs else 0}")
            
            if docs:
                for i, doc in enumerate(docs[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    title = doc.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:50] if doc else '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'
                    logger.info(f"üìÑ [DEBUG-USER] –î–æ–∫—É–º–µ–Ω—Ç {i+1}: {title}")
                    
        except Exception as e:
            logger.error(f"‚ùå [DEBUG-USER] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è (–ü–†–ê–í–ò–õ–¨–ù–´–ô –ò–ú–ü–û–†–¢!)
        try:
            from db_postgresql import get_last_messages
            
            recent_msgs = await get_last_messages(user_id, limit=5)
            logger.info(f"üí¨ [DEBUG-USER] –ü–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {len(recent_msgs)}")
            
            if recent_msgs:
                for i, msg in enumerate(recent_msgs[:3]):
                    # msg —ç—Ç–æ tuple (role, message)
                    if isinstance(msg, (tuple, list)) and len(msg) >= 2:
                        role = msg[0]
                        content = str(msg[1])[:50] if msg[1] else '–ü—É—Å—Ç–æ'
                        logger.info(f"üí¨ [DEBUG-USER] –°–æ–æ–±—â–µ–Ω–∏–µ {i+1} ({role}): {content}")
            
        except Exception as e:
            logger.error(f"‚ùå [DEBUG-USER] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å (–ü–†–ê–í–ò–õ–¨–ù–´–ô –ò–ú–ü–û–†–¢!)
        try:
            from save_utils import format_user_profile
            
            profile = await format_user_profile(user_id)
            logger.info(f"üìã [DEBUG-USER] –ü—Ä–æ—Ñ–∏–ª—å: {len(profile)} —Å–∏–º–≤–æ–ª–æ–≤")
            logger.debug(f"üìã [DEBUG-USER] –ü—Ä–æ—Ñ–∏–ª—å: {profile[:200]}")
                        
        except Exception as e:
            logger.error(f"‚ùå [DEBUG-USER] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–¥–∫—É —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ (–ü–†–ê–í–ò–õ–¨–ù–´–ô –ò–ú–ü–û–†–¢!)
        try:
            from db_postgresql import get_conversation_summary
            
            summary_text, last_msg_id = await get_conversation_summary(user_id)
            logger.info(f"üß† [DEBUG-USER] –°–≤–æ–¥–∫–∞: {len(summary_text)} —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {last_msg_id}")
            
            if summary_text:
                logger.debug(f"üß† [DEBUG-USER] –°–≤–æ–¥–∫–∞: {summary_text[:200]}")
            
        except Exception as e:
            logger.error(f"‚ùå [DEBUG-USER] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏: {e}")
        
        # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –∏ –ø–æ–¥–ø–∏—Å–∫—É
        try:
            from subscription_manager import SubscriptionManager
            
            limits = await SubscriptionManager.get_user_limits(user_id)
            logger.info(f"üé´ [DEBUG-USER] –õ–∏–º–∏—Ç—ã: {limits}")
            
        except Exception as e:
            logger.error(f"‚ùå [DEBUG-USER] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤: {e}")
        
        # 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É
        try:
            from vector_db_postgresql import search_similar_chunks
            
            # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            chunks = await search_similar_chunks(user_id, "—Ç–µ—Å—Ç", limit=1)
            logger.info(f"üîç [DEBUG-USER] –í–µ–∫—Ç–æ—Ä–Ω—ã—Ö —á–∞–Ω–∫–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len(chunks) if chunks else 0}")
            
        except Exception as e:
            logger.error(f"‚ùå [DEBUG-USER] –û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã: {e}")
        
        # 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            from registration import user_states
            
            current_state = user_states.get(user_id)
            logger.info(f"üîÑ [DEBUG-USER] –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
            
        except Exception as e:
            logger.error(f"‚ùå [DEBUG-USER] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
        
        # 9. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é process_user_question_detailed
        try:
            from prompt_logger import process_user_question_detailed
            
            logger.info(f"üîç [DEBUG-USER] –ü—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å process_user_question_detailed...")
            
            # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            test_result = await process_user_question_detailed(user_id, "–∫–∞–∫ –¥–µ–ª–∞?")
            
            if test_result:
                logger.info(f"‚úÖ [DEBUG-USER] process_user_question_detailed —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
                logger.info(f"üìä [DEBUG-USER] –†–µ–∑—É–ª—å—Ç–∞—Ç: chunks_found={test_result.get('chunks_found', 0)}")
            else:
                logger.warning(f"‚ö†Ô∏è [DEBUG-USER] process_user_question_detailed –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            
        except Exception as e:
            logger.error(f"‚ùå [DEBUG-USER] –û—à–∏–±–∫–∞ –≤ process_user_question_detailed: {e}")
            logger.error(f"üìã [DEBUG-USER] Traceback process_user_question_detailed:\n{traceback.format_exc()}")
        
        logger.info(f"üîç [DEBUG-USER] –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        logger.error(f"üí• [DEBUG-USER] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏: {e}")
        logger.error(f"üìã [DEBUG-USER] Traceback:\n{traceback.format_exc()}")

# üßπ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø - –û–ß–ò–°–¢–ö–ê –î–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø

async def reset_user_cache_7374723347():
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    user_id = 7374723347
    
    logger.info(f"üîÑ [RESET-USER] –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∫—ç—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    try:
        # 1. –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            from registration import user_states
            if user_id in user_states:
                del user_states[user_id]
                logger.info(f"‚úÖ [RESET-USER] –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—á–∏—â–µ–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå [RESET-USER] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
        
        # 2. –ú–æ–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å summary (–µ—Å–ª–∏ –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è)
        try:
            from db_postgresql import get_conversation_summary
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å summary
            summary, _ = await get_conversation_summary(user_id)
            if summary:
                logger.info(f"üìù [RESET-USER] –ù–∞–π–¥–µ–Ω–∞ —Å–≤–æ–¥–∫–∞ –¥–ª–∏–Ω–æ–π {len(summary)} —Å–∏–º–≤–æ–ª–æ–≤")
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—á–∏—Å—Ç–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                
        except Exception as e:
            logger.error(f"‚ùå [RESET-USER] –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–æ —Å–≤–æ–¥–∫–æ–π: {e}")
        
        logger.info(f"üîÑ [RESET-USER] –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå [RESET-USER] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")

# üìã –ü–†–û–°–¢–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ë–´–°–¢–†–û–ì–û –í–´–ó–û–í–ê

async def quick_debug_user(user_id: int):
    """–ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ª–∞–¥–∫–∞ –ª—é–±–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    logger.info(f"‚ö° [QUICK-DEBUG] –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    try:
        from db_postgresql import get_user_name, get_db_pool
        
        name = await get_user_name(user_id)
        logger.info(f"üë§ [QUICK-DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {name}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        pool = get_db_pool()
        if pool:
            async with pool.acquire() as conn:
                msg_count = await conn.fetchval(
                    "SELECT COUNT(*) FROM chat_history WHERE user_id = $1",
                    user_id
                )
                doc_count = await conn.fetchval(
                    "SELECT COUNT(*) FROM documents WHERE user_id = $1",
                    user_id
                )
                
                logger.info(f"üìä [QUICK-DEBUG] –°–æ–æ–±—â–µ–Ω–∏–π: {msg_count}, –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {doc_count}")
        
    except Exception as e:
        logger.error(f"‚ùå [QUICK-DEBUG] –û—à–∏–±–∫–∞: {e}")