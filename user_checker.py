# debug_utils.py - –û—Ç–ª–∞–¥–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏)

import logging
import traceback

logger = logging.getLogger(__name__)

async def debug_user_5246978155(user_id: int, message_text: str):
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    if user_id != 5246978155:
        return  # –û—Ç–ª–∞–¥–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    logger.info(f"üîç [DEBUG-USER] –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ª–∞–¥–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    logger.info(f"üìù [DEBUG-USER] –°–æ–æ–±—â–µ–Ω–∏–µ: {message_text[:100]}")
    
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            from db_postgresql import get_user_name, get_user_language
            
            name = await get_user_name(user_id)
            lang = await get_user_language(user_id)
            
            logger.info(f"üë§ [DEBUG-USER] –ò–º—è: {name}")
            logger.info(f"üåç [DEBUG-USER] –Ø–∑—ã–∫: {lang}")
            
        except Exception as e:
            logger.error(f"‚ùå [DEBUG-USER] –û—à–∏–±–∫–∞ –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            from db_postgresql import get_user_documents
            
            docs = await get_user_documents(user_id)
            logger.info(f"üìÑ [DEBUG-USER] –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(docs) if docs else 0}")
            
            if docs:
                for i, doc in enumerate(docs[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    title = doc.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:50] if doc else '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'
                    logger.info(f"üìÑ [DEBUG-USER] –î–æ–∫—É–º–µ–Ω—Ç {i+1}: {title}")
                    
        except Exception as e:
            logger.error(f"‚ùå [DEBUG-USER] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è (–ü–†–ê–í–ò–õ–¨–ù–´–ô –ò–ú–ü–û–†–¢!)
        try:
            from db_postgresql import get_last_messages
            
            recent_msgs = await get_last_messages(user_id, limit=5)
            logger.info(f"üí¨ [DEBUG-USER] –ü–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {len(recent_msgs)}")
            
            if recent_msgs:
                for i, msg in enumerate(recent_msgs[:3]):
                    # msg —ç—Ç–æ tuple (role, message)
                    if isinstance(msg, (tuple, list)) and len(msg) >= 2:
                        role = msg[0]
                        content = str(msg[1])[:50] if msg[1] else '–ü—É—Å—Ç–æ'
                        logger.info(f"üí¨ [DEBUG-USER] –°–æ–æ–±—â–µ–Ω–∏–µ {i+1} ({role}): {content}")
            
        except Exception as e:
            logger.error(f"‚ùå [DEBUG-USER] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å (–ü–†–ê–í–ò–õ–¨–ù–´–ô –ò–ú–ü–û–†–¢!)
        try:
            from save_utils import format_user_profile
            
            profile = await format_user_profile(user_id)
            logger.info(f"üìã [DEBUG-USER] –ü—Ä–æ—Ñ–∏–ª—å: {len(profile)} —Å–∏–º–≤–æ–ª–æ–≤")
            logger.debug(f"üìã [DEBUG-USER] –ü—Ä–æ—Ñ–∏–ª—å: {profile[:200]}")
                        
        except Exception as e:
            logger.error(f"‚ùå [DEBUG-USER] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–¥–∫—É —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ (–ü–†–ê–í–ò–õ–¨–ù–´–ô –ò–ú–ü–û–†–¢!)
        try:
            from db_postgresql import get_conversation_summary
            
            summary_text, last_msg_id = await get_conversation_summary(user_id)
            logger.info(f"üß† [DEBUG-USER] –°–≤–æ–¥–∫–∞: {len(summary_text)} —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {last_msg_id}")
            
            if summary_text:
                logger.debug(f"üß† [DEBUG-USER] –°–≤–æ–¥–∫–∞: {summary_text[:200]}")
            
        except Exception as e:
            logger.error(f"‚ùå [DEBUG-USER] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏: {e}")
        
        # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –∏ –ø–æ–¥–ø–∏—Å–∫—É
        try:
            from subscription_manager import SubscriptionManager
            
            limits = await SubscriptionManager.get_user_limits(user_id)
            logger.info(f"üé´ [DEBUG-USER] –õ–∏–º–∏—Ç—ã: {limits}")
            
        except Exception as e:
            logger.error(f"‚ùå [DEBUG-USER] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤: {e}")
        
        # 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É
        try:
            from vector_db_postgresql import search_similar_chunks
            
            # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            chunks = await search_similar_chunks(user_id, "—Ç–µ—Å—Ç", limit=1)
            logger.info(f"üîç [DEBUG-USER] –í–µ–∫—Ç–æ—Ä–Ω—ã—Ö —á–∞–Ω–∫–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len(chunks) if chunks else 0}")
            
        except Exception as e:
            logger.error(f"‚ùå [DEBUG-USER] –û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã: {e}")
        
        # 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            from registration import user_states
            
            current_state = user_states.get(user_id)
            logger.info(f"üîÑ [DEBUG-USER] –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
            
        except Exception as e:
            logger.error(f"‚ùå [DEBUG-USER] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
        
        # 9. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é process_user_question_detailed
        try:
            from prompt_logger import process_user_question_detailed
            
            logger.info(f"üîç [DEBUG-USER] –ü—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å process_user_question_detailed...")
            
            # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            test_result = await process_user_question_detailed(user_id, "–∫–∞–∫ –¥–µ–ª–∞?")
            
            if test_result:
                logger.info(f"‚úÖ [DEBUG-USER] process_user_question_detailed —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
                logger.info(f"üìä [DEBUG-USER] –†–µ–∑—É–ª—å—Ç–∞—Ç: chunks_found={test_result.get('chunks_found', 0)}")
            else:
                logger.warning(f"‚ö†Ô∏è [DEBUG-USER] process_user_question_detailed –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            
        except Exception as e:
            logger.error(f"‚ùå [DEBUG-USER] –û—à–∏–±–∫–∞ –≤ process_user_question_detailed: {e}")
            logger.error(f"üìã [DEBUG-USER] Traceback process_user_question_detailed:\n{traceback.format_exc()}")
        
        logger.info(f"üîç [DEBUG-USER] –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        logger.error(f"üí• [DEBUG-USER] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏: {e}")
        logger.error(f"üìã [DEBUG-USER] Traceback:\n{traceback.format_exc()}")

# üßπ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø - –û–ß–ò–°–¢–ö–ê –î–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø

async def reset_user_cache_5246978155():
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    user_id = 5246978155
    
    logger.info(f"üîÑ [RESET-USER] –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∫—ç—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    try:
        # 1. –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            from registration import user_states
            if user_id in user_states:
                del user_states[user_id]
                logger.info(f"‚úÖ [RESET-USER] –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—á–∏—â–µ–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå [RESET-USER] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
        
        # 2. –ú–æ–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å summary (–µ—Å–ª–∏ –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è)
        try:
            from db_postgresql import get_conversation_summary
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å summary
            summary, _ = await get_conversation_summary(user_id)
            if summary:
                logger.info(f"üìù [RESET-USER] –ù–∞–π–¥–µ–Ω–∞ —Å–≤–æ–¥–∫–∞ –¥–ª–∏–Ω–æ–π {len(summary)} —Å–∏–º–≤–æ–ª–æ–≤")
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—á–∏—Å—Ç–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                
        except Exception as e:
            logger.error(f"‚ùå [RESET-USER] –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–æ —Å–≤–æ–¥–∫–æ–π: {e}")
        
        logger.info(f"üîÑ [RESET-USER] –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå [RESET-USER] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")

# üìã –ü–†–û–°–¢–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ë–´–°–¢–†–û–ì–û –í–´–ó–û–í–ê

async def quick_debug_user(user_id: int):
    """–ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ª–∞–¥–∫–∞ –ª—é–±–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    logger.info(f"‚ö° [QUICK-DEBUG] –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    try:
        from db_postgresql import get_user_name, get_db_pool
        
        name = await get_user_name(user_id)
        logger.info(f"üë§ [QUICK-DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {name}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        pool = get_db_pool()
        if pool:
            async with pool.acquire() as conn:
                msg_count = await conn.fetchval(
                    "SELECT COUNT(*) FROM chat_history WHERE user_id = $1",
                    user_id
                )
                doc_count = await conn.fetchval(
                    "SELECT COUNT(*) FROM documents WHERE user_id = $1",
                    user_id
                )
                
                logger.info(f"üìä [QUICK-DEBUG] –°–æ–æ–±—â–µ–Ω–∏–π: {msg_count}, –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {doc_count}")
        
    except Exception as e:
        logger.error(f"‚ùå [QUICK-DEBUG] –û—à–∏–±–∫–∞: {e}")