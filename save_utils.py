import openai
import asyncio
import base64
import mimetypes
import os
from dotenv import load_dotenv
from pdf2image import convert_from_path
from db_postgresql import get_last_message_id, get_conversation_summary, get_messages_after, save_conversation_summary, get_user_medications_text, update_user_field, get_user_language

from gpt import client, OPENAI_SEMAPHORE
from datetime import datetime

load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")
# –°–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
OPENAI_SEMAPHORE = asyncio.Semaphore(5)

def encode_file_to_base64(file_path, user_id):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ base64"""
    from file_utils import safe_file_exists
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not safe_file_exists(file_path, user_id):
        raise ValueError("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    with open(file_path, "rb") as file:
        encoded = base64.b64encode(file.read()).decode("utf-8")
    mime_type, _ = mimetypes.guess_type(file_path)
    return f"data:{mime_type};base64,{encoded}"

async def send_to_gpt_vision(image_path: str, lang: str = "ru", prompt: str = None):
    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ Gemini –≤–º–µ—Å—Ç–æ GPT Vision"""
    from gemini_analyzer import send_to_gemini_vision
    return await send_to_gemini_vision(image_path, lang, prompt)


def convert_pdf_to_images(pdf_path: str, output_dir: str, max_pages: int = 5):
    os.makedirs(output_dir, exist_ok=True)
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    for f in os.listdir(output_dir):
        if f.endswith(".png"):
            os.remove(os.path.join(output_dir, f))
            
    images = convert_from_path(
        pdf_path,
        first_page=1,
        last_page=max_pages,
        poppler_path=os.path.join(os.getcwd(), "poppler", "Library", "bin")
    )

    image_paths = []
    for i, image in enumerate(images):
        image_path = os.path.join(output_dir, f"page_{i+1}.png")
        image.save(image_path, "PNG")
        image_paths.append(image_path)

    return image_paths

def format_dialogue(messages, max_len=300):
    """
    ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: –†–∞–±–æ—Ç–∞–µ—Ç –∏ —Å–æ —Å–ª–æ–≤–∞—Ä—è–º–∏ (PostgreSQL) –∏ —Å –∫–æ—Ä—Ç–µ–∂–∞–º–∏ (SQLite)
    """
    result = []
    
    for msg in messages:
        try:
            if isinstance(msg, dict):
                # ‚úÖ –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç PostgreSQL: {'id': 123, 'role': 'user', 'message': '—Ç–µ–∫—Å—Ç'}
                role = msg.get('role', 'unknown')
                message_text = msg.get('message', '')
                result.append(f"{role.upper()}: {message_text[:max_len]}")
                
            elif isinstance(msg, (list, tuple)) and len(msg) >= 3:
                # ‚úÖ –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç SQLite: (id, role, message)
                role = msg[1]
                message_text = msg[2]
                result.append(f"{role.upper()}: {message_text[:max_len]}")
                
            elif isinstance(msg, (list, tuple)) and len(msg) >= 2:
                # ‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: (role, message)
                role = msg[0]
                message_text = msg[1]
                result.append(f"{role.upper()}: {message_text[:max_len]}")
                
            else:
                # ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {type(msg)} - {msg}")
                continue
                
        except (KeyError, IndexError, TypeError) as e:
            # ‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e} - {msg}")
            continue
    
    return "\n".join(result)

async def maybe_update_summary(user_id):
    """
    ‚úÖ –ú–£–õ–¨–¢–ò–Ø–ó–´–ß–ù–ê–Ø –≤–µ—Ä—Å–∏—è –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ask_gpt
    –°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–∫–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ —Å –ø—Ä—è–º—ã–º –≤—ã–∑–æ–≤–æ–º OpenAI API
    """
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        user_lang = await get_user_language(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —è–∑—ã–∫–∞
        if user_lang not in ['ru', 'uk', 'en']:
            user_lang = 'ru'  # fallback –¥–ª—è –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤
            
        print(f"üåê –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_lang}")
    except Exception as e:
        user_lang = "ru"  # fallback
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–∏–π: {e}")
    
    old_summary, last_id = await get_conversation_summary(user_id)
    new_messages = await get_messages_after(user_id, last_id)
    
    # ‚úÖ –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ old_summary –Ω–µ None
    if not old_summary:
        old_summary = ""  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –≤–º–µ—Å—Ç–æ None

    user_messages = []
    for msg in new_messages:
        try:
            if isinstance(msg, dict):
                if msg.get('role') == 'user':
                    user_messages.append(msg)
            elif isinstance(msg, (list, tuple)) and len(msg) >= 2:
                # ‚ùó –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å
                # get_messages_after –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç: [{'id': 123, 'role': 'user', 'message': '—Ç–µ–∫—Å—Ç'}, ...]
                # –ù–û get_last_messages –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç: [('user', '—Ç–µ–∫—Å—Ç'), ...]
                
                # –ï—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å –∏–∑ get_messages_after:
                if isinstance(msg, dict) and msg.get('role') == 'user':
                    user_messages.append(msg)
                # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ—Ä—Ç–µ–∂ –∏–∑ get_last_messages:
                elif isinstance(msg, (tuple, list)) and len(msg) >= 2 and msg[0] == 'user':
                    user_messages.append(msg)
                    
        except (KeyError, IndexError, TypeError) as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ maybe_update_summary: {e} - {msg}")
            continue
    
    if len(user_messages) < 6:
        return False  # –∂–¥—ë–º –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—à–µ—Ç —Ö–æ—Ç—è –±—ã 6 –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

    dialogue = format_dialogue(new_messages)
    today = datetime.now().strftime("%d.%m.%Y")

    # üåê –ú–£–õ–¨–¢–ò–Ø–ó–´–ß–ù–´–ô –ü–†–û–ú–ü–¢ (English prompt, user language response)
    lang_names = {
        'ru': 'Russian',
        'uk': 'Ukrainian', 
        'en': 'English'
    }
    
    prompt = (
        f"Below is a brief summary of communication between a doctor and patient, compiled earlier. "
        f"Also provided are new messages. Today's date: {today}.\n\n"
        f"üõ† Your task ‚Äî update the summary, strictly following the rules:\n"
        f"- Each complaint, symptom or recommendation in the summary should have a date of first or last mention.\n"
        f"- If new messages mention an existing problem again ‚Äî update the date to current ({today}).\n"
        f"- If a topic was **not mentioned** in new messages, **keep it with the previous date**.\n"
        f"- If any problem **hasn't been updated for more than 7 days** and is not mentioned in new messages ‚Äî **delete it**.\n"
        f"- The final summary should be brief, with dates, maximum 2-3 paragraphs. Don't duplicate or complicate.\n\n"
        f"üìò Previous summary:\n{old_summary}\n\n"
        f"üí¨ New messages:\n{dialogue}\n\n"
        f"Update the summary considering dates. IMPORTANT: Respond ONLY in {lang_names.get(user_lang, 'Russian')} language:"
    )

    # ‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±—ä—ë–º –ø—Ä–æ–º—Ç–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º (~—Ç–æ–∫–µ–Ω—ã)
    if len(prompt) > 5000:
        prompt = prompt[:5000]

    # ‚úÖ –ü–†–Ø–ú–û–ô –í–´–ó–û–í OpenAI API –í–ú–ï–°–¢–û ask_gpt
    try:
        async with OPENAI_SEMAPHORE:
            response = await client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {
                        "role": "system", 
                        "content": (
                            "You are a medical conversation summarizer. Create concise, accurate summaries "
                            "of doctor-patient conversations with dates. Focus on symptoms, diagnoses, "
                            "treatments, and recommendations mentioned in the conversation. "
                            f"Always respond ONLY in {lang_names.get(user_lang, 'Russian')} language, "
                            f"regardless of the input language."
                        )
                    },
                    {"role": "user", "content": prompt}
                ],
                max_tokens=800,
                temperature=0.3  # –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏ —Å–≤–æ–¥–æ–∫
            )
            
            # ‚úÖ –ë–ï–ó–û–ü–ê–°–ù–û–ï –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            response_content = response.choices[0].message.content
            if not response_content:
                print(f"‚ö†Ô∏è GPT –≤–µ—Ä–Ω—É–ª None –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return False
                
            new_summary = response_content.strip()
            
            # ‚úÖ –ü–†–û–í–ï–†–ö–ê: —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
            if not new_summary:
                print(f"‚ö†Ô∏è GPT –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç—É—é —Å–≤–æ–¥–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return False
                
            print(f"‚úÖ –°–≤–æ–¥–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ —è–∑—ã–∫–µ {user_lang}")
            print(f"üìÑ –ü—Ä–µ–≤—å—é —Å–≤–æ–¥–∫–∏: {new_summary[:100]}...")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False  # –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤–æ–¥–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π
    # ‚úÖ –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ None
    if (new_summary and old_summary and 
        str(new_summary).strip() != str(old_summary).strip()) or \
       (new_summary and not old_summary):  # –ò–ª–∏ –µ—Å–ª–∏ —Å—Ç–∞—Ä–æ–π —Å–≤–æ–¥–∫–∏ –Ω–µ—Ç, –∞ –Ω–æ–≤–∞—è –µ—Å—Ç—å
        # ‚úÖ –ë–ï–ó–û–ü–ê–°–ù–û–ï –ø–æ–ª—É—á–µ–Ω–∏–µ last_message_id
        try:
            if new_messages:
                last_msg = new_messages[-1]
                if isinstance(last_msg, dict):
                    # –§–æ—Ä–º–∞—Ç: {'id': 123, 'role': 'user', 'message': '—Ç–µ–∫—Å—Ç'}
                    last_message_id = last_msg.get('id', 0)
                elif isinstance(last_msg, (list, tuple)) and len(last_msg) >= 1:
                    # –§–æ—Ä–º–∞—Ç: ('user', '—Ç–µ–∫—Å—Ç') - –Ω–µ—Ç ID, –±–µ—Ä–µ–º –∏–∑ –±–∞–∑—ã
                    last_message_id = await get_last_message_id(user_id)
                else:
                    last_message_id = await get_last_message_id(user_id)
            else:
                last_message_id = await get_last_message_id(user_id)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è last_message_id: {e}")
            last_message_id = await get_last_message_id(user_id)  # Fallback
        
        await save_conversation_summary(user_id, new_summary, last_message_id)
        print(f"üíæ –°–≤–æ–¥–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return True
    else:
        print(f"üìù –°–≤–æ–¥–∫–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return False

async def format_user_profile(user_id: int) -> str:
    """
    ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ user_id
    """
    try:
        from db_postgresql import get_user_profile
        from datetime import datetime
        
        profile = await get_user_profile(user_id)
        
        # ‚ùó –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: profile –º–æ–∂–µ—Ç –±—ã—Ç—å None –∏–ª–∏ –ø—É—Å—Ç–æ–π
        if not profile:
            return "–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ü–∏–µ–Ω—Ç–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω"
        
        parts = []

        # –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞: –∏–º—è, –≤–æ–∑—Ä–∞—Å—Ç, –ø–æ–ª, —Ä–æ—Å—Ç –∏ –≤–µ—Å
        base = []
        if profile.get("name"):
            base.append(str(profile["name"]))
        if profile.get("birth_year"):
            try:
                age = datetime.now().year - int(profile["birth_year"])
                base.append(f"{age} y/o")
            except (ValueError, TypeError):
                pass
        if profile.get("gender"):
            base.append(str(profile["gender"]))
        if profile.get("height_cm"):
            base.append(f"{profile['height_cm']} cm")
        if profile.get("weight_kg"):
            base.append(f"{profile['weight_kg']} kg")
        
        if base:
            parts.append(", ".join(base))

        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Å–∂–∞—Ç–æ–π —Å—Ç—Ä–æ–∫–µ
        extras = []
        if profile.get("allergies"):
            extras.append(f"Allergies: {profile['allergies']}")
        if profile.get("alcohol"):
            extras.append(f"Alcohol: {profile['alcohol']}")
        if profile.get("physical_activity"):
            extras.append(f"Physical activity: {profile['physical_activity']}")
        if profile.get("chronic_conditions"):
            extras.append(f"Chronic conditions: {profile['chronic_conditions']}")
        if profile.get("smoking"):
            extras.append(f"Smoking: {profile['smoking']}")
        if profile.get("family_history"):
            extras.append(f"Family history: {profile['family_history']}")
        if profile.get("medications"):
            extras.append(f"Medications: {profile['medications']}")    

        if extras:
            parts.append(" | ".join(extras))

        return "\n".join(parts) if parts else "–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ü–∏–µ–Ω—Ç–∞ —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω"
        
    except Exception as e:
        import logging
        logger = logging.getLogger(__name__)
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞"

async def update_user_profile_medications(user_id: int):
    text = await get_user_medications_text(user_id)
    await update_user_field(user_id, "medications", text)