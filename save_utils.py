import openai
import base64
import mimetypes
import os
from pdf2image import convert_from_path
from db_postgresql import get_conversation_summary, get_messages_after, save_conversation_summary, \
    get_user_medications_text, update_user_field

from gpt import ask_gpt, extract_text_from_image
from datetime import datetime

openai.api_key = os.getenv("OPENAI_API_KEY")

def encode_file_to_base64(file_path, user_id):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ base64"""
    from file_utils import safe_file_exists
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not safe_file_exists(file_path, user_id):
        raise ValueError("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    with open(file_path, "rb") as file:
        encoded = base64.b64encode(file.read()).decode("utf-8")
    mime_type, _ = mimetypes.guess_type(file_path)
    return f"data:{mime_type};base64,{encoded}"

async def send_to_gpt_vision(image_path: str, lang: str = "ru", prompt: str = None):
    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ Gemini –≤–º–µ—Å—Ç–æ GPT Vision"""
    from gemini_analyzer import send_to_gemini_vision
    return await send_to_gemini_vision(image_path, lang, prompt)


def convert_pdf_to_images(pdf_path: str, output_dir: str, max_pages: int = 5):
    os.makedirs(output_dir, exist_ok=True)
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    for f in os.listdir(output_dir):
        if f.endswith(".png"):
            os.remove(os.path.join(output_dir, f))
            
    images = convert_from_path(
        pdf_path,
        first_page=1,
        last_page=max_pages,
        poppler_path=os.path.join(os.getcwd(), "poppler", "Library", "bin")
    )

    image_paths = []
    for i, image in enumerate(images):
        image_path = os.path.join(output_dir, f"page_{i+1}.png")
        image.save(image_path, "PNG")
        image_paths.append(image_path)

    return image_paths

def format_dialogue(messages, max_len=300):
    """
    ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: –†–∞–±–æ—Ç–∞–µ—Ç –∏ —Å–æ —Å–ª–æ–≤–∞—Ä—è–º–∏ (PostgreSQL) –∏ —Å –∫–æ—Ä—Ç–µ–∂–∞–º–∏ (SQLite)
    """
    result = []
    
    for msg in messages:
        try:
            if isinstance(msg, dict):
                # ‚úÖ –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç PostgreSQL: {'id': 123, 'role': 'user', 'message': '—Ç–µ–∫—Å—Ç'}
                role = msg.get('role', 'unknown')
                message_text = msg.get('message', '')
                result.append(f"{role.upper()}: {message_text[:max_len]}")
                
            elif isinstance(msg, (list, tuple)) and len(msg) >= 3:
                # ‚úÖ –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç SQLite: (id, role, message)
                role = msg[1]
                message_text = msg[2]
                result.append(f"{role.upper()}: {message_text[:max_len]}")
                
            elif isinstance(msg, (list, tuple)) and len(msg) >= 2:
                # ‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: (role, message)
                role = msg[0]
                message_text = msg[1]
                result.append(f"{role.upper()}: {message_text[:max_len]}")
                
            else:
                # ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {type(msg)} - {msg}")
                continue
                
        except (KeyError, IndexError, TypeError) as e:
            # ‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e} - {msg}")
            continue
    
    return "\n".join(result)

async def maybe_update_summary(user_id):
    old_summary, last_id = await get_conversation_summary(user_id)
    new_messages = await get_messages_after(user_id, last_id)

    user_messages = []
    for msg in new_messages:
        if isinstance(msg, dict):
            if msg.get('role') == 'user':
                user_messages.append(msg)
        elif isinstance(msg, (list, tuple)) and len(msg) >= 2:
            if msg[1] == 'user':  # –∏–ª–∏ msg[0] –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
                user_messages.append(msg)
    
    if len(user_messages) < 6:
        return  # –∂–¥—ë–º –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—à–µ—Ç —Ö–æ—Ç—è –±—ã 6 –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

    dialogue = format_dialogue(new_messages)
    today = datetime.now().strftime("%d.%m.%Y")

    prompt = (
        f"–ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∞ –∫—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –æ–±—â–µ–Ω–∏—è –º–µ–∂–¥—É –≤—Ä–∞—á–æ–º –∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–º, —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–∞—è —Ä–∞–Ω–µ–µ. "
        f"–¢–∞–∫–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞: {today}.\n\n"
        f"üõ† –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å summary, —Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É—è –ø—Ä–∞–≤–∏–ª–∞–º:\n"
        f"- –ö–∞–∂–¥–∞—è –∂–∞–ª–æ–±–∞, —Å–∏–º–ø—Ç–æ–º –∏–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –≤ —Å–≤–æ–¥–∫–µ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –¥–∞—Ç—É –ø–µ—Ä–≤–æ–≥–æ –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è.\n"
        f"- –ï—Å–ª–∏ –≤ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å–Ω–æ–≤–∞ –≥–æ–≤–æ—Ä–∏—Ç—Å—è –æ–± —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø—Ä–æ–±–ª–µ–º–µ ‚Äî –æ–±–Ω–æ–≤–∏ –¥–∞—Ç—É –Ω–∞ —Ç–µ–∫—É—â—É—é ({today}).\n"
        f"- –ï—Å–ª–∏ —Ç–µ–º–∞ **–Ω–µ —É–ø–æ–º–∏–Ω–∞–ª–∞—Å—å** –≤ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö, **–æ—Å—Ç–∞–≤—å –µ—ë —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –¥–∞—Ç–æ–π**.\n"
        f"- –ï—Å–ª–∏ –∫–∞–∫–∞—è-—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ **–Ω–µ –æ–±–Ω–æ–≤–ª—è–ª–∞—Å—å –±–æ–ª–µ–µ 7 –¥–Ω–µ–π**, –∏ –≤ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –æ–Ω–∞ –Ω–µ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è ‚Äî **—É–¥–∞–ª–∏ –µ—ë**.\n"
        f"- –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫—Ä–∞—Ç–∫–æ–π, —Å –¥–∞—Ç–∞–º–∏, 2‚Äì3 –∞–±–∑–∞—Ü–∞ –º–∞–∫—Å–∏–º—É–º. –ù–µ –¥—É–±–ª–∏—Ä—É–π –∏ –Ω–µ —É—Å–ª–æ–∂–Ω—è–π.\n\n"
        f"üìò –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å–≤–æ–¥–∫–∞:\n{old_summary}\n\n"
        f"üí¨ –ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n{dialogue}\n\n"
        f"–û–±–Ω–æ–≤–∏ —Å–≤–æ–¥–∫—É —Å —É—á—ë—Ç–æ–º –¥–∞—Ç:"
    )

    # ‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±—ä—ë–º –ø—Ä–æ–º—Ç–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º (~—Ç–æ–∫–µ–Ω—ã)
    if len(prompt) > 5000:
        prompt = prompt[:5000]
    new_summary = await ask_gpt(prompt)

    if new_summary.strip() != old_summary.strip():
        last_message_id = new_messages[-1][0]
        await save_conversation_summary(user_id, new_summary, last_message_id)

async def format_user_profile(user_id: int) -> str:
    """
    ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ user_id
    """
    try:
        from db_postgresql import get_user_profile
        from datetime import datetime
        
        profile = await get_user_profile(user_id)
        
        # ‚ùó –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: profile –º–æ–∂–µ—Ç –±—ã—Ç—å None –∏–ª–∏ –ø—É—Å—Ç–æ–π
        if not profile:
            return "–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ü–∏–µ–Ω—Ç–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω"
        
        parts = []

        # –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞: –∏–º—è, –≤–æ–∑—Ä–∞—Å—Ç, –ø–æ–ª, —Ä–æ—Å—Ç –∏ –≤–µ—Å
        base = []
        if profile.get("name"):
            base.append(str(profile["name"]))
        if profile.get("birth_year"):
            try:
                age = datetime.now().year - int(profile["birth_year"])
                base.append(f"{age} y/o")
            except (ValueError, TypeError):
                pass
        if profile.get("gender"):
            base.append(str(profile["gender"]))
        if profile.get("height_cm"):
            base.append(f"{profile['height_cm']} cm")
        if profile.get("weight_kg"):
            base.append(f"{profile['weight_kg']} kg")
        
        if base:
            parts.append(", ".join(base))

        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Å–∂–∞—Ç–æ–π —Å—Ç—Ä–æ–∫–µ
        extras = []
        if profile.get("allergies"):
            extras.append(f"Allergies: {profile['allergies']}")
        if profile.get("alcohol"):
            extras.append(f"Alcohol: {profile['alcohol']}")
        if profile.get("physical_activity"):
            extras.append(f"Physical activity: {profile['physical_activity']}")
        if profile.get("chronic_conditions"):
            extras.append(f"Chronic conditions: {profile['chronic_conditions']}")
        if profile.get("smoking"):
            extras.append(f"Smoking: {profile['smoking']}")
        if profile.get("family_history"):
            extras.append(f"Family history: {profile['family_history']}")
        if profile.get("medications"):
            extras.append(f"Medications: {profile['medications']}")    

        if extras:
            parts.append(" | ".join(extras))

        return "\n".join(parts) if parts else "–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ü–∏–µ–Ω—Ç–∞ —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω"
        
    except Exception as e:
        import logging
        logger = logging.getLogger(__name__)
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞"

async def update_user_profile_medications(user_id: int):
    text = await get_user_medications_text(user_id)
    await update_user_field(user_id, "medications", text)