# webapp/routes/auth.py
# üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Google OAuth –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –±–æ—Ç–∞ - FASTAPI –í–ï–†–°–ò–Ø

import os
import sys
from fastapi import APIRouter, Request
from fastapi.responses import RedirectResponse
from authlib.integrations.starlette_client import OAuth

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from webapp.config import Config

# ‚úÖ –ò–ú–ü–û–†–¢–ò–†–£–ï–ú ASYNC –§–£–ù–ö–¶–ò–ò –∏–∑ db_postgresql.py
from db_postgresql import get_db_connection, release_db_connection

"""
üéØ –ö–ê–ö –†–ê–ë–û–¢–ê–ï–¢ GOOGLE OAUTH (–ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏):

1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç "–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Google" ‚Üí /auth/google
2. FastAPI –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–∞–π—Ç Google
3. Google —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: "–†–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–º—É email –∏ –∏–º–µ–Ω–∏?"
4. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç "–î–∞"
5. Google –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—Ä–∞—Ç–Ω–æ ‚Üí /auth/google/callback
6. FastAPI –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (email, –∏–º—è, google_id)
7. FastAPI –ø—Ä–æ–≤–µ—Ä—è–µ—Ç: –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î?
   - –ï—Å–ª–∏ –î–ê ‚Üí –≤—Ö–æ–¥–∏–º (—Å–æ—Ö—Ä–∞–Ω—è–µ–º user_id –≤ session)
   - –ï—Å–ª–∏ –ù–ï–¢ ‚Üí —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ—Ç–æ–º –≤—Ö–æ–¥–∏–º
8. –†–µ–¥–∏—Ä–µ–∫—Ç –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç

–ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –ú—ã –ù–ï —Ö—Ä–∞–Ω–∏–º –ø–∞—Ä–æ–ª–∏! Google –≤—Å—ë –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞ –Ω–∞—Å.
"""

# üìò –°–û–ó–î–ê–Å–ú ROUTER (–∞–Ω–∞–ª–æ–≥ Blueprint)
router = APIRouter()

# üîß –ù–ê–°–¢–†–û–ô–ö–ê GOOGLE OAUTH
# ‚ö†Ô∏è –í–ê–ñ–ù–û: –î–ª—è FastAPI –∏—Å–ø–æ–ª—å–∑—É–µ–º starlette_client, –ù–ï flask_client!
oauth = OAuth()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Google –∫–∞–∫ OAuth –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
google = oauth.register(
    name='google',
    client_id=Config.GOOGLE_CLIENT_ID,
    client_secret=Config.GOOGLE_CLIENT_SECRET,
    server_metadata_url='https://accounts.google.com/.well-known/openid-configuration',
    client_kwargs={
        'scope': 'openid email profile'  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º: ID, email, –∏–º—è
    }
)


# ==========================================
# üîß ASYNC –§–£–ù–ö–¶–ò–Ø: –ù–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# ==========================================

async def find_or_create_web_user(google_id: str, email: str, name: str) -> dict:
    """
    –ù–∞—Ö–æ–¥–∏—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–≥–æ
    
    ‚úÖ –ü–û–õ–ù–û–°–¢–¨–Æ ASYNC! –ë–ï–ó psycopg2!
    –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ db_postgresql.py
    """
    conn = await get_db_connection()
    
    try:
        # 1. –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await conn.fetchrow(
            "SELECT user_id, name, email FROM users WHERE google_id = $1",
            google_id
        )
        
        if user:
            print(f"üìç –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {email}")
            return {
                'user_id': user['user_id'],
                'name': user['name'],
                'email': user['email']
            }
        
        # 2. –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print(f"üÜï –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –≤–µ–±-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {email}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID
        temp_user_id = await conn.fetchval("SELECT generate_temp_web_user_id()")
        
        # –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await conn.execute("""
            INSERT INTO users (user_id, name, google_id, email, registration_source, created_at)
            VALUES ($1, $2, $3, $4, 'web', NOW())
            ON CONFLICT (user_id) DO NOTHING
        """, temp_user_id, name, google_id, email)
        
        # –°–æ–∑–¥–∞—ë–º –ª–∏–º–∏—Ç—ã
        await conn.execute("""
            INSERT INTO user_limits (user_id, documents_left, gpt4o_queries_left, subscription_type)
            VALUES ($1, 2, 10, 'free')
            ON CONFLICT (user_id) DO NOTHING
        """, temp_user_id)
        
        print(f"‚úÖ –í–µ–±-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: user_id={temp_user_id}")
        
        return {
            'user_id': temp_user_id,
            'name': name,
            'email': email
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        import traceback
        traceback.print_exc()
        return None
        
    finally:
        await release_db_connection(conn)


# ==========================================
# üöÄ –ú–ê–†–®–†–£–¢ 1: –ù–∞—á–∞–ª–æ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Google
# ==========================================

@router.get("/google")
async def google_login(request: Request):
    """
    –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ Google
    
    ‚úÖ –û–¢–õ–ò–ß–ò–ï –û–¢ FLASK:
    - –ò—Å–ø–æ–ª—å–∑—É–µ–º request.url_for –≤–º–µ—Å—Ç–æ url_for
    - –î–æ–±–∞–≤–ª—è–µ–º await –∫ authorize_redirect
    """
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL –¥–ª—è callback
    redirect_uri = request.url_for('google_callback')
    
    # ‚úÖ AWAIT! –í Flask –Ω–µ –±—ã–ª–æ await
    return await google.authorize_redirect(request, redirect_uri)


# ==========================================
# üîÑ –ú–ê–†–®–†–£–¢ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Google
# ==========================================

@router.get("/google/callback")
async def google_callback(request: Request):
    """
    Google –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—é–¥–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
    
    ‚úÖ –ë–ï–ó –ö–û–°–¢–´–õ–ï–ô! –ü—Ä–æ—Å—Ç–æ await!
    """
    try:
        # ‚úÖ AWAIT! –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –æ—Ç Google
        token = await google.authorize_access_token(request)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = token.get('userinfo')
        
        if not user_info:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç Google")
            return RedirectResponse(url='/login', status_code=302)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        google_id = user_info.get('sub')
        email = user_info.get('email')
        name = user_info.get('name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à—ë–ª —á–µ—Ä–µ–∑ Google: {email}")
        
        # ‚úÖ AWAIT! –°–æ–∑–¥–∞—ë–º/–Ω–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await find_or_create_web_user(google_id, email, name)
        
        if user:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏
            request.session['user_id'] = user['user_id']
            request.session['email'] = email
            request.session['name'] = name
            request.session['google_id'] = google_id
            
            # ‚úÖ AWAIT! –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
            try:
                conn = await get_db_connection()
                
                try:
                    result = await conn.fetchrow(
                        "SELECT language FROM users WHERE user_id = $1", 
                        user['user_id']
                    )
                    
                    if result and result['language']:
                        user_language = result['language']
                        request.session['language'] = user_language
                        print(f"‚úÖ –Ø–∑—ã–∫ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –ë–î: {user_language}")
                    else:
                        # –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - —Å—Ç–∞–≤–∏–º —Ä—É—Å—Å–∫–∏–π
                        request.session['language'] = 'ru'
                        print(f"‚ö†Ô∏è –Ø–∑—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–∏–π")
                        
                finally:
                    await release_db_connection(conn)
                    
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —è–∑—ã–∫–∞: {e}")
                request.session['language'] = 'ru'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π
            
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: user_id={user['user_id']}")
            
            # –†–µ–¥–∏—Ä–µ–∫—Ç–∏–º –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
            return RedirectResponse(url='/dashboard', status_code=302)
            
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return RedirectResponse(url='/login', status_code=302)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ —á–µ—Ä–µ–∑ Google: {e}")
        import traceback
        traceback.print_exc()
        return RedirectResponse(url='/login', status_code=302)


# ==========================================
# üìä –ò–¢–û–ì–û: –ß–¢–û –ò–ó–ú–ï–ù–ò–õ–û–°–¨?
# ==========================================
"""
‚ùå –ë–´–õ–û (Flask + psycopg2):
- 200+ —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞
- import psycopg2 - –ö–û–°–¢–´–õ–¨! üî¥
- get_clean_database_url() - –ö–û–°–¢–´–õ–¨! üî¥
- cursor.execute() –≤–µ–∑–¥–µ - –ö–û–°–¢–´–õ–¨! üî¥
- conn.commit(), cursor.close() - –ö–û–°–¢–´–õ–ò! üî¥
- –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è find_or_create_web_user_sync

‚úÖ –°–¢–ê–õ–û (FastAPI + asyncpg):
- 150 —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞
- –ë–ï–ó psycopg2! ‚úÖ
- –ë–ï–ó get_clean_database_url()! ‚úÖ
- –ü—Ä–æ—Å—Ç–æ await conn.fetchrow() ‚úÖ
- Async —Ñ—É–Ω–∫—Ü–∏—è find_or_create_web_user ‚úÖ
- authlib.integrations.starlette_client –≤–º–µ—Å—Ç–æ flask_client

–ì–õ–ê–í–ù–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø:
1. flask_client ‚Üí starlette_client
2. def ‚Üí async def
3. google.authorize_redirect(...) ‚Üí await google.authorize_redirect(request, ...)
4. google.authorize_access_token() ‚Üí await google.authorize_access_token(request)
5. psycopg2 ‚Üí asyncpg (—á–µ—Ä–µ–∑ –≥–æ—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏)
6. url_for() ‚Üí request.url_for()
7. redirect() ‚Üí RedirectResponse()

–†–ê–ó–ù–ò–¶–ê: -50 —Å—Ç—Ä–æ–∫, 0 –∫–æ—Å—Ç—ã–ª–µ–π, –ø–æ–ª–Ω–æ—Å—Ç—å—é async! üéâ
"""