# webapp/routes/auth.py
# üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Google OAuth –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –±–æ—Ç–∞

import os
import sys
import asyncio
from flask import Blueprint, redirect, url_for, session, request
from authlib.integrations.flask_client import OAuth

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from webapp.config import Config
from db_postgresql import get_user_profile

"""
üéØ –ö–ê–ö –†–ê–ë–û–¢–ê–ï–¢ GOOGLE OAUTH (–ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏):

1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç "–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Google" ‚Üí /auth/google
2. Flask –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–∞–π—Ç Google
3. Google —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: "–†–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–º—É email –∏ –∏–º–µ–Ω–∏?"
4. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç "–î–∞"
5. Google –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—Ä–∞—Ç–Ω–æ ‚Üí /auth/google/callback
6. Flask –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (email, –∏–º—è, google_id)
7. Flask –ø—Ä–æ–≤–µ—Ä—è–µ—Ç: –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î?
   - –ï—Å–ª–∏ –î–ê ‚Üí –≤—Ö–æ–¥–∏–º (—Å–æ—Ö—Ä–∞–Ω—è–µ–º user_id –≤ session)
   - –ï—Å–ª–∏ –ù–ï–¢ ‚Üí —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ—Ç–æ–º –≤—Ö–æ–¥–∏–º
8. –†–µ–¥–∏—Ä–µ–∫—Ç –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç

–ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –ú—ã –ù–ï —Ö—Ä–∞–Ω–∏–º –ø–∞—Ä–æ–ª–∏! Google –≤—Å—ë –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞ –Ω–∞—Å.
"""

# üìò –°–û–ó–î–ê–Å–ú BLUEPRINT (–º–æ–¥—É–ª—å –º–∞—Ä—à—Ä—É—Ç–æ–≤)
auth_bp = Blueprint('auth', __name__)

# üîß –ù–ê–°–¢–†–û–ô–ö–ê GOOGLE OAUTH
oauth = OAuth()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Google –∫–∞–∫ OAuth –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
google = oauth.register(
    name='google',
    client_id=Config.GOOGLE_CLIENT_ID,
    client_secret=Config.GOOGLE_CLIENT_SECRET,
    server_metadata_url='https://accounts.google.com/.well-known/openid-configuration',
    client_kwargs={
        'scope': 'openid email profile'  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º: ID, email, –∏–º—è
    }
)


# üöÄ –ú–ê–†–®–†–£–¢ 1: –ù–∞—á–∞–ª–æ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Google
@auth_bp.route('/google')
def google_login():
    """
    –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ Google
    
    –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç:
    1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º redirect_uri (–∫—É–¥–∞ Google –≤–µ—Ä–Ω—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ Google –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    """
    redirect_uri = url_for('auth.google_callback', _external=True)
    return google.authorize_redirect(redirect_uri)


# üîÑ –ú–ê–†–®–†–£–¢ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Google
@auth_bp.route('/google/callback')
def google_callback():
    """
    Google –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—é–¥–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –æ—Ç Google
        token = google.authorize_access_token()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = token.get('userinfo')
        
        if not user_info:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç Google")
            return redirect(url_for('login'))
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        google_id = user_info.get('sub')
        email = user_info.get('email')
        name = user_info.get('name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à—ë–ª —á–µ—Ä–µ–∑ Google: {email}")
        
        # üîß –°–ò–ù–•–†–û–ù–ù–û–ï –†–ï–®–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º psycopg2 –Ω–∞–ø—Ä—è–º—É—é
        user = find_or_create_web_user_sync(google_id, email, name)
        
        if user:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id –≤ —Å–µ—Å—Å–∏–∏
            session['user_id'] = user['user_id']
            session['email'] = email
            session['name'] = name
            session['google_id'] = google_id
            
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: user_id={user['user_id']}")
            
            return redirect(url_for('dashboard.dashboard'))
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return redirect(url_for('login'))
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ —á–µ—Ä–µ–∑ Google: {e}")
        import traceback
        traceback.print_exc()
        return redirect(url_for('login'))


# üîß –°–ò–ù–•–†–û–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def find_or_create_web_user_sync(google_id: str, email: str, name: str):
    """
    –°–ò–ù–•–†–û–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è Flask
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç psycopg2 –≤–º–µ—Å—Ç–æ asyncpg
    """
    import psycopg2
    import os
    from urllib.parse import urlparse, urlunparse
    
    database_url = os.getenv('DATABASE_URL')
    
    # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º asyncpg-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL
    # psycopg2 –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç pool_timeout, pool_max_size –∏ —Ç.–¥.
    parsed = urlparse(database_url)
    
    # –£–±–∏—Ä–∞–µ–º query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–æ–Ω–∏ –¥–ª—è asyncpg)
    clean_url = urlunparse((
        parsed.scheme,
        parsed.netloc,
        parsed.path,
        '',  # params
        '',  # query ‚Üê —É–±–∏—Ä–∞–µ–º —ç—Ç–æ
        ''   # fragment
    ))
    
    try:
        conn = psycopg2.connect(clean_url)
        cursor = conn.cursor()
        
        # 1. –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute(
            "SELECT user_id, name, email FROM users WHERE google_id = %s",
            (google_id,)
        )
        
        user = cursor.fetchone()
        
        if user:
            print(f"üìç –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {email}")
            cursor.close()
            conn.close()
            return {
                'user_id': user[0],
                'name': user[1],
                'email': user[2]
            }
        
        # 2. –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print(f"üÜï –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –≤–µ–±-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {email}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID
        cursor.execute("SELECT generate_temp_web_user_id()")
        temp_user_id = cursor.fetchone()[0]
        
        # –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("""
            INSERT INTO users (user_id, name, google_id, email, registration_source, created_at)
            VALUES (%s, %s, %s, %s, 'web', NOW())
            ON CONFLICT (user_id) DO NOTHING
        """, (temp_user_id, name, google_id, email))
        
        # –°–æ–∑–¥–∞—ë–º –ª–∏–º–∏—Ç—ã
        cursor.execute("""
            INSERT INTO user_limits (user_id, documents_left, gpt4o_queries_left, subscription_type)
            VALUES (%s, 2, 10, 'free')
            ON CONFLICT (user_id) DO NOTHING
        """, (temp_user_id,))
        
        conn.commit()
        
        print(f"‚úÖ –í–µ–±-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: user_id={temp_user_id}")
        
        cursor.close()
        conn.close()
        
        return {
            'user_id': temp_user_id,
            'name': name,
            'email': email
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        import traceback
        traceback.print_exc()
        return None


# üîß –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø OAUTH –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
def init_oauth(app):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç OAuth —Å Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
    
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ app.py –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ blueprint
    """
    oauth.init_app(app)