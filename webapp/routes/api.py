# webapp/routes/api.py
# üîå API endpoints –¥–ª—è —á–∞—Ç–∞ —Å –ò–ò - FASTAPI –í–ï–†–°–ò–Ø
# ‚úÖ –ü–û–õ–ù–û–°–¢–¨–Æ ASYNC - –∫–æ–ø–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –ø—Ä—è–º–æ –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞!

import os
import sys
from fastapi import APIRouter, Request, Depends, UploadFile, File, Form
from fastapi.responses import JSONResponse
from pydantic import BaseModel

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from webapp.config import Config

# ==========================================
# ‚úÖ –ò–ú–ü–û–†–¢–´ –ò–ó –ë–î (async —Ñ—É–Ω–∫—Ü–∏–∏!)
# ==========================================
from db_postgresql import (
    save_message,           # ‚úÖ async
    get_user_language,      # ‚úÖ async
    get_user_profile,       # ‚úÖ async
    get_db_connection,      # ‚úÖ async
    release_db_connection   # ‚úÖ async
)

# ‚úÖ –ò–º–ø–æ—Ä—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤–µ–±–∞
from webapp.utils.text_formatter import format_for_web

# ==========================================
# ‚úÖ –ò–ú–ü–û–†–¢–´ –§–£–ù–ö–¶–ò–ô –ë–û–¢–ê
# ==========================================
try:
    from gpt import ask_doctor
    GPT_AVAILABLE = True
    print("‚úÖ gpt.py –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    
    from prompt_logger import process_user_question_detailed
    CONTEXT_PROCESSOR_AVAILABLE = True
    print("‚úÖ process_user_question_detailed –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    
    from subscription_manager import check_gpt4o_limit, spend_gpt4o_limit
    LIMITS_AVAILABLE = True
    print("‚úÖ subscription_manager –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    
except ImportError as e:
    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    GPT_AVAILABLE = False
    CONTEXT_PROCESSOR_AVAILABLE = False
    LIMITS_AVAILABLE = False

# üìò –°–û–ó–î–ê–Å–ú ROUTER (–∞–Ω–∞–ª–æ–≥ Blueprint)
router = APIRouter()


# ==========================================
# üìã PYDANTIC MODELS (–¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏)
# ==========================================

class ChatMessage(BaseModel):
    """–ú–æ–¥–µ–ª—å –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç"""
    message: str


# ==========================================
# üîí DEPENDENCY: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
# ==========================================

async def get_current_user(request: Request) -> int:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
    (–∞–Ω–∞–ª–æ–≥ @api_login_required –≤ Flask)
    """
    user_id = request.session.get('user_id')
    if not user_id:
        return JSONResponse(
            status_code=401,
            content={
                'success': False,
                'error': '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.'
            }
        )
    return user_id


# ==========================================
# üí¨ –ì–õ–ê–í–ù–´–ô –ú–ê–†–®–†–£–¢: –ß–ê–¢ –° –ò–ò
# ==========================================

@router.post("/chat")
async def chat_message(
    chat_data: ChatMessage,
    request: Request,
    user_id: int = Depends(get_current_user)
):
    """
    üéØ –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø - –ë–ï–ó –ö–û–°–¢–´–õ–ï–ô!
    
    ‚úÖ –°–ú–û–¢–†–ò: –ü–†–û–°–¢–û –ö–û–ü–ò–†–£–ï–ú –õ–û–ì–ò–ö–£ –ò–ó main.py (—Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç)
    ‚úÖ –ë–ï–ó loop.run_until_complete - –ü–†–û–°–¢–û AWAIT!
    
    ==========================================
    üìù –ê–õ–ì–û–†–ò–¢–ú (–∫–∞–∫ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–µ):
    ==========================================
    
    –®–ê–ì 1: –í–∞–ª–∏–¥–∞—Ü–∏—è
    –®–ê–ì 2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –®–ê–ì 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
    –®–ê–ì 4: –°–±–æ—Ä –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    –®–ê–ì 5: –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
    –®–ê–ì 6: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
    –®–ê–ì 7: –°–ø–∏—Å–∞–Ω–∏–µ –ª–∏–º–∏—Ç–∞
    –®–ê–ì 8: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    """
    
    try:
        # ==========================================
        # –®–ê–ì 1: –í–ê–õ–ò–î–ê–¶–ò–Ø
        # ==========================================
        
        if not GPT_AVAILABLE:
            return JSONResponse(
                status_code=503,
                content={
                    'success': False,
                    'error': '–§—É–Ω–∫—Ü–∏—è —á–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
                }
            )
        
        user_message = chat_data.message.strip()
        
        if not user_message:
            return JSONResponse(
                status_code=400,
                content={
                    'success': False,
                    'error': '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'
                }
            )
        
        if len(user_message) > 4000:
            return JSONResponse(
                status_code=400,
                content={
                    'success': False,
                    'error': '–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤)'
                }
            )
        
        print(f"üí¨ [WEB] –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç user_id={user_id}, –¥–ª–∏–Ω–∞={len(user_message)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # ==========================================
        # –®–ê–ì 2: –°–û–•–†–ê–ù–Ø–ï–ú –°–û–û–ë–©–ï–ù–ò–ï
        # ==========================================
        print(f"üìù [–®–ê–ì 2] –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        
        # ‚úÖ –ü–†–û–°–¢–û AWAIT! –ù–ï–¢ –ö–û–°–¢–´–õ–ï–ô!
        await save_message(user_id, 'user', user_message)
        
        print(f"‚úÖ [–®–ê–ì 2] –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        
        # ==========================================
        # –®–ê–ì 3: –ü–†–û–í–ï–†–Ø–ï–ú –õ–ò–ú–ò–¢–´
        # ==========================================
        print(f"üîç [–®–ê–ì 3] –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã...")
        
        has_premium_limits = False
        if LIMITS_AVAILABLE:
            # ‚úÖ –ü–†–û–°–¢–û AWAIT!
            has_premium_limits = await check_gpt4o_limit(user_id)
            print(f"‚úÖ [–®–ê–ì 3] –õ–∏–º–∏—Ç—ã: {'–ï–°–¢–¨' if has_premium_limits else '–ù–ï–¢'}")
        else:
            print(f"‚ö†Ô∏è [–®–ê–ì 3] –ú–æ–¥—É–ª—å –ª–∏–º–∏—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # ==========================================
        # –®–ê–ì 4: –°–û–ë–ò–†–ê–ï–ú –ö–û–ù–¢–ï–ö–°–¢
        # ==========================================
        print(f"üß† [–®–ê–ì 4] –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç...")
        
        context_text = ""
        
        if CONTEXT_PROCESSOR_AVAILABLE:
            # ‚úÖ –ü–†–û–°–¢–û AWAIT! –ò—Å–ø–æ–ª—å–∑—É–µ–º –¢–£ –ñ–ï —Ñ—É–Ω–∫—Ü–∏—é —á—Ç–æ –≤ –±–æ—Ç–µ!
            lang = await get_user_language(user_id)
            
            prompt_data = await process_user_question_detailed(
                user_id=user_id,
                user_input=user_message
            )
            
            context_text = prompt_data.get('context_text', '')
            print(f"‚úÖ [–®–ê–ì 4] –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–±—Ä–∞–Ω: {len(context_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            
        else:
            # Fallback: —Ö–æ—Ç—è –±—ã –ø—Ä–æ—Ñ–∏–ª—å
            print(f"‚ö†Ô∏è [–®–ê–ì 4] –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç")
            
            # ‚úÖ –ü–†–û–°–¢–û AWAIT!
            profile = await get_user_profile(user_id)
            
            if profile:
                try:
                    from save_utils import format_user_profile
                    # ‚úÖ –ü–†–û–°–¢–û AWAIT!
                    profile_text = await format_user_profile(user_id)
                    context_text = f"üìå –ü—Ä–æ—Ñ–∏–ª—å:\n{profile_text}\n\n–í–æ–ø—Ä–æ—Å: {user_message}"
                except:
                    context_text = f"–í–æ–ø—Ä–æ—Å –ø–∞—Ü–∏–µ–Ω—Ç–∞: {user_message}"
            else:
                context_text = f"–í–æ–ø—Ä–æ—Å –ø–∞—Ü–∏–µ–Ω—Ç–∞: {user_message}"
        
        # ==========================================
        # –®–ê–ì 5: –í–´–ë–ò–†–ê–ï–ú –ú–û–î–ï–õ–¨
        # ==========================================
        print(f"ü§ñ [–®–ê–ì 5] –í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å...")
        
        if has_premium_limits:
            use_gemini = True
            model_name = "GPT-5 (–¥–µ—Ç–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è)"
            print(f"‚úÖ [–®–ê–ì 5] –ú–æ–¥–µ–ª—å: GPT-5")
        else:
            use_gemini = False
            model_name = "GPT-4o-mini (–±–∞–∑–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è)"
            print(f"‚úÖ [–®–ê–ì 5] –ú–æ–¥–µ–ª—å: GPT-4o-mini")
        
        # ==========================================
        # –®–ê–ì 6: –ì–ï–ù–ï–†–ò–†–£–ï–ú –û–¢–í–ï–¢
        # ==========================================
        print(f"üß† [–®–ê–ì 6] –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç...")
        
        # ‚úÖ –ü–†–û–°–¢–û AWAIT!
        lang = await get_user_language(user_id)
        
        # ‚úÖ –ü–†–û–°–¢–û AWAIT! –ò—Å–ø–æ–ª—å–∑—É–µ–º –¢–£ –ñ–ï —Ñ—É–Ω–∫—Ü–∏—é —á—Ç–æ –≤ –±–æ—Ç–µ!
        ai_response = await ask_doctor(
            context_text=context_text,
            user_question=user_message,
            lang=lang,
            user_id=user_id,
            use_gemini=use_gemini
        )
        
        print(f"‚úÖ [–®–ê–ì 6] –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {len(ai_response)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è –≤–µ–±–∞
        formatted_response = format_for_web(ai_response)
        
        # ==========================================
        # –®–ê–ì 7: –°–ü–ò–°–´–í–ê–ï–ú –õ–ò–ú–ò–¢
        # ==========================================
        if has_premium_limits and LIMITS_AVAILABLE:
            print(f"üí≥ [–®–ê–ì 7] –°–ø–∏—Å—ã–≤–∞–µ–º –ª–∏–º–∏—Ç...")
            
            # ‚úÖ –ü–†–û–°–¢–û AWAIT!
            success = await spend_gpt4o_limit(user_id, message=None, bot=None)
            
            if success:
                print(f"‚úÖ [–®–ê–ì 7] –õ–∏–º–∏—Ç —Å–ø–∏—Å–∞–Ω")
            else:
                print(f"‚ö†Ô∏è [–®–ê–ì 7] –û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è")
        else:
            print(f"‚è≠Ô∏è [–®–ê–ì 7] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º")
        
        # ==========================================
        # –®–ê–ì 8: –°–û–•–†–ê–ù–Ø–ï–ú –û–¢–í–ï–¢
        # ==========================================
        print(f"üíæ [–®–ê–ì 8] –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç...")
        
        # ‚úÖ –ü–†–û–°–¢–û AWAIT!
        await save_message(user_id, 'assistant', ai_response)
        
        print(f"‚úÖ [–®–ê–ì 8] –ì–æ—Ç–æ–≤–æ!")
        print(f"üéâ –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
        return {
            'success': True,
            'response': formatted_response,
            'user_message': user_message,
            'model_used': model_name,
            'had_limits': has_premium_limits
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ /api/chat: {e}")
        import traceback
        traceback.print_exc()
        
        return JSONResponse(
            status_code=500,
            content={
                'success': False,
                'error': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è'
            }
        )


@router.post("/upload")
async def upload_document(
    request: Request,
    file: UploadFile = File(...),
    title: str = Form(None),
    user_id: int = Depends(get_current_user)
):
    """
    üì§ –ó–ê–ì–†–£–ó–ö–ê –ò –û–ë–†–ê–ë–û–¢–ö–ê –î–û–ö–£–ú–ï–ù–¢–ê (–í–ê–†–ò–ê–ù–¢ 1 - –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã–π)
    
    –ö–æ–ø–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ upload.py (Telegram –±–æ—Ç–∞)
    """
    
    # ‚úÖ –°–ù–ê–ß–ê–õ–ê –ø–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    lang = await get_user_language(user_id)
    
    try:
        if not file.filename:
            from db_postgresql import t
            return JSONResponse(
                status_code=400,
                content={'success': False, 'error': t('file_not_selected', lang)}
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
        filename = file.filename
        file_ext = filename.rsplit('.', 1)[-1].lower() if '.' in filename else ''
        
        if file_ext not in Config.ALLOWED_EXTENSIONS:
            from db_postgresql import t
            return JSONResponse(
                status_code=400,
                content={
                    'success': False,
                    'error': t('unsupported_file_type', lang)
                }
            )
        
        print(f"üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ—Ç user_id={user_id}: {filename}")
        
        # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
        temp_dir = f"temp_{user_id}"
        os.makedirs(temp_dir, exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –í–†–ï–ú–ï–ù–ù–û
        local_file = os.path.join(temp_dir, filename)
        
        # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        content = await file.read()
        with open(local_file, 'wb') as f:
            f.write(content)
        
        print(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ: {local_file}")
        
        # ===================================================
        # üîß –ö–û–ü–ò–†–£–ï–ú –õ–û–ì–ò–ö–£ –ò–ó upload.py (TELEGRAM –ë–û–¢–ê)
        # ===================================================
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –±–æ—Ç–∞
        from save_utils import send_to_gpt_vision, convert_pdf_to_images
        from gpt import (
            ask_structured, 
            is_medical_text, 
            generate_medical_summary, 
            generate_title_from_text
        )
        from db_postgresql import save_document, t
        from vector_db_postgresql import split_into_chunks, add_chunks_to_vector_db
        from file_storage import get_file_storage
        
        file_type = "pdf" if file_ext == "pdf" else "image"
        vision_text = ""
        
        # STEP 1: –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
        if file_ext == 'pdf':
            try:
                image_paths = convert_pdf_to_images(local_file, f"{temp_dir}/pages")
                
                if not image_paths:
                    return JSONResponse(
                        status_code=400,
                        content={'success': False, 'error': t('pdf_read_failed', lang)}
                    )
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 —Å—Ç—Ä–∞–Ω–∏—Ü
                if len(image_paths) > 5:
                    print(f"‚ö†Ô∏è PDF —Å–æ–¥–µ—Ä–∂–∏—Ç {len(image_paths)} —Å—Ç—Ä–∞–Ω–∏—Ü, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5")
                    image_paths = image_paths[:5]
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                for img_path in image_paths:
                    try:
                        page_text, _ = await send_to_gpt_vision(img_path, lang)
                        if page_text:
                            vision_text += page_text + "\n\n"
                    except Exception as page_error:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page_error}")
                        continue
                
                vision_text = vision_text.strip()
                
                if not vision_text:
                    return JSONResponse(
                        status_code=400,
                        content={'success': False, 'error': t('pdf_read_failed', lang)}
                    )
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF: {e}")
                import traceback
                traceback.print_exc()
                return JSONResponse(
                    status_code=400,
                    content={'success': False, 'error': t('pdf_processing_error', lang)}
                )
        
        elif file_ext in ['jpg', 'jpeg', 'png', 'webp']:
            # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ‚Üí –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ Vision API
            try:
                vision_text, _ = await send_to_gpt_vision(local_file, lang)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                return JSONResponse(
                    status_code=400,
                    content={'success': False, 'error': t('image_analysis_error', lang)}
                )
        
        else:
            # –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª ‚Üí —á–∏—Ç–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é
            try:
                with open(local_file, 'r', encoding='utf-8') as f:
                    vision_text = f.read()
            except UnicodeDecodeError:
                try:
                    with open(local_file, 'r', encoding='cp1251') as f:
                        vision_text = f.read()
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
                    return JSONResponse(
                        status_code=400,
                        content={'success': False, 'error': t('file_read_error', lang)}
                    )
        
        # STEP 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –¥–æ–∫—É–º–µ–Ω—Ç
        if not await is_medical_text(vision_text):
            return JSONResponse(
                status_code=400,
                content={'success': False, 'error': t('not_medical_doc', lang)}
            )
        
        # STEP 3: üéØ –ì–õ–ê–í–ù–û–ï! –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if title and title.strip():
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª –Ω–∞–∑–≤–∞–Ω–∏–µ
            auto_title = title.strip()
            print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {auto_title}")
        else:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ GPT
            auto_title = await generate_title_from_text(text=vision_text[:1500], lang=lang)
            print(f"ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫: {auto_title}")
        
        # STEP 4: –°–æ–∑–¥–∞—ë–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ —Ä–µ–∑—é–º–µ
        raw_text = await ask_structured(vision_text[:8000], lang=lang)
        summary = await generate_medical_summary(vision_text[:8000], lang)
        
        # STEP 5: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        storage = get_file_storage()
        success, permanent_path = storage.save_file(
            user_id=user_id,
            filename=filename,
            source_path=local_file
        )
        
        if not success:
            return JSONResponse(
                status_code=500,
                content={'success': False, 'error': t('file_storage_error', lang)}
            )
        
        print(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –ø–æ—Å—Ç–æ—è–Ω–Ω–æ: {permanent_path}")
        
        # STEP 6: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        document_id = await save_document(
            user_id=user_id,
            title=auto_title,
            file_path=permanent_path,
            file_type=file_type,
            raw_text=raw_text,
            summary=summary
        )
        
        print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î: document_id={document_id}")
        
        # STEP 7: –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É
        chunks = await split_into_chunks(summary, document_id, user_id)
        await add_chunks_to_vector_db(document_id, user_id, chunks)
        
        print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É")
        
        # STEP 8: –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        try:
            if os.path.exists(local_file):
                os.remove(local_file)
            # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É pages –µ—Å–ª–∏ –µ—Å—Ç—å
            pages_dir = f"{temp_dir}/pages"
            if os.path.exists(pages_dir):
                import shutil
                shutil.rmtree(pages_dir)
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –µ—Å–ª–∏ –ø—É—Å—Ç–∞—è
            if os.path.exists(temp_dir) and not os.listdir(temp_dir):
                os.rmdir(temp_dir)
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {e}")
        
        # ‚úÖ –£–°–ü–ï–•! (—Å –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º)
        print(f"üéâ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
        
        return {
            'success': True,
            'document_id': document_id,
            'title': auto_title,
            'summary': summary[:200] + '...' if len(summary) > 200 else summary,  # –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ
            'message': t('document_uploaded_successfully', lang, title=auto_title)
        }
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        import traceback
        traceback.print_exc()
        
        return JSONResponse(
            status_code=500,
            content={'success': False, 'error': t('document_processing_error', lang) if 'lang' in locals() else 'Error processing document'}
        )


# ==========================================
# üóëÔ∏è –£–î–ê–õ–ï–ù–ò–ï –î–û–ö–£–ú–ï–ù–¢–ê
# ==========================================

@router.delete("/delete-document/{document_id}")
async def delete_document(
    document_id: int,
    request: Request,
    user_id: int = Depends(get_current_user)
):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    
    ‚úÖ –ë–ï–ó –ö–û–°–¢–´–õ–ï–ô! –ü—Ä–æ—Å—Ç–æ await!
    """
    try:
        # ‚úÖ –ü–†–û–°–¢–û AWAIT!
        conn = await get_db_connection()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            doc = await conn.fetchrow(
                "SELECT * FROM documents WHERE id = $1 AND user_id = $2",
                document_id, user_id
            )
            
            if not doc:
                return JSONResponse(
                    status_code=404,
                    content={'success': False, 'error': '–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'}
                )
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å –¥–∏—Å–∫–∞
            if doc['file_path'] and os.path.exists(doc['file_path']):
                os.remove(doc['file_path'])
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
            await conn.execute("DELETE FROM documents WHERE id = $1", document_id)
            
        finally:
            await release_db_connection(conn)
        
        print(f"üóëÔ∏è –î–æ–∫—É–º–µ–Ω—Ç —É–¥–∞–ª—ë–Ω: document_id={document_id}")
        
        return {
            'success': True,
            'message': '–î–æ–∫—É–º–µ–Ω—Ç —É–¥–∞–ª—ë–Ω'
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        return JSONResponse(
            status_code=500,
            content={'success': False, 'error': '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è'}
        )