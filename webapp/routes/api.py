# webapp/routes/api.py
# üîå API endpoints –¥–ª—è —á–∞—Ç–∞ —Å –ò–ò - –ü–û–õ–ù–´–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ –ö–ê–ö –í –¢–ï–õ–ï–ì–†–ê–ú-–ë–û–¢–ï
# ‚úÖ –í–°–ï –ò–ú–ü–û–†–¢–´ –ü–†–û–í–ï–†–ï–ù–´ –ò –°–û–û–¢–í–ï–¢–°–¢–í–£–Æ–¢ –ë–û–¢–£

import os
import sys
import asyncio
from flask import Blueprint, request, jsonify, session
from werkzeug.utils import secure_filename

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from webapp.config import Config

# ==========================================
# ‚úÖ –ò–ú–ü–û–†–¢–´ –ò–ó –ë–î (–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –≤ db_postgresql.py)
# ==========================================
from db_postgresql import (
    save_message,           # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ chat_history
    get_user_language,      # –ü–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    get_user_profile,       # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    get_db_connection,      # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    release_db_connection   # –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
)

# ==========================================
# ‚úÖ –ò–ú–ü–û–†–¢–´ –§–£–ù–ö–¶–ò–ô –ë–û–¢–ê (–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã)
# ==========================================
try:
    # ‚úÖ 1. –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ò–ò (–∏–∑ gpt.py)
    from gpt import ask_doctor
    GPT_AVAILABLE = True
    print("‚úÖ gpt.py –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    
    # ‚úÖ 2. –§—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–∏–∑ prompt_logger.py)
    from prompt_logger import process_user_question_detailed
    CONTEXT_PROCESSOR_AVAILABLE = True
    print("‚úÖ process_user_question_detailed –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    
    # ‚úÖ 3. –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å–ø–∏—Å–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ (–∏–∑ subscription_manager.py)
    from subscription_manager import check_gpt4o_limit, spend_gpt4o_limit
    LIMITS_AVAILABLE = True
    print("‚úÖ subscription_manager –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    
except ImportError as e:
    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    GPT_AVAILABLE = False
    CONTEXT_PROCESSOR_AVAILABLE = False
    LIMITS_AVAILABLE = False

# üìò –°–û–ó–î–ê–Å–ú BLUEPRINT
api_bp = Blueprint('api', __name__)


# üîí –î–ï–ö–û–†–ê–¢–û–†: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
def api_login_required(f):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"""
    from functools import wraps
    
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'user_id' not in session:
            return jsonify({
                'success': False,
                'error': '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.'
            }), 401
        return f(*args, **kwargs)
    return decorated_function


# ==========================================
# üí¨ –ì–õ–ê–í–ù–´–ô –ú–ê–†–®–†–£–¢: –ß–ê–¢ –° –ò–ò
# ==========================================
@api_bp.route('/chat', methods=['POST'])
@api_login_required
def chat_message():
    """
    üéØ –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø - –ü–û–õ–ù–´–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ –ö–ê–ö –í –¢–ï–õ–ï–ì–†–ê–ú-–ë–û–¢–ï
    
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç JSON: {"message": "–£ –º–µ–Ω—è –±–æ–ª–∏—Ç –≥–æ–ª–æ–≤–∞"}
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON: {"success": true, "response": "...", "model_used": "GPT-5"}
    
    ==========================================
    üìù –ü–û–®–ê–ì–û–í–´–ô –ê–õ–ì–û–†–ò–¢–ú (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ main.py):
    ==========================================
    
    –®–ê–ì 1: –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞
    –®–ê–ì 2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –®–ê–ì 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ (–µ—Å—Ç—å –ª–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏?)
    –®–ê–ì 4: –°–±–æ—Ä –ü–û–õ–ù–û–ì–û –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ process_user_question_detailed
    –®–ê–ì 5: –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ (GPT-5 –∏–ª–∏ GPT-4o-mini)
    –®–ê–ì 6: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ ask_doctor
    –®–ê–ì 7: –°–ø–∏—Å–∞–Ω–∏–µ –ª–∏–º–∏—Ç–∞ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ GPT-5)
    –®–ê–ì 8: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    
    try:
        # ==========================================
        # –®–ê–ì 1: –í–ê–õ–ò–î–ê–¶–ò–Ø –ò –ü–û–î–ì–û–¢–û–í–ö–ê
        # ==========================================
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
        if not GPT_AVAILABLE:
            return jsonify({
                'success': False,
                'error': '–§—É–Ω–∫—Ü–∏—è —á–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
            }), 503
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        data = request.get_json()
        user_message = data.get('message', '').strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        if not user_message:
            return jsonify({
                'success': False,
                'error': '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'
            }), 400
        
        if len(user_message) > 4000:
            return jsonify({
                'success': False,
                'error': '–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤)'
            }), 400
        
        user_id = session.get('user_id')
        
        # –õ–æ–≥–∏—Ä—É–µ–º (–ë–ï–ó –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö - —Ç–æ–ª—å–∫–æ user_id!)
        print(f"üí¨ [WEB] –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç user_id={user_id}, –¥–ª–∏–Ω–∞={len(user_message)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # ==========================================
        # üîß –ù–ê–°–¢–†–û–ô–ö–ê EVENT LOOP (–¥–ª—è async —Ñ—É–Ω–∫—Ü–∏–π)
        # ==========================================
        from flask import current_app
        loop = current_app.extensions.get('loop')
        
        if not loop:
            try:
                loop = asyncio.get_event_loop()
            except RuntimeError:
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
        
        # ==========================================
        # –®–ê–ì 2: –°–û–•–†–ê–ù–Ø–ï–ú –°–û–û–ë–©–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
        # ==========================================
        print(f"üìù [–®–ê–ì 2] –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        
        loop.run_until_complete(
            save_message(user_id, 'user', user_message)
        )
        
        print(f"‚úÖ [–®–ê–ì 2] –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ chat_history")
        
        # ==========================================
        # –®–ê–ì 3: –ü–†–û–í–ï–†–Ø–ï–ú –õ–ò–ú–ò–¢–´ (–∫–∞–∫ –≤ –±–æ—Ç–µ!)
        # ==========================================
        print(f"üîç [–®–ê–ì 3] –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π...")
        
        has_premium_limits = False
        if LIMITS_AVAILABLE:
            has_premium_limits = loop.run_until_complete(
                check_gpt4o_limit(user_id)
            )
            print(f"‚úÖ [–®–ê–ì 3] –õ–∏–º–∏—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã: {'–ï–°–¢–¨ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏' if has_premium_limits else '–ù–ï–¢ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π'}")
        else:
            print(f"‚ö†Ô∏è [–®–ê–ì 3] –ú–æ–¥—É–ª—å –ª–∏–º–∏—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –º–æ–¥–µ–ª—å")
        
        # ==========================================
        # –®–ê–ì 4: –°–û–ë–ò–†–ê–ï–ú –ü–û–õ–ù–´–ô –ö–û–ù–¢–ï–ö–°–¢
        # ==========================================
        print(f"üß† [–®–ê–ì 4] –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ process_user_question_detailed...")
        
        context_text = ""
        
        if CONTEXT_PROCESSOR_AVAILABLE:
            # üéØ –≠–¢–û –ö–õ–Æ–ß–ï–í–û–ô –ú–û–ú–ï–ù–¢!
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¢–£ –ñ–ï —Ñ—É–Ω–∫—Ü–∏—é —á—Ç–æ –∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–µ
            # –û–Ω–∞ —Å–æ–±–µ—Ä—ë—Ç: –ø—Ä–æ—Ñ–∏–ª—å + –¥–æ–∫—É–º–µ–Ω—Ç—ã + –∏—Å—Ç–æ—Ä–∏—é + —Å–≤–æ–¥–∫—É + –∑–∞–º–µ—Ç–∫–∏
            
            lang = loop.run_until_complete(get_user_language(user_id))
            
            prompt_data = loop.run_until_complete(
                process_user_question_detailed(
                    user_id=user_id,
                    user_input=user_message
                )
            )
            
            # prompt_data —Å–æ–¥–µ—Ä–∂–∏—Ç:
            # - context_text: –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–≤—Å—ë —á—Ç–æ –Ω—É–∂–Ω–æ –ò–ò)
            # - profile_text: –ø—Ä–æ—Ñ–∏–ª—å
            # - summary_text: —Å–≤–æ–¥–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
            # - chunks_text: —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
            # - medical_timeline: –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∫–∞—Ä—Ç–∞
            # –∏ —Ç.–¥.
            
            context_text = prompt_data.get('context_text', '')
            print(f"‚úÖ [–®–ê–ì 4] –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–±—Ä–∞–Ω: {len(context_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"üìä [–®–ê–ì 4] –î–µ—Ç–∞–ª–∏: –ø—Ä–æ—Ñ–∏–ª—å={len(prompt_data.get('profile_text', ''))}, –¥–æ–∫—É–º–µ–Ω—Ç—ã={prompt_data.get('chunks_found', 0)} —á–∞–Ω–∫–æ–≤")
            
        else:
            # Fallback: –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, —Å–æ–±–∏—Ä–∞–µ–º —Ö–æ—Ç—è –±—ã –ø—Ä–æ—Ñ–∏–ª—å
            print(f"‚ö†Ô∏è [–®–ê–ì 4] process_user_question_detailed –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç")
            
            profile = loop.run_until_complete(get_user_profile(user_id))
            
            if profile:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
                from save_utils import format_user_profile
                profile_text = loop.run_until_complete(format_user_profile(user_id))
                context_text = f"üìå –ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ü–∏–µ–Ω—Ç–∞:\n{profile_text}\n\n–í–æ–ø—Ä–æ—Å –ø–∞—Ü–∏–µ–Ω—Ç–∞: {user_message}"
            else:
                context_text = f"üìå –ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ü–∏–µ–Ω—Ç–∞: –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω\n\n–í–æ–ø—Ä–æ—Å –ø–∞—Ü–∏–µ–Ω—Ç–∞: {user_message}"
        
        # ==========================================
        # –®–ê–ì 5: –í–´–ë–ò–†–ê–ï–ú –ú–û–î–ï–õ–¨ (–∫–∞–∫ –≤ –±–æ—Ç–µ!)
        # ==========================================
        print(f"ü§ñ [–®–ê–ì 5] –í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å –ò–ò...")
        
        if has_premium_limits:
            use_gemini = True  # GPT-5 (–¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã)
            model_name = "GPT-5 (–¥–µ—Ç–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è)"
            print(f"‚úÖ [–®–ê–ì 5] –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: GPT-5 (—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ª–∏–º–∏—Ç—ã)")
        else:
            use_gemini = False  # GPT-4o-mini (–±–∞–∑–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã)
            model_name = "GPT-4o-mini (–±–∞–∑–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è)"
            print(f"‚úÖ [–®–ê–ì 5] –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: GPT-4o-mini (–Ω–µ—Ç –ª–∏–º–∏—Ç–æ–≤)")
        
        # ==========================================
        # –®–ê–ì 6: –ì–ï–ù–ï–†–ò–†–£–ï–ú –û–¢–í–ï–¢ (–∫–∞–∫ –≤ –±–æ—Ç–µ!)
        # ==========================================
        print(f"üß† [–®–ê–ì 6] –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ ask_doctor...")
        
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lang = loop.run_until_complete(get_user_language(user_id))
        
        # üéØ –í–´–ó–´–í–ê–ï–ú ask_doctor –° –ü–û–õ–ù–´–ú –ö–û–ù–¢–ï–ö–°–¢–û–ú
        # –¢–æ—á–Ω–æ —Ç–∞–∫ –∂–µ –∫–∞–∫ –≤ main.py!
        ai_response = loop.run_until_complete(
            ask_doctor(
                context_text=context_text,      # –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
                user_question=user_message,     # –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                lang=lang,                      # –Ø–∑—ã–∫
                user_id=user_id,                # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                use_gemini=use_gemini          # –ö–∞–∫—É—é –º–æ–¥–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
            )
        )
        
        print(f"‚úÖ [–®–ê–ì 6] –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {len(ai_response)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # ==========================================
        # –®–ê–ì 7: –°–ü–ò–°–´–í–ê–ï–ú –õ–ò–ú–ò–¢ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ GPT-5)
        # ==========================================
        if has_premium_limits and LIMITS_AVAILABLE:
            print(f"üí≥ [–®–ê–ì 7] –°–ø–∏—Å—ã–≤–∞–µ–º 1 –¥–µ—Ç–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é...")
            
            # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ subscription_manager
            # spend_gpt4o_limit –ø—Ä–∏–Ω–∏–º–∞–µ—Ç: user_id, message, bot
            # –î–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏ message –∏ bot –±—É–¥—É—Ç None
            success = loop.run_until_complete(
                spend_gpt4o_limit(user_id, message=None, bot=None)
            )
            
            if success:
                print(f"‚úÖ [–®–ê–ì 7] –õ–∏–º–∏—Ç —Å–ø–∏—Å–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                print(f"‚ö†Ô∏è [–®–ê–ì 7] –û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è –ª–∏–º–∏—Ç–∞ (–Ω–æ –æ—Ç–≤–µ—Ç —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω)")
        else:
            print(f"‚è≠Ô∏è [–®–ê–ì 7] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º (–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –¥–µ—Ç–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å)")
        
        # ==========================================
        # –®–ê–ì 8: –°–û–•–†–ê–ù–Ø–ï–ú –û–¢–í–ï–¢ –ò –í–û–ó–í–†–ê–©–ê–ï–ú
        # ==========================================
        print(f"üíæ [–®–ê–ì 8] –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ò–ò...")
        
        loop.run_until_complete(
            save_message(user_id, 'assistant', ai_response)
        )
        
        print(f"‚úÖ [–®–ê–ì 8] –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ chat_history")
        print(f"üéâ –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        return jsonify({
            'success': True,
            'response': ai_response,
            'user_message': user_message,
            'model_used': model_name,  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫–∞—è –º–æ–¥–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å
            'had_limits': has_premium_limits  # –ë—ã–ª–∏ –ª–∏ –ª–∏–º–∏—Ç—ã
        })
        
    except Exception as e:
        # ==========================================
        # ‚ùå –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö
        # ==========================================
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ /api/chat: {e}")
        import traceback
        traceback.print_exc()
        
        return jsonify({
            'success': False,
            'error': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è'
        }), 500


# ==========================================
# üì§ –ó–ê–ì–†–£–ó–ö–ê –î–û–ö–£–ú–ï–ù–¢–ê
# ==========================================
@api_bp.route('/upload', methods=['POST'])
@api_login_required
def upload_document():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–ø–æ–∫–∞ —É–ø—Ä–æ—â—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    try:
        if 'file' not in request.files:
            return jsonify({'success': False, 'error': '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 400
        
        file = request.files['file']
        
        if file.filename == '':
            return jsonify({'success': False, 'error': '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'}), 400
        
        filename = secure_filename(file.filename)
        file_ext = filename.rsplit('.', 1)[-1].lower()
        
        if file_ext not in Config.ALLOWED_EXTENSIONS:
            return jsonify({
                'success': False,
                'error': f'–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: {", ".join(Config.ALLOWED_EXTENSIONS)}'
            }), 400
        
        user_id = session.get('user_id')
        title = request.form.get('title', filename)
        
        print(f"üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ—Ç user_id={user_id}: {filename}")
        
        os.makedirs(Config.UPLOAD_FOLDER, exist_ok=True)
        file_path = os.path.join(Config.UPLOAD_FOLDER, f"{user_id}_{filename}")
        file.save(file_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î (—É–ø—Ä–æ—â—ë–Ω–Ω–æ)
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        conn = loop.run_until_complete(get_db_connection())
        
        document_id = loop.run_until_complete(
            conn.fetchval("""
                INSERT INTO documents (user_id, title, file_path, file_type, uploaded_at)
                VALUES ($1, $2, $3, $4, NOW())
                RETURNING id
            """, user_id, title, file_path, file_ext)
        )
        
        loop.run_until_complete(release_db_connection(conn))
        
        print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: document_id={document_id}")
        
        return jsonify({
            'success': True,
            'document_id': document_id,
            'message': '–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω'
        })
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        return jsonify({'success': False, 'error': '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏'}), 500


# ==========================================
# üóëÔ∏è –£–î–ê–õ–ï–ù–ò–ï –î–û–ö–£–ú–ï–ù–¢–ê
# ==========================================
@api_bp.route('/delete-document/<int:document_id>', methods=['DELETE'])
@api_login_required
def delete_document(document_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    try:
        user_id = session.get('user_id')
        
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        conn = loop.run_until_complete(get_db_connection())
        
        doc = loop.run_until_complete(
            conn.fetchrow(
                "SELECT * FROM documents WHERE id = $1 AND user_id = $2",
                document_id, user_id
            )
        )
        
        if not doc:
            loop.run_until_complete(release_db_connection(conn))
            return jsonify({'success': False, 'error': '–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        if doc['file_path'] and os.path.exists(doc['file_path']):
            os.remove(doc['file_path'])
        
        loop.run_until_complete(
            conn.execute("DELETE FROM documents WHERE id = $1", document_id)
        )
        
        loop.run_until_complete(release_db_connection(conn))
        
        print(f"üóëÔ∏è –î–æ–∫—É–º–µ–Ω—Ç —É–¥–∞–ª—ë–Ω: document_id={document_id}")
        
        return jsonify({'success': True, 'message': '–î–æ–∫—É–º–µ–Ω—Ç —É–¥–∞–ª—ë–Ω'})
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        return jsonify({'success': False, 'error': '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è'}), 500