# webapp/routes/api.py
# üîå API endpoints –¥–ª—è —á–∞—Ç–∞ —Å –ò–ò –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

import os
import sys
import asyncio
from flask import Blueprint, request, jsonify, session
from werkzeug.utils import secure_filename

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from webapp.config import Config
from db_postgresql import save_message, get_user_profile  # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –±–æ—Ç–∞ (–ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–¥!)
# –§–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞, –ø–æ—ç—Ç–æ–º—É –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ sys.path
try:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    import importlib.util
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å gpt.py
    gpt_spec = importlib.util.find_spec("gpt")
    if gpt_spec:
        from gpt import ask_doctor  # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏
        GPT_AVAILABLE = True
        print("‚úÖ gpt.py –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    else:
        print("‚ö†Ô∏è gpt.py –Ω–µ –Ω–∞–π–¥–µ–Ω - —Ñ—É–Ω–∫—Ü–∏—è —á–∞—Ç–∞ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        GPT_AVAILABLE = False
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å upload.py (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)
    upload_spec = importlib.util.find_spec("upload")
    if upload_spec:
        from upload import handle_document_upload
        DOC_PROCESSOR_AVAILABLE = True
        print("‚úÖ upload.py –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    else:
        print("‚ö†Ô∏è upload.py –Ω–µ –Ω–∞–π–¥–µ–Ω - –∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        DOC_PROCESSOR_AVAILABLE = False
        
except ImportError as e:
    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    GPT_AVAILABLE = False
    DOC_PROCESSOR_AVAILABLE = False

"""
üéØ –ß–¢–û –î–ï–õ–ê–ï–¢ –≠–¢–û–¢ API:

1. /api/chat - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ò–ò –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
2. /api/upload - –∑–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
3. /api/delete-document - —É–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞

–í—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç —á–µ—Ä–µ–∑ JSON (AJAX –∑–∞–ø—Ä–æ—Å—ã –∏–∑ JavaScript)

–í–ê–ñ–ù–û: –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –±–æ—Ç–∞ (gpt.py, document_processor.py)
–ù–µ –¥—É–±–ª–∏—Ä—É–µ–º –∫–æ–¥!
"""

# üìò –°–û–ó–î–ê–Å–ú BLUEPRINT
api_bp = Blueprint('api', __name__)


# üîí –ü–†–û–í–ï–†–ö–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò –¥–ª—è API
def api_login_required(f):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è API endpoints
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON –æ—à–∏–±–∫—É –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    """
    from functools import wraps
    
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'user_id' not in session:
            return jsonify({
                'success': False,
                'error': '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.'
            }), 401
        return f(*args, **kwargs)
    return decorated_function


# üí¨ API: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
@api_bp.route('/chat', methods=['POST'])
@api_login_required
def chat_message():
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç JSON:
        {
            "message": "–£ –º–µ–Ω—è –±–æ–ª–∏—Ç –≥–æ–ª–æ–≤–∞, —á—Ç–æ –¥–µ–ª–∞—Ç—å?"
        }
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON:
        {
            "success": true,
            "response": "–û—Ç–≤–µ—Ç –æ—Ç –ò–ò...",
            "user_message": "–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        }
    
    –õ–æ–≥–∏–∫–∞:
    1. –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ –ë–î (chat_history)
    3. –í—ã–∑—ã–≤–∞–µ–º –ò–ò (—Ñ—É–Ω–∫—Ü–∏—è –∏–∑ gpt.py)
    4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ò–ò –≤ –ë–î
    5. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        data = request.get_json()
        user_message = data.get('message', '').strip()
        
        if not user_message:
            return jsonify({
                'success': False,
                'error': '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'
            }), 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPT —Ñ—É–Ω–∫—Ü–∏–∏
        if not GPT_AVAILABLE:
            return jsonify({
                'success': False,
                'error': '–§—É–Ω–∫—Ü–∏—è —á–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
            }), 503
        
        user_id = session.get('user_id')
        
        # –õ–æ–≥–∏—Ä—É–µ–º (–ë–ï–ó –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö - —Ç–æ–ª—å–∫–æ user_id)
        print(f"üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç user_id={user_id}")
        
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        # 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        loop.run_until_complete(
            save_message(user_id, 'user', user_message)
        )
        
        # 2. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        profile = loop.run_until_complete(get_user_profile(user_id))
        
        # 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ò–ò (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ gpt.py!)
        # ask_doctor - –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å GPT
        # –ù—É–∂–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: context_text, user_question, lang, user_id
        
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from db_postgresql import get_user_language
        lang = loop.run_until_complete(get_user_language(user_id))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
        context_text = f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {profile}"
        
        ai_response = loop.run_until_complete(
            ask_doctor(
                context_text=context_text,
                user_question=user_message,
                lang=lang,
                user_id=user_id,
                use_gemini=False  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π GPT
            )
        )
        
        # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ò–ò
        loop.run_until_complete(
            save_message(user_id, 'assistant', ai_response)
        )
        
        print(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω user_id={user_id}")
        
        # 5. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç
        return jsonify({
            'success': True,
            'response': ai_response,
            'user_message': user_message
        })
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ /api/chat: {e}")
        return jsonify({
            'success': False,
            'error': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è'
        }), 500


# üì§ API: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
@api_bp.route('/upload', methods=['POST'])
@api_login_required
def upload_document():
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç:
        - file: —Ñ–∞–π–ª (PDF, DOCX, TXT, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
        - title: –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON:
        {
            "success": true,
            "document_id": 123,
            "message": "–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω"
        }
    
    –õ–æ–≥–∏–∫–∞:
    1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ (—Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ)
    2. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫
    3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç (—Ñ—É–Ω–∫—Ü–∏—è –∏–∑ document_processor.py)
    4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    5. –°–æ–∑–¥–∞—ë–º –≤–µ–∫—Ç–æ—Ä–Ω—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        if not DOC_PROCESSOR_AVAILABLE:
            return jsonify({
                'success': False,
                'error': '–§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
            }), 503
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞
        if 'file' not in request.files:
            return jsonify({
                'success': False,
                'error': '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }), 400
        
        file = request.files['file']
        
        if file.filename == '':
            return jsonify({
                'success': False,
                'error': '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'
            }), 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        filename = secure_filename(file.filename)
        file_ext = filename.rsplit('.', 1)[-1].lower()
        
        if file_ext not in Config.ALLOWED_EXTENSIONS:
            return jsonify({
                'success': False,
                'error': f'–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: {", ".join(Config.ALLOWED_EXTENSIONS)}'
            }), 400
        
        user_id = session.get('user_id')
        title = request.form.get('title', filename)
        
        print(f"üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ—Ç user_id={user_id}: {filename}")
        
        # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è —Ñ–∞–π–ª–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs(Config.UPLOAD_FOLDER, exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        file_path = os.path.join(Config.UPLOAD_FOLDER, f"{user_id}_{filename}")
        file.save(file_path)
        
        print(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {file_path}")
        
        # –í–†–ï–ú–ï–ù–ù–û–ï –†–ï–®–ï–ù–ò–ï: –ü—Ä–æ—Å—Ç–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        # –ü–æ–∑–∂–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑ upload.py
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        from db_postgresql import get_db_connection, release_db_connection
        
        conn = loop.run_until_complete(get_db_connection())
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ –ë–î (—É–ø—Ä–æ—â—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        document_id = loop.run_until_complete(
            conn.fetchval("""
                INSERT INTO documents (user_id, title, file_path, file_type, uploaded_at)
                VALUES ($1, $2, $3, $4, NOW())
                RETURNING id
            """, user_id, title, file_path, file_ext)
        )
        
        loop.run_until_complete(release_db_connection(conn))
        
        print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î: document_id={document_id}")
        
        return jsonify({
            'success': True,
            'document_id': document_id,
            'message': '–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω'
        })
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        return jsonify({
            'success': False,
            'error': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞'
        }), 500


# üóëÔ∏è API: –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
@api_bp.route('/delete-document/<int:document_id>', methods=['DELETE'])
@api_login_required
def delete_document(document_id):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    
    –õ–æ–≥–∏–∫–∞:
    1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    2. –£–¥–∞–ª—è–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª
    3. –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î (–¥–æ–∫—É–º–µ–Ω—Ç –∏ –≤–µ–∫—Ç–æ—Ä—ã)
    """
    try:
        user_id = session.get('user_id')
        
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —É–¥–∞–ª–µ–Ω–∏—è
        from db_postgresql import get_db_connection, release_db_connection
        
        conn = loop.run_until_complete(get_db_connection())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        doc = loop.run_until_complete(
            conn.fetchrow(
                "SELECT * FROM documents WHERE id = $1 AND user_id = $2",
                document_id, user_id
            )
        )
        
        if not doc:
            loop.run_until_complete(release_db_connection(conn))
            return jsonify({
                'success': False,
                'error': '–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }), 404
        
        # –£–¥–∞–ª—è–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª
        if doc['file_path'] and os.path.exists(doc['file_path']):
            os.remove(doc['file_path'])
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î (–∫–∞—Å–∫–∞–¥–Ω–æ —É–¥–∞–ª—è—Ç—Å—è –≤–µ–∫—Ç–æ—Ä—ã)
        loop.run_until_complete(
            conn.execute(
                "DELETE FROM documents WHERE id = $1",
                document_id
            )
        )
        
        loop.run_until_complete(release_db_connection(conn))
        
        print(f"üóëÔ∏è –î–æ–∫—É–º–µ–Ω—Ç —É–¥–∞–ª—ë–Ω: document_id={document_id}")
        
        return jsonify({
            'success': True,
            'message': '–î–æ–∫—É–º–µ–Ω—Ç —É–¥–∞–ª—ë–Ω'
        })
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        return jsonify({
            'success': False,
            'error': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏'
        }), 500