# webapp/routes/dashboard.py
# üè† –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - FASTAPI –í–ï–†–°–ò–Ø (–ø–æ–ª–Ω–æ—Å—Ç—å—é async!)

import sys
import os
from fastapi import APIRouter, Request, Depends
from fastapi.responses import HTMLResponse, RedirectResponse
from fastapi.templating import Jinja2Templates

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

# ‚úÖ –ò–ú–ü–û–†–¢–ò–†–£–ï–ú –ì–û–¢–û–í–´–ï ASYNC –§–£–ù–ö–¶–ò–ò –∏–∑ db_postgresql.py
# –ë–ï–ó psycopg2! –ë–ï–ó –∫–æ—Å—Ç—ã–ª–µ–π!
from db_postgresql import (
    get_user_profile,           # ‚úÖ async —Ñ—É–Ω–∫—Ü–∏—è
    get_documents_by_user,      # ‚úÖ async —Ñ—É–Ω–∫—Ü–∏—è
    get_last_messages           # ‚úÖ async —Ñ—É–Ω–∫—Ü–∏—è (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç list of tuples)
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
from webapp.translations import t, get_current_language, get_supported_languages
from webapp.utils.context import get_template_context

# üìò –°–û–ó–î–ê–Å–ú ROUTER (–∞–Ω–∞–ª–æ–≥ Blueprint –≤ Flask)
router = APIRouter()

# üìÅ –ù–ê–°–¢–†–û–ô–ö–ê –®–ê–ë–õ–û–ù–û–í
templates = Jinja2Templates(directory="webapp/templates")

async def get_user_stats(user_id: int) -> dict:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ‚úÖ –ü–û–õ–ù–û–°–¢–¨–Æ ASYNC!
    """
    try:
        from db_postgresql import get_db_connection, release_db_connection
        
        conn = await get_db_connection()
        
        try:
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            total_docs = await conn.fetchval(
                "SELECT COUNT(*) FROM documents WHERE user_id = $1", 
                user_id
            )
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            total_messages = await conn.fetchval(
                "SELECT COUNT(*) FROM chat_history WHERE user_id = $1", 
                user_id
            )
            
            # –õ–∏–º–∏—Ç—ã
            limits = await conn.fetchrow(
                "SELECT documents_left, gpt4o_queries_left FROM user_limits WHERE user_id = $1",
                user_id
            )
            
            return {
                'total_documents': total_docs or 0,
                'total_messages': total_messages or 0,
                'documents_left': limits['documents_left'] if limits else 2,
                'queries_left': limits['gpt4o_queries_left'] if limits else 10
            }
        finally:
            await release_db_connection(conn)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ get_user_stats: {e}")
        return {
            'total_documents': 0,
            'total_messages': 0,
            'documents_left': 0,
            'queries_left': 0
        }


# ==========================================
# üîí DEPENDENCY: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
# ==========================================

async def get_current_user(request: Request) -> int:
    """
    Dependency –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    (–∞–Ω–∞–ª–æ–≥ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ @login_required –≤ Flask)
    
    –ß—Ç–æ –¥–µ–ª–∞–µ—Ç:
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ user_id –≤ —Å–µ—Å—Å–∏–∏
    - –ï—Å–ª–∏ –ù–ï–¢ ‚Üí —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ /login
    - –ï—Å–ª–∏ –î–ê ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç user_id
    """
    user_id = request.session.get('user_id')
    if not user_id:
        # –ï—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º
        raise RedirectResponse(url='/login', status_code=302)
    return user_id


# ==========================================
# üìç –ú–ê–†–®–†–£–¢–´ –õ–ò–ß–ù–û–ì–û –ö–ê–ë–ò–ù–ï–¢–ê
# ==========================================

@router.get("/", response_class=HTMLResponse)
async def dashboard(request: Request, user_id: int = Depends(get_current_user)):
    """
    –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
    
    ‚úÖ –°–ú–û–¢–†–ò –ö–ê–ö –ß–ò–°–¢–û! –ü—Ä–æ—Å—Ç–æ await –≤–º–µ—Å—Ç–æ –≤—Å–µ—Ö –∫–æ—Å—Ç—ã–ª–µ–π!
    """
    # ‚úÖ –ü–†–û–°–¢–û AWAIT! –ù–∏–∫–∞–∫–∏—Ö loop.run_until_complete!
    profile = await get_user_profile(user_id)
    documents = await get_documents_by_user(user_id, limit=5)
    
    # get_last_messages –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç list of tuples, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ dict
    messages_tuples = await get_last_messages(user_id, limit=10)
    chat_history = [
        {
            'role': role,
            'message': message,
            'timestamp': None  # –î–æ–±–∞–≤–∏–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        }
        for role, message in messages_tuples
    ]
    
    stats = await get_user_stats(user_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context = get_template_context(request)
    context.update({
        'user': profile,
        'documents': documents,
        'chat_history': chat_history,
        'stats': stats
    })
    
    return templates.TemplateResponse('dashboard.html', context)


@router.get("/documents", response_class=HTMLResponse)
async def documents(request: Request, user_id: int = Depends(get_current_user)):
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    ‚úÖ –ë–ï–ó –ö–û–°–¢–´–õ–ï–ô! –ü—Ä–æ—Å—Ç–æ await!
    """
    # ‚úÖ –ü–†–û–°–¢–û AWAIT!
    docs = await get_documents_by_user(user_id)
    
    context = get_template_context(request)
    context['documents'] = docs
    
    return templates.TemplateResponse('documents.html', context)


@router.get("/chat", response_class=HTMLResponse)
async def chat(request: Request, user_id: int = Depends(get_current_user)):
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ —á–∞—Ç–∞ —Å –ò–ò
    
    ‚úÖ –ë–ï–ó –ö–û–°–¢–´–õ–ï–ô! –ü—Ä–æ—Å—Ç–æ await!
    """
    # ‚úÖ –ü–†–û–°–¢–û AWAIT!
    messages_tuples = await get_last_messages(user_id, limit=50)
    profile = await get_user_profile(user_id)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —à–∞–±–ª–æ–Ω–∞
    chat_history = [
        {
            'role': role,
            'message': message,
            'timestamp': None
        }
        for role, message in messages_tuples
    ]
    
    context = get_template_context(request)
    context.update({
        'chat_history': chat_history,
        'user': profile
    })
    
    return templates.TemplateResponse('chat.html', context)


@router.get("/profile", response_class=HTMLResponse)
async def profile(request: Request, user_id: int = Depends(get_current_user)):
    """
    –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    ‚úÖ –ë–ï–ó –ö–û–°–¢–´–õ–ï–ô! –ü—Ä–æ—Å—Ç–æ await!
    """
    # ‚úÖ –ü–†–û–°–¢–û AWAIT!
    profile_data = await get_user_profile(user_id)
    
    context = get_template_context(request)
    context['user'] = profile_data
    
    return templates.TemplateResponse('profile.html', context)


# ==========================================
# üìä –ò–¢–û–ì–û: –ß–¢–û –ò–ó–ú–ï–ù–ò–õ–û–°–¨?
# ==========================================
"""
‚ùå –ë–´–õ–û (Flask + psycopg2):
- 150+ —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞ —Å psycopg2
- –ö–æ—Å—Ç—ã–ª–∏: get_clean_database_url()
- –ö–æ—Å—Ç—ã–ª–∏: cursor.execute() –≤–µ–∑–¥–µ
- –ö–æ—Å—Ç—ã–ª–∏: conn.commit(), cursor.close(), conn.close()
- 4 —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏-–¥—É–±–ª–∏–∫–∞—Ç—ã

‚úÖ –°–¢–ê–õ–û (FastAPI + asyncpg):
- ~120 —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞
- –ë–ï–ó psycopg2!
- –ü–†–û–°–¢–û await –≥–æ—Ç–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ db_postgresql.py
- –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–¥ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞!
- Dependency injection –≤–º–µ—Å—Ç–æ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤

–†–ê–ó–ù–ò–¶–ê: -30 —Å—Ç—Ä–æ–∫, 0 –∫–æ—Å—Ç—ã–ª–µ–π! üéâ
"""