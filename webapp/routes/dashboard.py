# webapp/routes/dashboard.py
# üè† –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ü–û–õ–ù–û–°–¢–¨–Æ –°–ò–ù–•–†–û–ù–ù–ê–Ø –í–ï–†–°–ò–Ø

import os
import sys
import psycopg2
from flask import Blueprint, render_template, session, redirect, url_for
from functools import wraps
from urllib.parse import urlparse, urlunparse

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

# üìò –°–û–ó–î–ê–Å–ú BLUEPRINT
dashboard_bp = Blueprint('dashboard', __name__)


# üîß –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–∏—Ç—å —á–∏—Å—Ç—ã–π DATABASE_URL
def get_clean_database_url():
    """–£–±–∏—Ä–∞–µ—Ç asyncpg –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ DATABASE_URL –¥–ª—è psycopg2"""
    database_url = os.getenv('DATABASE_URL')
    parsed = urlparse(database_url)
    return urlunparse((
        parsed.scheme,
        parsed.netloc,
        parsed.path,
        '', '', ''
    ))


# üîß –°–ò–ù–•–†–û–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
def get_user_profile_sync(user_id: int):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è get_user_profile"""
    try:
        conn = psycopg2.connect(get_clean_database_url())
        cursor = conn.cursor()
        
        cursor.execute("SELECT * FROM users WHERE user_id = %s", (user_id,))
        row = cursor.fetchone()
        
        if row:
            columns = [desc[0] for desc in cursor.description]
            result = dict(zip(columns, row))
        else:
            result = {}
        
        cursor.close()
        conn.close()
        return result
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ get_user_profile_sync: {e}")
        return {}


def get_documents_by_user_sync(user_id: int, limit: int = 999):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è get_documents_by_user"""
    try:
        conn = psycopg2.connect(get_clean_database_url())
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT id, title, file_type, uploaded_at, summary
            FROM documents 
            WHERE user_id = %s AND confirmed = TRUE
            ORDER BY uploaded_at DESC 
            LIMIT %s
        """, (user_id, limit))
        
        rows = cursor.fetchall()
        columns = [desc[0] for desc in cursor.description]
        result = [dict(zip(columns, row)) for row in rows]
        
        cursor.close()
        conn.close()
        return result
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ get_documents_by_user_sync: {e}")
        return []


def get_last_messages_sync(user_id: int, limit: int = 50):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è get_last_messages"""
    try:
        conn = psycopg2.connect(get_clean_database_url())
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT role, message, timestamp
            FROM chat_history 
            WHERE user_id = %s 
            ORDER BY id DESC 
            LIMIT %s
        """, (user_id, limit))
        
        rows = cursor.fetchall()
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
        result = []
        for role, message, timestamp in reversed(rows):
            result.append({
                'role': role,
                'message': message,
                'timestamp': timestamp
            })
        
        cursor.close()
        conn.close()
        return result
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ get_last_messages_sync: {e}")
        return []


def get_user_stats_sync(user_id: int):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è get_user_stats"""
    try:
        conn = psycopg2.connect(get_clean_database_url())
        cursor = conn.cursor()
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        cursor.execute("SELECT COUNT(*) FROM documents WHERE user_id = %s", (user_id,))
        total_docs = cursor.fetchone()[0]
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        cursor.execute("SELECT COUNT(*) FROM chat_history WHERE user_id = %s", (user_id,))
        total_messages = cursor.fetchone()[0]
        
        # –õ–∏–º–∏—Ç—ã
        cursor.execute("""
            SELECT documents_left, gpt4o_queries_left 
            FROM user_limits 
            WHERE user_id = %s
        """, (user_id,))
        limits = cursor.fetchone()
        
        cursor.close()
        conn.close()
        
        return {
            'total_documents': total_docs or 0,
            'total_messages': total_messages or 0,
            'documents_left': limits[0] if limits else 2,
            'queries_left': limits[1] if limits else 10
        }
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ get_user_stats_sync: {e}")
        return {
            'total_documents': 0,
            'total_messages': 0,
            'documents_left': 0,
            'queries_left': 0
        }


# üîí –î–ï–ö–û–†–ê–¢–û–†: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
def login_required(f):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∑–∞—â–∏—Ç—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤
    
    –ß—Ç–æ –¥–µ–ª–∞–µ—Ç:
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ user_id –≤ —Å–µ—Å—Å–∏–∏
    - –ï—Å–ª–∏ –ù–ï–¢ ‚Üí —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ /login
    - –ï—Å–ª–∏ –î–ê ‚Üí –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é
    """
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'user_id' not in session:
            return redirect(url_for('login'))
        return f(*args, **kwargs)
    return decorated_function


# üè† –ì–õ–ê–í–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê –ö–ê–ë–ò–ù–ï–¢–ê
@dashboard_bp.route('/')
@login_required
def dashboard():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞"""
    user_id = session.get('user_id')
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    profile = get_user_profile_sync(user_id)
    documents = get_documents_by_user_sync(user_id, limit=5)
    chat_history = get_last_messages_sync(user_id, limit=10)
    stats = get_user_stats_sync(user_id)
    
    return render_template('dashboard.html',
        user=profile,
        documents=documents,
        chat_history=chat_history,
        stats=stats
    )


# üìÑ –°–¢–†–ê–ù–ò–¶–ê –î–û–ö–£–ú–ï–ù–¢–û–í
@dashboard_bp.route('/documents')
@login_required
def documents():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = session.get('user_id')
    docs = get_documents_by_user_sync(user_id)
    return render_template('documents.html', documents=docs)


# üí¨ –°–¢–†–ê–ù–ò–¶–ê –ß–ê–¢–ê
@dashboard_bp.route('/chat')
@login_required
def chat():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —á–∞—Ç–∞ —Å –ò–ò"""
    user_id = session.get('user_id')
    history = get_last_messages_sync(user_id, limit=50)
    profile = get_user_profile_sync(user_id)
    
    return render_template('chat.html', 
        chat_history=history,
        user=profile
    )


# üë§ –°–¢–†–ê–ù–ò–¶–ê –ü–†–û–§–ò–õ–Ø
@dashboard_bp.route('/profile')
@login_required
def profile():
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = session.get('user_id')
    profile_data = get_user_profile_sync(user_id)
    
    return render_template('profile.html', user=profile_data)