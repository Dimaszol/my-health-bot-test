# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Gemini –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞

import os  # ‚úÖ –î–û–ë–ê–í–õ–ï–ù –ò–ú–ü–û–†–¢
import google.generativeai as genai
import asyncio
from PIL import Image
from typing import Tuple

class GeminiMedicalAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Gemini API"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å API –∫–ª—é—á–æ–º"""
        api_key = os.getenv("GEMINI_API_KEY")
        if not api_key:
            raise ValueError("‚ùå GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
        
        genai.configure(api_key=api_key)
        self.model = genai.GenerativeModel('gemini-2.5-pro-preview-06-05')  # ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è Gemini –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—ã
        print("‚úÖ Gemini 1.5 Pro Latest –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—ã)")
    
    async def analyze_medical_image(self, image_path: str, lang: str = "ru", custom_prompt: str = None) -> Tuple[str, str]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        
        Args:
            image_path: –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            lang: –Ø–∑—ã–∫ –æ—Ç–≤–µ—Ç–∞ (ru, uk, en)
            custom_prompt: –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
            
        Returns:
            Tuple[analysis_text, error_message]
        """
        try:
            print(f"\nüß† –ê–ù–ê–õ–ò–ó –ß–ï–†–ï–ó GEMINI:")
            print(f"üìÅ –§–∞–π–ª: {image_path}")
            print(f"üåê –Ø–∑—ã–∫: {lang}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.exists(image_path):
                return "", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}"
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image = Image.open(image_path)
            print(f"üñºÔ∏è –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image.size}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç
            prompt = custom_prompt or self._get_medical_prompt(lang)
            
            print(f"‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å...")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            response = await asyncio.to_thread(
                self.model.generate_content,
                [prompt, image],
                generation_config=genai.types.GenerationConfig(
                    temperature=0.1,        # –ù–∏–∑–∫–∞—è –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
                    max_output_tokens=4000, # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                    candidate_count=1
                )
            )
            
            analysis = response.text
            
            print("\n" + "="*80)
            print("ü§ñ –û–¢–í–ï–¢ GEMINI:")
            print("="*80)
            print(analysis)
            print("="*80 + "\n")
            
            return analysis, ""
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ Gemini: {str(e)}"
            print(f"‚ùå {error_msg}")
            return "", error_msg
    
    def _get_medical_prompt(self, lang: str) -> str:
        """–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π)"""
        
        return """–¢—ã –æ–ø—ã—Ç–Ω—ã–π –≤—Ä–∞—á-–¥–∏–∞–≥–Ω–æ—Å—Ç. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ –¥–µ—Ç–∞–ª—å–Ω–æ.

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –≤—Ä–∞—á:

1. **–¢–∏–ø –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è** - —á—Ç–æ —ç—Ç–æ (–≠–ö–ì, –≠–≠–ì, —Ä–µ–Ω—Ç–≥–µ–Ω, –ú–†–¢, –£–ó–ò, –∞–Ω–∞–ª–∏–∑—ã –∏ —Ç.–¥.)?

2. **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ** - –≤–∏–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

3. **–î–µ—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Ö–æ–¥–∫–∏** - —á—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –≤–∏–¥–Ω–æ, –∏–∑–º–µ—Ä–µ–Ω–∏—è, –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏

4. **–ü–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è** - –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç –Ω–æ—Ä–º—ã, –µ—Å–ª–∏ –µ—Å—Ç—å

5. **–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ** - —á—Ç–æ —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏

6. **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏** - —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ, –∫ –∫–∞–∫–æ–º—É –≤—Ä–∞—á—É –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è

–ë—É–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º. –£–∫–∞–∂–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞."""

# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã GPT Vision
async def send_to_gemini_vision(image_path: str, lang: str = "ru", prompt: str = None) -> Tuple[str, str]:
    """
    –ó–∞–º–µ–Ω–∞ send_to_gpt_vision –Ω–∞ Gemini
    
    Args:
        image_path: –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        lang: –Ø–∑—ã–∫ –æ—Ç–≤–µ—Ç–∞
        prompt: –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        
    Returns:
        Tuple[analysis_result, error_message]
    """
    try:
        analyzer = GeminiMedicalAnalyzer()
        return await analyzer.analyze_medical_image(image_path, lang, prompt)
    except Exception as e:
        return "", f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}"

# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def analyze_medical_image_smart(image_path: str, lang: str = "ru", prompt: str = None) -> Tuple[str, str]:
    """
    –£–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞: —Å–Ω–∞—á–∞–ª–∞ Gemini, –ø–æ—Ç–æ–º fallback (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
    
    Args:
        image_path: –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        lang: –Ø–∑—ã–∫ –æ—Ç–≤–µ—Ç–∞
        prompt: –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        
    Returns:
        Tuple[analysis_result, error_message]
    """
    
    print("üéØ –ü—Ä–æ–±—É–µ–º Gemini (–æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥)...")
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º Gemini
    try:
        result, error = await send_to_gemini_vision(image_path, lang, prompt)
        if result and not error:
            print("‚úÖ Gemini —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª")
            return result, ""
        else:
            print(f"‚ö†Ô∏è Gemini –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {error}")
    except Exception as e:
        print(f"‚ö†Ô∏è Gemini –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    # –ï—Å–ª–∏ Gemini –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é –æ—à–∏–±–∫—É
    print("‚ùå –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    error_msg = "–°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    return "", error_msg

# –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def test_gemini_analysis(image_path: str, lang: str = "ru"):
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç Gemini –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_path}")
        
        result, error = await send_to_gemini_vision(image_path, lang)
        
        if error:
            print(f"‚ùå –û—à–∏–±–∫–∞: {error}")
            return None
        else:
            print("‚úÖ –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            print("\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢:")
            print("-" * 50)
            print(result)
            print("-" * 50)
            return result
            
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
async def list_available_models():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π Gemini"""
    try:
        api_key = os.getenv("GEMINI_API_KEY")
        if not api_key:
            print("‚ùå GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
            return []
            
        genai.configure(api_key=api_key)
        
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ Gemini...")
        models = genai.list_models()
        
        available_models = []
        for model in models:
            if 'generateContent' in model.supported_generation_methods:
                available_models.append(model.name)
                print(f"‚úÖ {model.name}")
        
        return available_models
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π: {e}")
        return []

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    async def main():
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
        await list_available_models()
        
        # –¢–µ—Å—Ç —Å –ø—Ä–∏–º–µ—Ä–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        test_image = "test_medical_image.jpg"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø—É—Ç—å
        
        if os.path.exists(test_image):
            await test_gemini_analysis(test_image, "ru")
        else:
            print("‚ùå –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            print("üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª test_medical_image.jpg –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
    # asyncio.run(main())