# registration.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –ø–æ–ª–Ω–æ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π

from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from db_postgresql import save_user, update_user_field, t, get_user_language, get_user_name, get_user
from keyboards import skip_keyboard, gender_keyboard, smoking_keyboard, alcohol_keyboard, activity_keyboard, registration_keyboard, show_main_menu
from datetime import datetime
from user_state_manager import user_state_manager, user_states
import re
import asyncio

async def send_long_message(message, text: str, max_length: int = 4000):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Å—Ç—è–º–∏"""
    if len(text) <= max_length:
        await message.answer(text, parse_mode="HTML")
        return
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º (–∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å **)
    parts = text.split('\n\n')
    current_part = ""
    
    for part in parts:
        if len(current_part + part + '\n\n') <= max_length:
            current_part += part + '\n\n'
        else:
            if current_part:
                await message.answer(current_part.strip(), parse_mode="HTML")
                await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏
            current_part = part + '\n\n'
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å
    if current_part:
        await message.answer(current_part.strip(), parse_mode="HTML")

async def show_gdpr_welcome(user_id: int, message: Message, lang: str):
    """
    –ù–û–í–´–ô –ü–ï–†–í–´–ô –®–ê–ì: –ü–æ–∫–∞–∑–∞—Ç—å GDPR –¥–∏—Å–∫–ª–µ–π–º–µ—Ä —Å —Å–æ–≥–ª–∞—Å–∏–µ–º
    –≠—Ç–æ —Ç–µ–ø–µ—Ä—å —Å–∞–º—ã–π –ø–µ—Ä–≤—ã–π —ç–∫—Ä–∞–Ω –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º GDPR –¥–∏—Å–∫–ª–µ–π–º–µ—Ä
    disclaimer_text = f"{t('gdpr_welcome_title', lang)}\n\n{t('gdpr_welcome_text', lang)}"
    
    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ö–ù–û–ü–ö–ò:
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=t("gdpr_consent_button", lang),
            callback_data="gdpr_consent_agree"  # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: —Å–æ–≥–ª–∞—Å–∏–µ
        )],
        [InlineKeyboardButton(
            text=t("change_language", lang),
            callback_data="change_language_registration"  # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: —Å–º–µ–Ω–∞ —è–∑—ã–∫–∞
        )]
    ])
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ callback –∏–ª–∏ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if hasattr(message, 'message_id') and hasattr(message, 'bot'):
            # –≠—Ç–æ CallbackQuery.message - –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
            await message.edit_text(
                disclaimer_text,
                reply_markup=keyboard,
                parse_mode="HTML",
                disable_web_page_preview=True
            )
        else:
            # –≠—Ç–æ –æ–±—ã—á–Ω–æ–µ Message - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await message.answer(
                disclaimer_text,
                reply_markup=keyboard,
                parse_mode="HTML",
                disable_web_page_preview=True
            )
    except Exception as e:
        # Fallback - –í–°–ï–ì–î–ê –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(
            disclaimer_text,
            reply_markup=keyboard,
            parse_mode="HTML",
            disable_web_page_preview=True
        )

async def start_registration(user_id: int, message: Message):
    """
    –£–ü–†–û–©–ï–ù–ù–ê–Ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: —Å—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–µ–º —Å –≥–æ–¥–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–∏–º—è —É–∂–µ –µ—Å—Ç—å –∏–∑ Telegram)
    """
    lang = await get_user_language(user_id)
    
    # –°–†–ê–ó–£ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ–¥–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–º—è)
    user_states[user_id] = {"step": "awaiting_birth_year"}
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã (—É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏–∑ Telegram)
    user_data = await get_user(user_id)
    user_name = user_data.get('name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å') if user_data else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ –∫–ª—é—á–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
    intro_text = f"{t('intro_1', lang, name=user_name)}\n\n{t('intro_2', lang)}\n\n{t('birth_year_prompt', lang)}"
    
    await message.answer(
        intro_text,
        reply_markup=skip_keyboard(lang),  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
        parse_mode="HTML"
    )

# ‚úÖ –§–£–ù–ö–¶–ò–ò –í–ê–õ–ò–î–ê–¶–ò–ò (–æ—Å—Ç–∞–≤–ª—è–µ–º, –º–æ–≥—É—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–π)
def validate_name(name: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏"""
    if not name or len(name.strip()) < 1:
        return False
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É
    clean_name = name.strip()
    if len(clean_name) > 50:  # –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤
        return False
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –±—É–∫–≤—É
    if not re.search(r'[a-zA-Z–∞-—è–ê-–Ø—ë–Å—ñ–Ü—ó–á—î–Ñ]', clean_name):
        return False
    return True

def validate_text_field(text: str, max_length: int = 50) -> bool:  # ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π (–∞–ª–ª–µ—Ä–≥–∏–∏, —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è –∏ —Ç.–¥.)"""
    if not text:
        return True  # –ü—É—Å—Ç—ã–µ –ø–æ–ª—è –¥–æ–ø—É—Å—Ç–∏–º—ã
    clean_text = text.strip()
    if len(clean_text) > max_length:
        return False
    return True

def get_valid_smoking_values(lang: str) -> list:
    """–ü–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫—É—Ä–µ–Ω–∏—è"""
    return [
        t("smoking_yes", lang), t("smoking_no", lang), "Vape", t("skip", lang),
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
        "–î–∞", "–ù–µ—Ç", "–¢–∞–∫", "–ù—ñ", "Yes", "No", "Ja", "Nein"
    ]

def get_valid_alcohol_values(lang: str) -> list:
    """–ü–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∞–ª–∫–æ–≥–æ–ª—è"""
    return [
        t("alcohol_never", lang), t("alcohol_sometimes", lang), t("alcohol_often", lang), t("skip", lang),
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        "–ù–µ —É–ø–æ—Ç—Ä–µ–±–ª—è—é", "–ò–Ω–æ–≥–¥–∞", "–ß–∞—Å—Ç–æ", "–ù–µ –≤–∂–∏–≤–∞—é", "–Ü–Ω–æ–¥—ñ", 
        "Never", "Sometimes", "Often", "Nie", "Manchmal", "Oft"
    ]

def get_valid_activity_values(lang: str) -> list:
    """–ü–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    return [
        "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", "üö∂ –ù–∏–∑–∫–∞—è", "üèÉ –°—Ä–µ–¥–Ω—è—è", "üí™ –í—ã—Å–æ–∫–∞—è", "üèÜ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è",
        "‚ùå –í—ñ–¥—Å—É—Ç–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å", "üö∂ –ù–∏–∑—å–∫–∞", "üèÉ –°–µ—Ä–µ–¥–Ω—è", "üí™ –í–∏—Å–æ–∫–∞", "üèÜ –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∞",
        "‚ùå No activity", "üö∂ Low", "üèÉ Medium", "üí™ High", "üèÜ Professional",
        "‚ùå Keine Aktivit√§t", "üö∂ Niedrig", "üèÉ Mittel", "üí™ Hoch", "üèÜ Professionell",
        t("skip", lang)
    ]

def get_valid_gender_values(lang: str) -> list:
    """–ü–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª–∞"""
    return [
        t("gender_male", lang), t("gender_female", lang), t("gender_other", lang), t("skip", lang),
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        "–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π", "–î—Ä—É–≥–æ–µ", "–ß–æ–ª–æ–≤—ñ—á–∞", "–ñ—ñ–Ω–æ—á–∞", "–Ü–Ω—à–µ",
        "Male", "Female", "Other", "M√§nnlich", "Weiblich", "Andere"
    ]

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —à–∞–≥–∞–º
async def handle_registration_step(user_id: int, message: Message) -> bool:
    lang = await get_user_language(user_id)
    state = user_states.get(user_id)

    if not state:
        return False

    if not isinstance(state, dict):
        return False

    step = state.get("step")

    if step == "awaiting_birth_year":
        if message.text == t("skip", lang):
            state["birth_year"] = None
        else:
            try:
                year_text = message.text.strip() if message.text else ""
                year = int(year_text)
                current_year = datetime.now().year - 16
                if year < 1900 or year > current_year:
                    raise ValueError
                state["birth_year"] = year
            except (ValueError, TypeError):
                await message.answer(t("birth_year_invalid", lang))
                return True
        state["step"] = "awaiting_gender"
        await message.answer(t("gender_prompt", lang), reply_markup=gender_keyboard(lang))
        return True

    if step == "awaiting_gender":
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–∞
        valid_genders = get_valid_gender_values(lang)
        
        if message.text == t("skip", lang):
            state["gender"] = None
        elif message.text in valid_genders:
            state["gender"] = message.text.strip()
        else:
            await message.answer(
                t("use_buttons_please", lang),  # ‚úÖ –õ–û–ö–ê–õ–ò–ó–û–í–ê–ù–û
                reply_markup=gender_keyboard(lang)
            )
            return True
            
        state["step"] = "awaiting_height"
        await message.answer(t("height_prompt", lang), reply_markup=skip_keyboard(lang))
        return True

    if step == "awaiting_height":
        if message.text == t("skip", lang):
            state["height_cm"] = None
        else:
            try:
                height_text = message.text.strip() if message.text else ""
                height = int(height_text)
                if height < 100 or height > 250:
                    raise ValueError
                state["height_cm"] = height
            except (ValueError, TypeError):
                await message.answer(t("height_invalid", lang))
                return True
        state["step"] = "awaiting_weight"
        await message.answer(t("weight_prompt", lang), reply_markup=skip_keyboard(lang))
        return True

    if step == "awaiting_weight":
        if message.text == t("skip", lang):
            state["weight_kg"] = None
        else:
            try:
                weight_text = message.text.strip() if message.text else ""
                weight = float(weight_text)
                if weight < 30 or weight > 300:
                    raise ValueError
                state["weight_kg"] = weight
            except (ValueError, TypeError):
                await message.answer(t("weight_invalid", lang))
                return True

        await save_user(user_id=user_id, name=None, birth_year=state.get("birth_year"))
        await update_user_field(user_id, "gender", state.get("gender"))
        await update_user_field(user_id, "height_cm", state.get("height_cm"))
        await update_user_field(user_id, "weight_kg", state.get("weight_kg"))

        state["step"] = "ask_full_profile"
        await message.answer(
            t("registration_done", lang),
            reply_markup=registration_keyboard(lang)
        )
        return True

    if step == "ask_full_profile":
        valid_profile_options = [t("complete_profile", lang), t("finish_registration", lang)]
        
        if message.text not in valid_profile_options:
            await message.answer(
                t("use_buttons_please", lang),  # ‚úÖ –õ–û–ö–ê–õ–ò–ó–û–í–ê–ù–û
                reply_markup=registration_keyboard(lang)
            )
            return True
            
        if message.text == t("complete_profile", lang):
            state["step"] = "chronic_conditions"
            await message.answer(t("profile_extra_prompt", lang), reply_markup=skip_keyboard(lang))
        else:
            user_states[user_id] = None
            await message.answer(t("welcome", lang, name=await get_user_name(user_id)))
            await message.answer(t("how_to_use_1", lang))
            await show_main_menu(message, lang)
        return True

    if step == "chronic_conditions":
        if message.text != t("skip", lang):
            text = message.text.strip() if message.text else ""
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤
            if not validate_text_field(text, 50):  # –ë–´–õ–û: 100
                await message.answer(t("text_too_long", lang, max_len=50))  # –ë–´–õ–û: 100
                return True
            await update_user_field(user_id, "chronic_conditions", text)
        state["step"] = "allergies"
        await message.answer(t("allergies_prompt", lang), reply_markup=skip_keyboard(lang))
        return True
    
    if step == "allergies":
        if message.text != t("skip", lang):
            text = message.text.strip() if message.text else ""
            # ‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –¢–ï–ö–°–¢–û–í–û–ì–û –ü–û–õ–Ø
            if not validate_text_field(text, 50):
                await message.answer(t("text_too_long", lang, max_len=50))
                return True
            await update_user_field(user_id, "allergies", text)
        state["step"] = "smoking"
        await message.answer(t("smoking_prompt", lang), reply_markup=smoking_keyboard(lang))
        return True

    if step == "smoking":
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—É—Ä–µ–Ω–∏—è
        valid_smoking = get_valid_smoking_values(lang)
        
        if message.text not in valid_smoking:
            await message.answer(
                t("use_buttons_please", lang),  # ‚úÖ –õ–û–ö–ê–õ–ò–ó–û–í–ê–ù–û
                reply_markup=smoking_keyboard(lang)
            )
            return True
            
        if message.text != t("skip", lang):
            await update_user_field(user_id, "smoking", message.text.strip())
        state["step"] = "alcohol"
        await message.answer(t("alcohol_prompt", lang), reply_markup=alcohol_keyboard(lang))
        return True

    if step == "alcohol":
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∞–ª–∫–æ–≥–æ–ª—è
        valid_alcohol = get_valid_alcohol_values(lang)
        
        if message.text not in valid_alcohol:
            await message.answer(
                t("use_buttons_please", lang),  # ‚úÖ –õ–û–ö–ê–õ–ò–ó–û–í–ê–ù–û
                reply_markup=alcohol_keyboard(lang)
            )
            return True
            
        if message.text != t("skip", lang):
            await update_user_field(user_id, "alcohol", message.text.strip())
        state["step"] = "physical_activity"
        await message.answer(t("activity_prompt", lang), reply_markup=activity_keyboard(lang))
        return True

    if step == "physical_activity":
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        valid_activity = get_valid_activity_values(lang)
        
        if message.text not in valid_activity:
            await message.answer(
                t("use_buttons_please", lang),  # ‚úÖ –õ–û–ö–ê–õ–ò–ó–û–í–ê–ù–û
                reply_markup=activity_keyboard(lang)
            )
            return True
            
        if message.text != t("skip", lang):
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –º–∞–ø–ø–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —è–∑—ã–∫–∞–º
            activity_map = {
                # –†—É—Å—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏": "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
                "üö∂ –ù–∏–∑–∫–∞—è": "–ù–∏–∑–∫–∞—è",
                "üèÉ –°—Ä–µ–¥–Ω—è—è": "–°—Ä–µ–¥–Ω—è—è", 
                "üí™ –í—ã—Å–æ–∫–∞—è": "–í—ã—Å–æ–∫–∞—è",
                "üèÜ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è",
                
                # –£–∫—Ä–∞–∏–Ω—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                "‚ùå –í—ñ–¥—Å—É—Ç–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å": "–í—ñ–¥—Å—É—Ç–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å",
                "üö∂ –ù–∏–∑—å–∫–∞": "–ù–∏–∑—å–∫–∞",
                "üèÉ –°–µ—Ä–µ–¥–Ω—è": "–°–µ—Ä–µ–¥–Ω—è",
                "üí™ –í–∏—Å–æ–∫–∞": "–í–∏—Å–æ–∫–∞", 
                "üèÜ –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∞": "–ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∞",
                
                # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                "‚ùå No activity": "No activity",
                "üö∂ Low": "Low",
                "üèÉ Medium": "Medium",
                "üí™ High": "High",
                "üèÜ Professional": "Professional",
                
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–µ–º–µ—Ü–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç –Ω–µ–º–µ—Ü–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
                "‚ùå Keine Aktivit√§t": "Keine Aktivit√§t",
                "üö∂ Niedrig": "Niedrig",
                "üèÉ Mittel": "Mittel",
                "üí™ Hoch": "Hoch",
                "üèÜ Professionell": "Professionell"
            }
            
            # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            unified_value = activity_map.get(message.text.strip(), message.text.strip())
            await update_user_field(user_id, "physical_activity", unified_value)
        
        state["step"] = "family_history"
        await message.answer(t("family_prompt", lang), reply_markup=skip_keyboard(lang))
        return True

    if step == "family_history":
        if message.text != t("skip", lang):
            text = message.text.strip() if message.text else ""
            if not validate_text_field(text, 50):
                await message.answer(t("text_too_long", lang, max_len=50))
                return True
            await update_user_field(user_id, "family_history", text)
        
        # ‚úÖ –ó–ê–í–ï–†–®–ï–ù–ò–ï –ê–ù–ö–ï–¢–´
        await message.answer(t("profile_thanks", lang))
        
        # ‚úÖ –°–ù–ê–ß–ê–õ–ê –ü–†–ò–í–ï–¢–°–¢–í–ò–ï –ò –ò–ù–°–¢–†–£–ö–¶–ò–ò
        await message.answer(t("welcome", lang, name=await get_user_name(user_id)))
        await message.answer(t("how_to_use_1", lang))
        await show_main_menu(message, lang)
        await asyncio.sleep(1)
        
        # üî• –ü–û–¢–û–ú –ì–ï–ù–ï–†–ò–†–£–ï–ú –ê–ù–ê–õ–ò–ó –ó–î–û–†–û–í–¨–Ø
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        preparing_msg = await message.answer(t("preparing_health_analysis", lang), parse_mode="HTML")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            user_data = await get_user(user_id)
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ gpt.py
            from gpt import generate_health_analysis
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑
            analysis = await generate_health_analysis(user_data, lang)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–≥–æ—Ç–æ–≤–ª—é –∞–Ω–∞–ª–∏–∑"
            try:
                await preparing_msg.delete()
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑ –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
            await send_long_message(message, analysis)
            
        except Exception as e:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–≥–æ—Ç–æ–≤–ª—é –∞–Ω–∞–ª–∏–∑"
            try:
                await preparing_msg.delete()
            except:
                pass
            
            # –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞
            import logging
            logger = logging.getLogger(__name__)
            logger.error(f"Error generating health analysis: {str(e)[:100]}")
            await message.answer(t("analysis_error", lang), parse_mode="HTML")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_states[user_id] = None
        return True

    return False