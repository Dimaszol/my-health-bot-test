from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from db_postgresql import save_user, update_user_field, user_exists, t, get_user_language, get_user_name
from keyboards import language_keyboard, skip_keyboard, gender_keyboard, smoking_keyboard, \
    alcohol_keyboard, activity_keyboard, registration_keyboard, show_main_menu
from datetime import datetime
from user_state_manager import user_state_manager, user_states
import re

# –°—Ç–∞—Ä—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async def start_registration(user_id: int, message: Message):
    """
    –°—Ç–∞—Ä—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ - —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ —Å –æ–ø—Ü–∏–µ–π —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
    """
    lang = await get_user_language(user_id)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏
    user_states[user_id] = {"step": "awaiting_name"}
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ç—Ä–æ-—Ç–µ–∫—Å—Ç
    intro_text = f"{t('intro_1', lang)}\n\n{t('intro_2', lang)}\n\n{t('ask_name', lang)}"
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=t("change_language", lang), 
            callback_data="change_language_registration"
        )]
    ])
    
    await message.answer(
        intro_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )

# ‚úÖ –§–£–ù–ö–¶–ò–ò –í–ê–õ–ò–î–ê–¶–ò–ò
def validate_name(name: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏"""
    if not name or len(name.strip()) < 1:
        return False
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É
    clean_name = name.strip()
    if len(clean_name) > 50:  # –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤
        return False
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –±—É–∫–≤—É
    if not re.search(r'[a-zA-Z–∞-—è–ê-–Ø—ë–Å—ñ–Ü—ó–á—î–Ñ]', clean_name):
        return False
    return True

def validate_text_field(text: str, max_length: int = 200) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π (–∞–ª–ª–µ—Ä–≥–∏–∏, —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è –∏ —Ç.–¥.)"""
    if not text:
        return True  # –ü—É—Å—Ç—ã–µ –ø–æ–ª—è –¥–æ–ø—É—Å—Ç–∏–º—ã
    clean_text = text.strip()
    if len(clean_text) > max_length:
        return False
    return True

def get_valid_smoking_values(lang: str) -> list:
    """–ü–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫—É—Ä–µ–Ω–∏—è"""
    return [
        t("smoking_yes", lang), t("smoking_no", lang), "Vape", t("skip", lang),
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
        "–î–∞", "–ù–µ—Ç", "–¢–∞–∫", "–ù—ñ", "Yes", "No", "Ja", "Nein"
    ]

def get_valid_alcohol_values(lang: str) -> list:
    """–ü–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∞–ª–∫–æ–≥–æ–ª—è"""
    return [
        t("alcohol_never", lang), t("alcohol_sometimes", lang), t("alcohol_often", lang), t("skip", lang),
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        "–ù–µ —É–ø–æ—Ç—Ä–µ–±–ª—è—é", "–ò–Ω–æ–≥–¥–∞", "–ß–∞—Å—Ç–æ", "–ù–µ –≤–∂–∏–≤–∞—é", "–Ü–Ω–æ–¥—ñ", 
        "Never", "Sometimes", "Often", "Nie", "Manchmal", "Oft"
    ]

def get_valid_activity_values(lang: str) -> list:
    """–ü–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    return [
        "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", "üö∂ –ù–∏–∑–∫–∞—è", "üèÉ –°—Ä–µ–¥–Ω—è—è", "üí™ –í—ã—Å–æ–∫–∞—è", "üèÜ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è",
        "‚ùå –í—ñ–¥—Å—É—Ç–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å", "üö∂ –ù–∏–∑—å–∫–∞", "üèÉ –°–µ—Ä–µ–¥–Ω—è", "üí™ –í–∏—Å–æ–∫–∞", "üèÜ –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∞",
        "‚ùå No activity", "üö∂ Low", "üèÉ Medium", "üí™ High", "üèÜ Professional",
        "‚ùå Keine Aktivit√§t", "üö∂ Niedrig", "üèÉ Mittel", "üí™ Hoch", "üèÜ Professionell",
        t("skip", lang)
    ]

def get_valid_gender_values(lang: str) -> list:
    """–ü–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª–∞"""
    return [
        t("gender_male", lang), t("gender_female", lang), t("gender_other", lang), t("skip", lang),
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        "–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π", "–î—Ä—É–≥–æ–µ", "–ß–æ–ª–æ–≤—ñ—á–∞", "–ñ—ñ–Ω–æ—á–∞", "–Ü–Ω—à–µ",
        "Male", "Female", "Other", "M√§nnlich", "Weiblich", "Andere"
    ]

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —à–∞–≥–∞–º
async def handle_registration_step(user_id: int, message: Message) -> bool:
    lang = await get_user_language(user_id)
    state = user_states.get(user_id)

    if not state:
        return False

    if isinstance(state, dict) and state.get("step") == "awaiting_name":
        name = message.text.strip() if message.text else ""
        
        # ‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –ò–ú–ï–ù–ò
        if not validate_name(name):
            if not name:
                await message.answer(t("name_missing", lang))
            elif len(name) > 50:
                await message.answer("‚ö†Ô∏è –ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤.")
            else:
                await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (–¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã).")
            return True
        
        user_states[user_id] = {
            "step": "awaiting_birth_year",
            "name": name
        }
        await message.answer(t("birth_year_prompt", lang), reply_markup=skip_keyboard(lang))
        return True

    if not isinstance(state, dict):
        return False

    step = state.get("step")

    if step == "awaiting_birth_year":
        if message.text == t("skip", lang):
            state["birth_year"] = None
        else:
            try:
                year_text = message.text.strip() if message.text else ""
                year = int(year_text)
                current_year = datetime.now().year
                if year < 1900 or year > current_year:
                    raise ValueError
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
                age = current_year - year
                if age > 120:  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç
                    raise ValueError
                state["birth_year"] = year
            except (ValueError, TypeError):
                await message.answer(t("birth_year_invalid", lang))
                return True
        state["step"] = "awaiting_gender"
        await message.answer(t("gender_prompt", lang), reply_markup=gender_keyboard(lang))
        return True

    if step == "awaiting_gender":
        # ‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–û–õ–ê
        valid_genders = get_valid_gender_values(lang)
        
        if message.text == t("skip", lang):
            state["gender"] = None
        elif message.text in valid_genders:
            state["gender"] = message.text.strip()
        else:
            await message.answer(
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏:",
                reply_markup=gender_keyboard(lang)
            )
            return True
            
        state["step"] = "awaiting_height"
        await message.answer(t("height_prompt", lang), reply_markup=skip_keyboard(lang))
        return True

    if step == "awaiting_height":
        if message.text == t("skip", lang):
            state["height_cm"] = None
        else:
            try:
                height_text = message.text.strip() if message.text else ""
                height = int(height_text)
                if height < 100 or height > 250:
                    raise ValueError
                state["height_cm"] = height
            except (ValueError, TypeError):
                await message.answer(t("height_invalid", lang))
                return True
        state["step"] = "awaiting_weight"
        await message.answer(t("weight_prompt", lang), reply_markup=skip_keyboard(lang))
        return True

    if step == "awaiting_weight":
        if message.text == t("skip", lang):
            state["weight_kg"] = None
        else:
            try:
                weight_text = message.text.strip() if message.text else ""
                weight = float(weight_text)
                if weight < 30 or weight > 300:
                    raise ValueError
                state["weight_kg"] = weight
            except (ValueError, TypeError):
                await message.answer(t("weight_invalid", lang))
                return True

        await save_user(user_id=user_id, name=state.get("name"), birth_year=state.get("birth_year"))
        await update_user_field(user_id, "gender", state.get("gender"))
        await update_user_field(user_id, "height_cm", state.get("height_cm"))
        await update_user_field(user_id, "weight_kg", state.get("weight_kg"))

        state["step"] = "ask_full_profile"
        await message.answer(
            t("registration_done", lang),
            reply_markup=registration_keyboard(lang)
        )
        return True

    if step == "ask_full_profile":
        valid_profile_options = [t("complete_profile", lang), t("finish_registration", lang)]
        
        if message.text not in valid_profile_options:
            await message.answer(
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏:",
                reply_markup=registration_keyboard(lang)
            )
            return True
            
        if message.text == t("complete_profile", lang):
            state["step"] = "chronic_conditions"
            await message.answer(t("profile_extra_prompt", lang), reply_markup=skip_keyboard(lang))
        else:
            user_states[user_id] = None
            await message.answer(t("welcome", lang, name=await get_user_name(user_id)))
            await message.answer(t("how_to_use_1", lang))
            await show_main_menu(message, lang)
        return True

    if step == "chronic_conditions":
        if message.text != t("skip", lang):
            text = message.text.strip() if message.text else ""
            # ‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –¢–ï–ö–°–¢–û–í–û–ì–û –ü–û–õ–Ø
            if not validate_text_field(text, 100):
                await message.answer("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.")
                return True
            await update_user_field(user_id, "chronic_conditions", text)
        state["step"] = "allergies"
        await message.answer(t("allergies_prompt", lang), reply_markup=skip_keyboard(lang))
        return True
    
    if step == "allergies":
        if message.text != t("skip", lang):
            text = message.text.strip() if message.text else ""
            # ‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –¢–ï–ö–°–¢–û–í–û–ì–û –ü–û–õ–Ø
            if not validate_text_field(text, 50):
                await message.answer("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç. –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤.")
                return True
            await update_user_field(user_id, "allergies", text)
        state["step"] = "smoking"
        await message.answer(t("smoking_prompt", lang), reply_markup=smoking_keyboard(lang))
        return True

    if step == "smoking":
        # ‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –ö–£–†–ï–ù–ò–Ø
        valid_smoking = get_valid_smoking_values(lang)
        
        if message.text not in valid_smoking:
            await message.answer(
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏:",
                reply_markup=smoking_keyboard(lang)
            )
            return True
            
        if message.text != t("skip", lang):
            await update_user_field(user_id, "smoking", message.text.strip())
        state["step"] = "alcohol"
        await message.answer(t("alcohol_prompt", lang), reply_markup=alcohol_keyboard(lang))
        return True

    if step == "alcohol":
        # ‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –ê–õ–ö–û–ì–û–õ–Ø
        valid_alcohol = get_valid_alcohol_values(lang)
        
        if message.text not in valid_alcohol:
            await message.answer(
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏:",
                reply_markup=alcohol_keyboard(lang)
            )
            return True
            
        if message.text != t("skip", lang):
            await update_user_field(user_id, "alcohol", message.text.strip())
        state["step"] = "physical_activity"
        await message.answer(t("activity_prompt", lang), reply_markup=activity_keyboard(lang))
        return True

    if step == "physical_activity":
        # ‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –ê–ö–¢–ò–í–ù–û–°–¢–ò
        valid_activity = get_valid_activity_values(lang)
        
        if message.text not in valid_activity:
            await message.answer(
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏:",
                reply_markup=activity_keyboard(lang)
            )
            return True
            
        if message.text != t("skip", lang):
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –º–∞–ø–ø–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å –Ω–µ–º–µ—Ü–∫–∏–º —è–∑—ã–∫–æ–º
            activity_map = {
                # –†—É—Å—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏": "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
                "üö∂ –ù–∏–∑–∫–∞—è": "–ù–∏–∑–∫–∞—è",
                "üèÉ –°—Ä–µ–¥–Ω—è—è": "–°—Ä–µ–¥–Ω—è—è", 
                "üí™ –í—ã—Å–æ–∫–∞—è": "–í—ã—Å–æ–∫–∞—è",
                "üèÜ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è",
                
                # –£–∫—Ä–∞–∏–Ω—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                "‚ùå –í—ñ–¥—Å—É—Ç–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å": "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
                "üö∂ –ù–∏–∑—å–∫–∞": "–ù–∏–∑–∫–∞—è",
                "üèÉ –°–µ—Ä–µ–¥–Ω—è": "–°—Ä–µ–¥–Ω—è—è",
                "üí™ –í–∏—Å–æ–∫–∞": "–í—ã—Å–æ–∫–∞—è", 
                "üèÜ –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∞": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è",
                
                # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                "‚ùå No activity": "No activity",
                "üö∂ Low": "Low",
                "üèÉ Medium": "Medium",
                "üí™ High": "High",
                "üèÜ Professional": "Professional",
                
                # –ù–µ–º–µ—Ü–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                "‚ùå Keine Aktivit√§t": "No activity",
                "üö∂ Niedrig": "Low",
                "üèÉ Mittel": "Medium",
                "üí™ Hoch": "High",
                "üèÜ Professionell": "Professional"
            }
            
            # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            unified_value = activity_map.get(message.text.strip(), message.text.strip())
            await update_user_field(user_id, "physical_activity", unified_value)
        
        state["step"] = "family_history"
        await message.answer(t("family_prompt", lang), reply_markup=skip_keyboard(lang))
        return True

    if step == "family_history":
        if message.text != t("skip", lang):
            text = message.text.strip() if message.text else ""
            # ‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –¢–ï–ö–°–¢–û–í–û–ì–û –ü–û–õ–Ø
            if not validate_text_field(text, 300):
                await message.answer("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç. –ú–∞–∫—Å–∏–º—É–º 300 —Å–∏–º–≤–æ–ª–æ–≤.")
                return True
            await update_user_field(user_id, "family_history", text)
        user_states[user_id] = None
        await message.answer(t("profile_thanks", lang))
        await message.answer(t("welcome", lang, name=await get_user_name(user_id)))
        await message.answer(t("how_to_use_1", lang))
        await show_main_menu(message, lang)
        return True

    return False