# promo_manager.py
"""
üéØ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –±–æ—Ç–∞

–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω–∞ 30-–º —Å–æ–æ–±—â–µ–Ω–∏–∏
—Å –±–æ–ª—å—à–∏–º–∏ —Å–∫–∏–¥–∫–∞–º–∏ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ Stripe –ø—Ä–æ–º–æ–∫–æ–¥—ã.
"""

import logging
from typing import Optional, Tuple, Dict, Any
from aiogram import types
from aiogram.utils.keyboard import InlineKeyboardBuilder

logger = logging.getLogger(__name__)

class PromoManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    # üé´ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –≤ Stripe)
    PROMO_CODES = {
        "basic_special": {
            "stripe_code": "basic_first_30",      # –ü—Ä–æ–º–æ–∫–æ–¥ –≤ Stripe
            "original_price": "$3.99",          # –û–±—ã—á–Ω–∞—è —Ü–µ–Ω–∞
            "promo_price": "$0.99",             # –¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π
            "package_id": "basic_sub",          # ID –ø–∞–∫–µ—Ç–∞ –∏–∑ stripe_config.py
            "description_key": "promo_basic_plan_name",  # ‚Üê –ö–ª—é—á –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
            "feature_keys": [                   # ‚Üê –ö–ª—é—á–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞
                "promo_basic_feature_1",
                "promo_basic_feature_2", 
                "promo_basic_feature_3"
            ],
            "emoji": "üíé"
        },
        "premium_special": {
            "stripe_code": "premium_first_30",    # –ü—Ä–æ–º–æ–∫–æ–¥ –≤ Stripe
            "original_price": "$9.99",          # –û–±—ã—á–Ω–∞—è —Ü–µ–Ω–∞
            "promo_price": "$1.99",             # –¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π
            "package_id": "premium_sub",        # ID –ø–∞–∫–µ—Ç–∞ –∏–∑ stripe_config.py
            "description_key": "promo_premium_plan_name",  # ‚Üê –ö–ª—é—á –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
            "feature_keys": [                   # ‚Üê –ö–ª—é—á–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞
                "promo_premium_feature_1",
                "promo_premium_feature_2",
                "promo_premium_feature_3"
            ],
            "emoji": "üöÄ"
        }
    }
    
    @staticmethod
    async def check_and_show_promo(user_id: int, current_message_count: int) -> Optional[types.Message]:
        """
        üéØ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
            current_message_count: —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Message —Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–º –∏–ª–∏ None, –µ—Å–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ
        """
        try:
            # üîç –û–¢–õ–ê–î–û–ß–ù–´–ï –õ–û–ì–ò
            print(f"üîç PROMO DEBUG: User {user_id}, count = {current_message_count}")
            
            # 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—ã–π –Ω–æ–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è (–ü—Ä–æ–º–æ–∫–æ–¥1)
            if current_message_count != 30:
                print(f"üîç PROMO DEBUG: –°—á–µ—Ç—á–∏–∫ {current_message_count} != 4, –≤—ã—Ö–æ–¥–∏–º")
                logger.debug(f"User {user_id}: message {current_message_count}/4 - –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º")
                return None
                
            print(f"üîç PROMO DEBUG: –°—á–µ—Ç—á–∏–∫ –ø–æ–¥—Ö–æ–¥–∏—Ç! –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥!")
                
            # 2Ô∏è‚É£ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ —Å—Ä–∞–∑—É (–±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î)!
            logger.info(f"üéâ User {user_id}: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ 4-–º —Å–æ–æ–±—â–µ–Ω–∏–∏!")
            return await PromoManager._send_promo_message(user_id)
            
        except Exception as e:
            print(f"üîç PROMO DEBUG: –û–®–ò–ë–ö–ê! {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –¥–ª—è user {user_id}: {e}")
            return None
    
    @staticmethod
    async def _send_promo_message(user_id: int) -> Optional[types.Message]:
        """
        üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
        """
        try:
            from main import bot
            from db_postgresql import get_user_language, t
            
            # 1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É–±–∏—Ä–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î)
            lang = await get_user_language(user_id)
            
            # 3Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–º
            basic_info = PromoManager.PROMO_CODES['basic_special']
            premium_info = PromoManager.PROMO_CODES['premium_special']
            
            text = f"""{t('promo_title', lang)}

{t('promo_subtitle', lang)}

üíé <b>{t('promo_basic_plan', lang)}</b>
<s>{basic_info['original_price']}</s> ‚ûú <b>{basic_info['promo_price']}</b> <i>{t('promo_basic_savings', lang)}</i>
{chr(10).join(['‚Ä¢ ' + t(feature_key, lang) for feature_key in basic_info['feature_keys']])}

üöÄ <b>{t('promo_premium_plan', lang)}</b> <i>{t('promo_most_popular', lang)}</i>
<s>{premium_info['original_price']}</s> ‚ûú <b>{premium_info['promo_price']}</b> <i>{t('promo_premium_savings', lang)}</i>
{chr(10).join(['‚Ä¢ ' + t(feature_key, lang) for feature_key in premium_info['feature_keys']])}

‚ö° <i>{t('promo_offer_note', lang)}</i>

üéØ {t('promo_choose_plan', lang)}"""

            # 4Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏
            keyboard = InlineKeyboardBuilder()
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è Basic –ø–ª–∞–Ω–∞
            keyboard.button(
                text=t('promo_basic_button', lang, price=basic_info['promo_price']),
                callback_data=f"promo_buy:basic_special"
            )
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è Premium –ø–ª–∞–Ω–∞  
            keyboard.button(
                text=t('promo_premium_button', lang, price=premium_info['promo_price']), 
                callback_data=f"promo_buy:premium_special"
            )
            
            # –ö–Ω–æ–ø–∫–∞ "–ù–µ —Å–µ–π—á–∞—Å"
            keyboard.button(
                text=t('promo_maybe_later', lang),
                callback_data="promo_dismiss"
            )
            
            keyboard.adjust(1)  # –í—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç–æ–ª–±–µ—Ü
            
            # 5Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = await bot.send_message(
                chat_id=user_id,
                text=text,
                reply_markup=keyboard.as_markup(),
                parse_mode="HTML"
            )
            
            logger.info(f"‚úÖ User {user_id}: –ø—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            return message
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ user {user_id}: {e}")
            return None
    
    @staticmethod
    async def handle_promo_purchase(callback_query: types.CallbackQuery):
        """
        üí≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–∫—É–ø–∫–∏ –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É
        """
        try:
            from db_postgresql import get_user_language, t
            
            # 1Ô∏è‚É£ –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏–∑ callback_data
            callback_data = callback_query.data
            if ":" not in callback_data:
                lang = await get_user_language(callback_query.from_user.id)
                await callback_query.answer(t('promo_invalid_format', lang))
                return
                
            promo_type = callback_data.split(":")[1]
            promo_info = PromoManager.PROMO_CODES.get(promo_type)
            
            user_id = callback_query.from_user.id
            lang = await get_user_language(user_id)
            
            if not promo_info:
                await callback_query.answer(t('promo_not_found', lang))
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥: {promo_type}")
                return
                
            user_name = callback_query.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            
            logger.info(f"User {user_id} –≤—ã–±—Ä–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥ {promo_type}")
            
            # 2Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É —Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–º —á–µ—Ä–µ–∑ Stripe
            from stripe_manager import StripeManager
            
            success, result = await StripeManager.create_promo_payment_session(
                user_id=user_id,
                package_id=promo_info["package_id"],
                promo_code=promo_info["stripe_code"],
                user_name=user_name
            )
            
            # 3Ô∏è‚É£ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
            if success:
                # –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
                keyboard = InlineKeyboardBuilder()
                keyboard.button(text=t('payment_proceed_button', lang), url=result)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
                savings = float(promo_info['original_price'][1:]) - float(promo_info['promo_price'][1:])
                
                await callback_query.message.edit_text(
                    t('promo_payment_message', lang, 
                      plan=t(promo_info['description_key'], lang),
                      price=promo_info['promo_price'],
                      savings=f"${savings:.2f}"),
                    reply_markup=keyboard.as_markup(),
                    parse_mode="HTML"
                )
                
                await callback_query.answer(t('promo_payment_ready', lang))
                logger.info(f"‚úÖ User {user_id}: —Å–æ–∑–¥–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É —Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–º {promo_type}")
                
            else:
                # –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
                await callback_query.answer(t('promo_payment_error', lang, error=result))
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è user {user_id}: {result}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")
            user_id = callback_query.from_user.id
            lang = await get_user_language(user_id)
            await callback_query.answer(t('promo_general_error', lang))
    
    @staticmethod
    async def handle_promo_dismiss(callback_query: types.CallbackQuery):
        """
        ‚è∞ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ "–ú–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ"
        """
        try:
            from db_postgresql import get_user_language, t
            
            user_id = callback_query.from_user.id
            lang = await get_user_language(user_id)
            
            await callback_query.message.edit_text(
                t('promo_dismiss_message', lang),
                parse_mode="HTML"
            )
            
            await callback_query.answer(t('promo_dismiss_answer', lang))
            logger.info(f"User {user_id}: –æ—Ç–ª–æ–∂–∏–ª –ø—Ä–æ–º–æ–∫–æ–¥")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ dismiss –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")
            await callback_query.answer(t('promo_dismiss_fallback', lang))

# üîß –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
async def check_promo_on_message(user_id: int, message_count: int) -> Optional[types.Message]:
    """
    üéØ –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    
    –≠—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –Ω—É–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –≤ main.py –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    return await PromoManager.check_and_show_promo(user_id, message_count)