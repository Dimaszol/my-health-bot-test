# subscription_handlers.py - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å —Å–∏—Å—Ç–µ–º–æ–π –∞–ø–≥—Ä–µ–π–¥–∞ –ø–æ–¥–ø–∏—Å–æ–∫

import logging
from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from subscription_keyboards import (
    subscription_main_menu, purchase_confirmation_keyboard,
    subscription_upsell_keyboard, cancel_subscription_confirmation,
    payment_processing_keyboard, get_package_description
)
from subscription_manager import SubscriptionManager
from stripe_manager import StripeManager
from db_postgresql import get_user_language, get_user_name, fetch_one
from datetime import datetime
from error_handler import log_error_with_context

logger = logging.getLogger(__name__)

class SubscriptionHandlers:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"""
    
    # subscription_handlers.py - –ó–ê–ú–ï–ù–ò–¢–¨ —Ñ—É–Ω–∫—Ü–∏—é show_subscription_menu

    @staticmethod
    async def show_subscription_menu(message_or_callback, user_id: int = None):
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º user_id –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
            if user_id is None:
                if hasattr(message_or_callback, 'from_user'):
                    user_id = message_or_callback.from_user.id
                else:
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å user_id")
                    return
            
            # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –∏ –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            lang = await get_user_language(user_id)
            limits = await SubscriptionManager.get_user_limits(user_id)
            
            # ‚úÖ –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –†–ï–ê–õ–¨–ù–û–ï —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ Stripe
            stripe_check = await SubscriptionManager.check_real_stripe_subscription(user_id)
            has_real_subscription = stripe_check["has_active"]
            
            # ‚úÖ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ Stripe, –∞ –Ω–µ –ë–î
            current_subscription = None
            if has_real_subscription:
                # –ï—Å—Ç—å –†–ï–ê–õ–¨–ù–ê–Ø –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –≤ Stripe
                if limits and limits['documents_left'] >= 20:  # Premium
                    current_subscription = "premium_sub"
                elif limits and limits['documents_left'] >= 5:   # Basic
                    current_subscription = "basic_sub"
            # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –≤ Stripe - current_subscription –æ—Å—Ç–∞–µ—Ç—Å—è None
            
            logger.info(f"–ú–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è {user_id}: Stripe={has_real_subscription}, current_sub={current_subscription}")
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            subscription_text = await SubscriptionHandlers._get_subscription_menu_text(
                user_id, lang, limits, has_real_subscription
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º current_subscription
            keyboard = subscription_main_menu(lang, current_subscription)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if isinstance(message_or_callback, types.CallbackQuery):
                await message_or_callback.message.edit_text(
                    subscription_text,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
                await message_or_callback.answer()
            else:
                await message_or_callback.answer(
                    subscription_text,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            
            # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            error_text = f"‚ùå –û—à–∏–±–∫–∞ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫: {str(e)[:200]}"
            
            if isinstance(message_or_callback, types.CallbackQuery):
                await message_or_callback.message.answer(error_text)
                await message_or_callback.answer()
            else:
                await message_or_callback.answer(error_text)
    
    @staticmethod
    async def _get_subscription_menu_text(user_id: int, lang: str, limits: dict, has_real_subscription: bool) -> str:
        """‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è - —É—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Stripe"""
        
        texts = {
            "ru": {
                "title": "üíé <b>–ü–æ–¥–ø–∏—Å–∫–∏ –∏ –ª–∏–º–∏—Ç—ã</b>",
                "current_limits": "\nüìä <b>–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã:</b>",
                "documents": "üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã",
                "queries": "ü§ñ GPT-4o –∑–∞–ø—Ä–æ—Å—ã", 
                "subscription": "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞",
                "expires": "‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç",
                "free": "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è",
                "choose": "\nüõí <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É:</b>",
                "sync_note": "\nüîÑ <i>–î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π</i>"
            },
            "uk": {
                "title": "üíé <b>–ü—ñ–¥–ø–∏—Å–∫–∏ —Ç–∞ –ª—ñ–º—ñ—Ç–∏</b>",
                "current_limits": "\nüìä <b>–í–∞—à—ñ –ø–æ—Ç–æ—á–Ω—ñ –ª—ñ–º—ñ—Ç–∏:</b>",
                "documents": "üìÑ –î–æ–∫—É–º–µ–Ω—Ç–∏",
                "queries": "ü§ñ GPT-4o –∑–∞–ø–∏—Ç–∏",
                "subscription": "üí≥ –ü—ñ–¥–ø–∏—Å–∫–∞", 
                "expires": "‚è∞ –ó–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è",
                "free": "–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞",
                "choose": "\nüõí <b>–û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–ø–∏—Å–∫—É:</b>",
                "sync_note": "\nüîÑ <i>–î–∞–Ω—ñ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω—ñ –∑ –ø–ª–∞—Ç—ñ–∂–Ω–æ—é —Å–∏—Å—Ç–µ–º–æ—é</i>"
            },
            "en": {
                "title": "üíé <b>Subscriptions and limits</b>",
                "current_limits": "\nüìä <b>Your current limits:</b>",
                "documents": "üìÑ Documents", 
                "queries": "ü§ñ GPT-4o queries",
                "subscription": "üí≥ Subscription",
                "expires": "‚è∞ Expires",
                "free": "Free",
                "choose": "\nüõí <b>Choose subscription:</b>",
                "sync_note": "\nüîÑ <i>Data synchronized with payment system</i>"
            }
        }
        
        t = texts.get(lang, texts["ru"])
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞
        text_parts = [t["title"]]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö –ª–∏–º–∏—Ç–∞—Ö
        if limits:
            text_parts.append(t["current_limits"])
            text_parts.append(f"‚Ä¢ {t['documents']}: <b>{limits['documents_left']}</b>")
            text_parts.append(f"‚Ä¢ {t['queries']}: <b>{limits['gpt4o_queries_left']}</b>")
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –†–ï–ê–õ–¨–ù–û–ì–û —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if has_real_subscription:
                text_parts.append(f"‚Ä¢ {t['subscription']}: <b>‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è</b>")
                if limits.get('expires_at'):
                    try:
                        from datetime import datetime
                        expires_at_value = limits['expires_at']
                        if isinstance(expires_at_value, str):
                            expiry_date = datetime.fromisoformat(expires_at_value.replace('Z', '+00:00'))
                        else:
                            expiry_date = expires_at_value
                        formatted_date = expiry_date.strftime("%d.%m.%Y")
                        text_parts.append(f"‚Ä¢ {t['expires']}: <b>{formatted_date}</b>")
                    except:
                        pass
            else:
                text_parts.append(f"‚Ä¢ {t['subscription']}: <b>{t['free']}</b>")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
        text_parts.append(t["choose"])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        text_parts.append(t["sync_note"])
        
        return "\n".join(text_parts)
    
    @staticmethod
    async def handle_purchase_request(callback: types.CallbackQuery, package_id: str):
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫—É–ø–∫—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
        try:
            user_id = callback.from_user.id
            lang = await get_user_language(user_id)
            user_name = await get_user_name(user_id) or callback.from_user.first_name or "User"
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –†–ï–ê–õ–¨–ù–´–ï –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –ë–î
            active_subscription = await SubscriptionHandlers._get_active_subscription(user_id)
            
            # ‚úÖ –í–ê–ñ–ù–û: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–ø–≥—Ä–µ–π–¥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
            # 1. –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –≤ –ë–î
            # 2. –ò –ø–æ–∫—É–ø–∞–µ—Ç—Å—è –¥—Ä—É–≥–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ (–Ω–µ Extra Pack)
            if (active_subscription and 
                package_id in ['basic_sub', 'premium_sub'] and 
                active_subscription['package_id'] != package_id):
                
                # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –î–†–£–ì–ê–Ø –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
                await SubscriptionHandlers._show_upgrade_warning(
                    callback, package_id, active_subscription
                )
                return
            
            # ‚úÖ –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –ò–õ–ò –ø–æ–∫—É–ø–∞–µ—Ç—Å—è —Ç–∞ –∂–µ —Å–∞–º–∞—è –ò–õ–ò —ç—Ç–æ Extra Pack
            # - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—É—é –ø–æ–∫—É–ø–∫—É
            package_description = get_package_description(package_id, lang)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏
            confirmation_text = {
                "ru": f"üõí <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏</b>\n\n{package_description}\n\nüí≥ –ù–∞–∂–º–∏—Ç–µ '–û–ø–ª–∞—Ç–∏—Ç—å' –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–ø–ª–∞—Ç–µ —á–µ—Ä–µ–∑ Stripe.",
                "uk": f"üõí <b>–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–æ–∫—É–ø–∫–∏</b>\n\n{package_description}\n\nüí≥ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–°–ø–ª–∞—Ç–∏—Ç–∏' –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –±–µ–∑–ø–µ—á–Ω–æ—ó –æ–ø–ª–∞—Ç–∏ —á–µ—Ä–µ–∑ Stripe.",
                "en": f"üõí <b>Purchase confirmation</b>\n\n{package_description}\n\nüí≥ Click 'Pay' to proceed to secure payment via Stripe."
            }
            
            await callback.message.edit_text(
                confirmation_text.get(lang, confirmation_text["en"]),
                reply_markup=purchase_confirmation_keyboard(package_id, lang),
                parse_mode="HTML"
            )
            await callback.answer()
            
        except Exception as e:
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            logger.error(f"–û—à–∏–±–∫–∞: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
    
    @staticmethod
    async def _get_active_subscription(user_id: int) -> dict:
        """‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            subscription_data = await fetch_one("""
                SELECT stripe_subscription_id, package_id, created_at 
                FROM user_subscriptions 
                WHERE user_id = ? AND status = 'active'
                ORDER BY created_at DESC LIMIT 1
            """, (user_id,))
            
            if subscription_data:
                return {
                    "stripe_subscription_id": subscription_data[0],
                    "package_id": subscription_data[1],
                    "created_at": subscription_data[2]
                }
            
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return None
    
    @staticmethod
    async def _show_upgrade_warning(callback: types.CallbackQuery, new_package_id: str, active_subscription: dict):
        """‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –∞–ø–≥—Ä–µ–π–¥–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            user_id = callback.from_user.id
            lang = await get_user_language(user_id)
            
            current_package = active_subscription['package_id']
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–∫–µ—Ç–∞—Ö –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            from stripe_config import StripeConfig
            current_info = StripeConfig.get_package_info(current_package)
            new_info = StripeConfig.get_package_info(new_package_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            warning_texts = {
                "ru": f"‚ö†Ô∏è <b>–ó–∞–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\nüìã <b>–¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞:</b>\n{current_info['user_friendly_name']} ({current_info['price_display']}/–º–µ—Å—è—Ü)\n\nüîÑ <b>–ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞:</b>\n{new_info['user_friendly_name']} ({new_info['price_display']}/–º–µ—Å—è—Ü)\n\nüí° <b>–ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç:</b>\n‚Ä¢ –¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ\n‚Ä¢ –ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è —Å—Ä–∞–∑—É\n‚Ä¢ –°–ª–µ–¥—É—é—â–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –Ω–æ–≤–æ–π —Ü–µ–Ω–µ\n\n‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–º–µ–Ω—É?",
                "uk": f"‚ö†Ô∏è <b>–ó–∞–º—ñ–Ω–∞ –ø—ñ–¥–ø–∏—Å–∫–∏</b>\n\nüìã <b>–ü–æ—Ç–æ—á–Ω–∞ –ø—ñ–¥–ø–∏—Å–∫–∞:</b>\n{current_info['user_friendly_name']} ({current_info['price_display']}/–º—ñ—Å—è—Ü—å)\n\nüîÑ <b>–ù–æ–≤–∞ –ø—ñ–¥–ø–∏—Å–∫–∞:</b>\n{new_info['user_friendly_name']} ({new_info['price_display']}/–º—ñ—Å—è—Ü—å)\n\nüí° <b>–©–æ —Å—Ç–∞–Ω–µ—Ç—å—Å—è:</b>\n‚Ä¢ –ü–æ—Ç–æ—á–Ω—É –ø—ñ–¥–ø–∏—Å–∫—É –±—É–¥–µ —Å–∫–∞—Å–æ–≤–∞–Ω–æ –Ω–µ–≥–∞–π–Ω–æ\n‚Ä¢ –ù–æ–≤–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤—É—î—Ç—å—Å—è –∑–∞—Ä–∞–∑\n‚Ä¢ –ù–∞—Å—Ç—É–ø–Ω–µ —Å–ø–∏—Å–∞–Ω–Ω—è –∑–∞ –Ω–æ–≤–æ—é —Ü—ñ–Ω–æ—é\n\n‚ùì –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∑–∞–º—ñ–Ω—É?",
                "en": f"‚ö†Ô∏è <b>Subscription upgrade</b>\n\nüìã <b>Current subscription:</b>\n{current_info['user_friendly_name']} ({current_info['price_display']}/month)\n\nüîÑ <b>New subscription:</b>\n{new_info['user_friendly_name']} ({new_info['price_display']}/month)\n\nüí° <b>What will happen:</b>\n‚Ä¢ Current subscription will be cancelled immediately\n‚Ä¢ New subscription will activate right away\n‚Ä¢ Next billing at new price\n\n‚ùì Continue with upgrade?"
            }
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–ø–≥—Ä–µ–π–¥–∞
            upgrade_keyboard = SubscriptionHandlers._create_upgrade_confirmation_keyboard(
                new_package_id, current_package, lang
            )
            
            await callback.message.edit_text(
                warning_texts.get(lang, warning_texts["en"]),
                reply_markup=upgrade_keyboard,
                parse_mode="HTML"
            )
            await callback.answer()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ–± –∞–ø–≥—Ä–µ–π–¥–µ: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
    
    @staticmethod
    def _create_upgrade_confirmation_keyboard(new_package_id: str, current_package_id: str, lang: str) -> InlineKeyboardMarkup:
        """‚úÖ –£–ü–†–û–©–ï–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–π –ø–∞–∫–µ—Ç"""
        
        texts = {
            "ru": {
                "confirm": "‚úÖ –î–∞, –∑–∞–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                "cancel": "‚ùå –û—Ç–º–µ–Ω–∞"
            },
            "uk": {
                "confirm": "‚úÖ –¢–∞–∫, –∑–∞–º—ñ–Ω–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É",
                "cancel": "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"
            },
            "en": {
                "confirm": "‚úÖ Yes, upgrade subscription",
                "cancel": "‚ùå Cancel"
            }
        }
        
        t = texts.get(lang, texts["en"])
        
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text=t["confirm"], 
                callback_data=f"upgrade_to_{new_package_id}"  # ‚úÖ –ü–†–û–°–¢–û: —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–π –ø–∞–∫–µ—Ç
            )],
            [InlineKeyboardButton(
                text=t["cancel"], 
                callback_data="subscription_menu"
            )]
        ])
        
    @staticmethod
    async def handle_subscription_upgrade(callback: types.CallbackQuery, current_package_id: str, new_package_id: str):
        """‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π –∞–ø–≥—Ä–µ–π–¥ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            user_id = callback.from_user.id
            lang = await get_user_language(user_id)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
            processing_texts = {
                "ru": "üîÑ –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –ø–æ–¥–ø–∏—Å–∫—É –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é...",
                "uk": "üîÑ –°–∫–∞—Å–æ–≤—É—î–º–æ —Å—Ç–∞—Ä—É –ø—ñ–¥–ø–∏—Å–∫—É —Ç–∞ —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É...",
                "en": "üîÑ Cancelling old subscription and creating new one..."
            }
            
            await callback.message.edit_text(
                processing_texts.get(lang, processing_texts["en"]),
                reply_markup=payment_processing_keyboard(lang)
            )
            await callback.answer()
            
            # 1. –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –ø–æ–¥–ø–∏—Å–∫—É –≤ Stripe
            cancel_success = await SubscriptionHandlers._cancel_old_subscription(user_id)
            
            if not cancel_success:
                error_texts = {
                    "ru": "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Å—Ç–∞—Ä–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    "uk": "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ä–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
                    "en": "‚ùå Error cancelling old subscription. Please try later."
                }
                
                await callback.message.edit_text(
                    error_texts.get(lang, error_texts["en"]),
                    reply_markup=payment_processing_keyboard(lang)
                )
                return
            
            # 2. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
            user_name = await get_user_name(user_id) or callback.from_user.first_name or "User"
            success, payment_url_or_error = await StripeManager.create_checkout_session(
                user_id=user_id,
                package_id=new_package_id,
                user_name=user_name
            )
            
            if success:
                success_texts = {
                    "ru": f"‚úÖ <b>–°—Ç–∞—Ä–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!</b>\n\nüí≥ <b>–°—Å—ã–ª–∫–∞ –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏:</b>\nüîó <a href='{payment_url_or_error}'>–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã</a>\n\n‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 30 –º–∏–Ω—É—Ç",
                    "uk": f"‚úÖ <b>–°—Ç–∞—Ä—É –ø—ñ–¥–ø–∏—Å–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ!</b>\n\nüí≥ <b>–ü–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –Ω–æ–≤–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏:</b>\nüîó <a href='{payment_url_or_error}'>–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –¥–ª—è –æ–ø–ª–∞—Ç–∏</a>\n\n‚ö†Ô∏è –ü–æ—Å–∏–ª–∞–Ω–Ω—è –¥—ñ–π—Å–Ω–µ 30 —Ö–≤–∏–ª–∏–Ω",
                    "en": f"‚úÖ <b>Old subscription cancelled!</b>\n\nüí≥ <b>New subscription link:</b>\nüîó <a href='{payment_url_or_error}'>Click to pay</a>\n\n‚ö†Ô∏è Link expires in 30 minutes"
                }
                
                await callback.message.edit_text(
                    success_texts.get(lang, success_texts["en"]),
                    reply_markup=payment_processing_keyboard(lang),
                    parse_mode="HTML",
                    disable_web_page_preview=True
                )
            else:
                error_texts = {
                    "ru": f"‚ùå <b>–°—Ç–∞—Ä–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, –Ω–æ –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π:</b>\n\n{payment_url_or_error}\n\n–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ –º–µ–Ω—é.",
                    "uk": f"‚ùå <b>–°—Ç–∞—Ä—É –ø—ñ–¥–ø–∏—Å–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ, –∞–ª–µ –ø–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó:</b>\n\n{payment_url_or_error}\n\n–í–∏ –º–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –ø—ñ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ –º–µ–Ω—é.",
                    "en": f"‚ùå <b>Old subscription cancelled, but error creating new one:</b>\n\n{payment_url_or_error}\n\nYou can create a new subscription via menu."
                }
                
                await callback.message.edit_text(
                    error_texts.get(lang, error_texts["en"]),
                    reply_markup=payment_processing_keyboard(lang),
                    parse_mode="HTML"
                )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–ø–≥—Ä–µ–π–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {e}")
            
            error_texts = {
                "ru": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏",
                "uk": "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –ø—ñ–¥–ø–∏—Å–∫–∏",
                "en": "‚ùå An error occurred while changing subscription"
            }
            
            lang = await get_user_language(callback.from_user.id)
            await callback.message.edit_text(
                error_texts.get(lang, error_texts["en"]),
                reply_markup=payment_processing_keyboard(lang)
            )
            await callback.answer()
    
    @staticmethod
    async def _cancel_old_subscription(user_id: int) -> bool:
        """‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û—Ç–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ä—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
            active_subscription = await SubscriptionHandlers._get_active_subscription(user_id)
            
            if not active_subscription:
                logger.warning(f"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return True  # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ - —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º
            
            stripe_subscription_id = active_subscription['stripe_subscription_id']
            
            # –û—Ç–º–µ–Ω—è–µ–º –≤ Stripe –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
            import stripe
            stripe.Subscription.delete(stripe_subscription_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –Ω–∞—à–µ–π –ë–î
            from db_pool import execute_query
            await execute_query("""
                UPDATE user_subscriptions 
                SET status = 'cancelled', cancelled_at = ?
                WHERE stripe_subscription_id = ? AND user_id = ?
            """, (datetime.now(), stripe_subscription_id, user_id))
            
            logger.info(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ {stripe_subscription_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–º–µ–Ω–µ–Ω–∞ –¥–ª—è –∞–ø–≥—Ä–µ–π–¥–∞")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Å—Ç–∞—Ä–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    @staticmethod
    async def handle_purchase_confirmation(callback: types.CallbackQuery, package_id: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫)"""
        try:
            user_id = callback.from_user.id
            lang = await get_user_language(user_id)
            user_name = await get_user_name(user_id) or callback.from_user.first_name or "User"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏
            processing_text = {
                "ru": "‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã...",
                "uk": "‚è≥ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –æ–ø–ª–∞—Ç–∏...",
                "en": "‚è≥ Creating payment link..."
            }
            
            await callback.message.edit_text(
                processing_text.get(lang, processing_text["en"]),
                reply_markup=payment_processing_keyboard(lang)
            )
            await callback.answer()
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –æ–ø–ª–∞—Ç—ã Stripe
            success, payment_url_or_error = await StripeManager.create_checkout_session(
                user_id=user_id,
                package_id=package_id,
                user_name=user_name
            )
            
            if success:
                # –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —Å—Å—ã–ª–∫–∞
                success_text = {
                    "ru": f"üí≥ <b>–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∞!</b>\n\nüîó <a href='{payment_url_or_error}'>–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã</a>\n\n‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 30 –º–∏–Ω—É—Ç\nüí° –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ª–∏–º–∏—Ç—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—á–∏—Å–ª–µ–Ω—ã",
                    "uk": f"üí≥ <b>–ü–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –æ–ø–ª–∞—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–æ!</b>\n\nüîó <a href='{payment_url_or_error}'>–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –¥–ª—è –æ–ø–ª–∞—Ç–∏</a>\n\n‚ö†Ô∏è –ü–æ—Å–∏–ª–∞–Ω–Ω—è –¥—ñ–π—Å–Ω–µ 30 —Ö–≤–∏–ª–∏–Ω\nüí° –ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –ª—ñ–º—ñ—Ç–∏ –±—É–¥—É—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω—ñ",
                    "en": f"üí≥ <b>Payment link created!</b>\n\nüîó <a href='{payment_url_or_error}'>Click to pay</a>\n\n‚ö†Ô∏è Link expires in 30 minutes\nüí° Limits will be automatically credited after payment"
                }
                
                await callback.message.edit_text(
                    success_text.get(lang, success_text["en"]),
                    reply_markup=payment_processing_keyboard(lang),
                    parse_mode="HTML",
                    disable_web_page_preview=True
                )
                
            else:
                # –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
                error_text = {
                    "ru": f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã</b>\n\n{payment_url_or_error}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                    "uk": f"‚ùå <b>–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –æ–ø–ª–∞—Ç–∏</b>\n\n{payment_url_or_error}\n\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.",
                    "en": f"‚ùå <b>Error creating payment link</b>\n\n{payment_url_or_error}\n\nPlease try again or contact support."
                }
                
                await callback.message.edit_text(
                    error_text.get(lang, error_text["en"]),
                    reply_markup=payment_processing_keyboard(lang),
                    parse_mode="HTML"
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ {package_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {e}")
            
            error_text = {
                "ru": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã",
                "uk": "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –æ–ø–ª–∞—Ç–∏",
                "en": "‚ùå An error occurred while creating payment link"
            }
            
            lang = await get_user_language(callback.from_user.id)
            await callback.message.edit_text(
                error_text.get(lang, error_text["en"]),
                reply_markup=payment_processing_keyboard(lang)
            )
            await callback.answer()
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    @staticmethod
    async def show_user_limits(callback: types.CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)"""
        try:
            user_id = callback.from_user.id
            lang = await get_user_language(user_id)
            limits = await SubscriptionManager.get_user_limits(user_id)
            
            if not limits:
                error_text = {
                    "ru": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö",
                    "uk": "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ª—ñ–º—ñ—Ç–∏",
                    "en": "‚ùå Failed to load limits information"
                }
                await callback.answer(error_text.get(lang, error_text["en"]), show_alert=True)
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ç–µ–∫—Å—Ç –æ –ª–∏–º–∏—Ç–∞—Ö
            limits_text = await SubscriptionHandlers._get_detailed_limits_text(limits, lang)
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            back_button = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥" if lang == "ru" else "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" if lang == "uk" else "‚¨ÖÔ∏è Back",
                    callback_data="subscription_menu"
                )]
            ])
            
            await callback.message.edit_text(
                limits_text,
                reply_markup=back_button,
                parse_mode="HTML"
            )
            await callback.answer()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–º–∏—Ç–æ–≤", show_alert=True)
    
    @staticmethod
    async def _get_detailed_limits_text(limits: dict, lang: str) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ç–µ–∫—Å—Ç –æ –ª–∏–º–∏—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)"""
        
        texts = {
            "ru": {
                "title": "üìä <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏–º–∏—Ç–∞—Ö</b>",
                "documents": "üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Å–Ω–∏–º–∫–∏",
                "queries": "ü§ñ GPT-4o –∑–∞–ø—Ä–æ—Å—ã",
                "subscription": "üí≥ –¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏",
                "expires": "‚è∞ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è",
                "unlimited": "‚ôæÔ∏è –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π",
                "free": "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è",
                "subscription_active": "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞",
                "one_time": "üì¶ –†–∞–∑–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞",
                "expired": "‚ùå –ò—Å—Ç–µ–∫–ª–∞",
                "usage_info": "\nüí° <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ª–∏–º–∏—Ç—ã:</b>\n‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ —Å–Ω–∏–º–∫–æ–≤: -1 –¥–æ–∫—É–º–µ–Ω—Ç\n‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å GPT-4o: -1 –∑–∞–ø—Ä–æ—Å\n‚Ä¢ –û–±—ã—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç GPT-4o-mini (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)"
            },
            "uk": {
                "title": "üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ª—ñ–º—ñ—Ç–∏</b>",
                "documents": "üìÑ –î–æ–∫—É–º–µ–Ω—Ç–∏ —Ç–∞ –∑–Ω—ñ–º–∫–∏",
                "queries": "ü§ñ GPT-4o –∑–∞–ø–∏—Ç–∏",
                "subscription": "üí≥ –¢–∏–ø –ø—ñ–¥–ø–∏—Å–∫–∏",
                "expires": "‚è∞ –î–∞—Ç–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è",
                "unlimited": "‚ôæÔ∏è –ë–µ–∑ –æ–±–º–µ–∂–µ–Ω—å",
                "free": "üÜì –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞",
                "subscription_active": "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞ –ø—ñ–¥–ø–∏—Å–∫–∞",
                "one_time": "üì¶ –†–∞–∑–æ–≤–∞ –ø–æ–∫—É–ø–∫–∞",
                "expired": "‚ùå –ó–∞–∫—ñ–Ω—á–∏–ª–∞—Å—è",
                "usage_info": "\nüí° <b>–Ø–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –ª—ñ–º—ñ—Ç–∏:</b>\n‚Ä¢ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ —Ç–∞ –∑–Ω—ñ–º–∫—ñ–≤: -1 –¥–æ–∫—É–º–µ–Ω—Ç\n‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑ GPT-4o: -1 –∑–∞–ø–∏—Ç\n‚Ä¢ –ó–≤–∏—á–∞–π–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å GPT-4o-mini (–±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ)"
            },
            "en": {
                "title": "üìä <b>Detailed limits information</b>",
                "documents": "üìÑ Documents and scans",
                "queries": "ü§ñ GPT-4o queries",
                "subscription": "üí≥ Subscription type",
                "expires": "‚è∞ Expiration date",
                "unlimited": "‚ôæÔ∏è Unlimited",
                "free": "üÜì Free",
                "subscription_active": "‚úÖ Active subscription",
                "one_time": "üì¶ One-time purchase",
                "expired": "‚ùå Expired",
                "usage_info": "\nüí° <b>How limits are used:</b>\n‚Ä¢ Document and scan uploads: -1 document\n‚Ä¢ Detailed answers with GPT-4o: -1 query\n‚Ä¢ Regular answers use GPT-4o-mini (free)"
            }
        }
        
        t = texts.get(lang, texts["ru"])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text_parts = [t["title"], ""]
        
        # –õ–∏–º–∏—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        docs_left = limits.get('documents_left', 0)
        if docs_left > 999:
            docs_display = t["unlimited"]
        else:
            docs_display = f"<b>{docs_left}</b>"
        text_parts.append(f"{t['documents']}: {docs_display}")
        
        # –õ–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
        queries_left = limits.get('gpt4o_queries_left', 0)
        if queries_left > 999:
            queries_display = t["unlimited"]
        else:
            queries_display = f"<b>{queries_left}</b>"
        text_parts.append(f"{t['queries']}: {queries_display}")
        
        text_parts.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        
        # –¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏
        sub_type = limits.get('subscription_type', 'free')
        if sub_type == 'subscription':
            sub_display = t["subscription_active"]
        elif sub_type == 'one_time':
            sub_display = t["one_time"]
        else:
            sub_display = t["free"]
        
        text_parts.append(f"{t['subscription']}: {sub_display}")
        
        # –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è
        expires_at = limits.get('expires_at')
        if expires_at:
            try:
                if isinstance(expires_at, str):
                    expiry_date = datetime.fromisoformat(expires_at.replace('Z', '+00:00'))
                else:
                    expiry_date = expires_at
                if expiry_date > datetime.now():
                    formatted_date = expiry_date.strftime("%d.%m.%Y")
                    text_parts.append(f"{t['expires']}: <b>{formatted_date}</b>")
                else:
                    text_parts.append(f"{t['expires']}: {t['expired']}")
            except:
                pass
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
        text_parts.append(t["usage_info"])
        
        return "\n".join(text_parts)
    
    @staticmethod
    async def handle_cancel_subscription_request(callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–º–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)"""
        try:
            user_id = callback.from_user.id
            lang = await get_user_language(user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
            limits = await SubscriptionManager.get_user_limits(user_id)
            
            if not limits or limits['subscription_type'] != 'subscription':
                no_subscription_text = {
                    "ru": "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã",
                    "uk": "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏ –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è",
                    "en": "‚ùå You don't have an active subscription to cancel"
                }
                await callback.answer(no_subscription_text.get(lang, no_subscription_text["en"]), show_alert=True)
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
            cancel_warning_text = {
                "ru": "‚ö†Ô∏è <b>–û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?\n\nüìù <b>–ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç:</b>\n‚Ä¢ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–æ\n‚Ä¢ –¢–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã –æ—Å—Ç–∞–Ω—É—Ç—Å—è –¥–æ –∫–æ–Ω—Ü–∞ –ø–µ—Ä–∏–æ–¥–∞\n‚Ä¢ –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ –ª–∏–º–∏—Ç—ã —Å–±—Ä–æ—Å—è—Ç—Å—è –¥–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö\n\nüí° –í—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∑–∞–Ω–æ–≤–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
                "uk": "‚ö†Ô∏è <b>–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏</b>\n\n–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É?\n\nüìù <b>–©–æ —Å—Ç–∞–Ω–µ—Ç—å—Å—è:</b>\n‚Ä¢ –ê–≤—Ç–æ–ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –±—É–¥–µ –≤–∏–º–∫–Ω–µ–Ω–æ\n‚Ä¢ –ü–æ—Ç–æ—á–Ω—ñ –ª—ñ–º—ñ—Ç–∏ –∑–∞–ª–∏—à–∞—Ç—å—Å—è –¥–æ –∫—ñ–Ω—Ü—è –ø–µ—Ä—ñ–æ–¥—É\n‚Ä¢ –ü—ñ—Å–ª—è –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –ø–µ—Ä—ñ–æ–¥—É –ª—ñ–º—ñ—Ç–∏ —Å–∫–∏–Ω—É—Ç—å—Å—è –¥–æ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏—Ö\n\nüí° –í–∏ –∑–º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É –∑–Ω–æ–≤—É –≤ –±—É–¥—å-—è–∫–∏–π —á–∞—Å.",
                "en": "‚ö†Ô∏è <b>Cancel subscription</b>\n\nAre you sure you want to cancel your subscription?\n\nüìù <b>What will happen:</b>\n‚Ä¢ Auto-renewal will be disabled\n‚Ä¢ Current limits will remain until the end of the period\n‚Ä¢ After the period ends, limits will reset to free\n\nüí° You can subscribe again at any time."
            }
            
            await callback.message.edit_text(
                cancel_warning_text.get(lang, cancel_warning_text["en"]),
                reply_markup=cancel_subscription_confirmation(lang),
                parse_mode="HTML"
            )
            await callback.answer()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
    
    @staticmethod
    async def handle_cancel_subscription_confirmation(callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)"""
        try:
            user_id = callback.from_user.id
            lang = await get_user_language(user_id)
            
            # –û—Ç–º–µ–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            success, message = await StripeManager.cancel_user_subscription(user_id)
            
            if success:
                success_text = {
                    "ru": f"‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n{message}\n\nüìä –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã –æ—Å—Ç–∞–Ω—É—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.",
                    "uk": f"‚úÖ <b>–ü—ñ–¥–ø–∏—Å–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ</b>\n\n{message}\n\nüìä –í–∞—à—ñ –ø–æ—Ç–æ—á–Ω—ñ –ª—ñ–º—ñ—Ç–∏ –∑–∞–ª–∏—à–∞—Ç—å—Å—è –∞–∫—Ç–∏–≤–Ω–∏–º–∏ –¥–æ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —Å–ø–ª–∞—á–µ–Ω–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É.",
                    "en": f"‚úÖ <b>Subscription cancelled</b>\n\n{message}\n\nüìä Your current limits will remain active until the end of the paid period."
                }
            else:
                success_text = {
                    "ru": f"‚ùå <b>–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n{message}",
                    "uk": f"‚ùå <b>–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏</b>\n\n{message}",
                    "en": f"‚ùå <b>Subscription cancellation error</b>\n\n{message}"
                }
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
            back_button = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–ø–∏—Å–∫–∞–º" if lang == "ru" else "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –ø—ñ–¥–ø–∏—Å–æ–∫" if lang == "uk" else "‚¨ÖÔ∏è Back to subscriptions",
                    callback_data="subscription_menu"
                )]
            ])
            
            await callback.message.edit_text(
                success_text.get(lang, success_text["en"]),
                reply_markup=back_button,
                parse_mode="HTML"
            )
            await callback.answer()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)
    
    @staticmethod
    async def show_subscription_upsell(message, user_id: int, reason: str = "limits_exceeded"):
        """–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ upsell —Å–æ–æ–±—â–µ–Ω–∏—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)"""
        try:
            lang = await get_user_language(user_id)
            
            upsell_texts = {
                "limits_exceeded": {
                    "ru": "üìÑ **–õ–∏–º–∏—Ç—ã –∏—Å—á–µ—Ä–ø–∞–Ω—ã**\n\nüîπ –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ª–∏–º–∏—Ç—ã –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –≥–ª—É–±–æ–∫–∏—Ö –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤\n\nüíé –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –ò–ò-–∞–Ω–∞–ª–∏–∑–∞!",
                    "uk": "üìÑ **–õ—ñ–º—ñ—Ç–∏ –≤–∏—á–µ—Ä–ø–∞–Ω–æ**\n\nüîπ –£ –≤–∞—Å –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—è –ª—ñ–º—ñ—Ç–∏ –Ω–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –∞–±–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≥–ª–∏–±–æ–∫–∏—Ö –º–µ–¥–∏—á–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π\n\nüíé –û—Ñ–æ—Ä–º—ñ—Ç—å –ø—ñ–¥–ø–∏—Å–∫—É –¥–ª—è —Ä–æ–∑—à–∏—Ä–µ–Ω–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π –®–Ü-–∞–Ω–∞–ª—ñ–∑—É!",
                    "en": "üìÑ **Limits exceeded**\n\nüîπ You've run out of limits for document uploads or deep medical responses\n\nüíé Get a subscription for advanced AI analysis capabilities!"
                },
                "better_response": {
                    "ru": "ü§ñ **–•–æ—Ç–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç?**\n\nüîπ –ù–∞—à –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ò–ò –º–æ–∂–µ—Ç –¥–∞—Ç—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∏ —Ç–æ—á–Ω—ã–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑\n\nüíé –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≥–ª—É–±–æ–∫–∏–º –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º –æ—Ç–≤–µ—Ç–∞–º!",
                    "uk": "ü§ñ **–•–æ—á–µ—Ç–µ –±—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å?**\n\nüîπ –ù–∞—à –ø—Ä–æ–≥—Ä–µ—Å–∏–≤–Ω–∏–π –®–Ü –º–æ–∂–µ –¥–∞—Ç–∏ –±—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω–∏–π —Ç–∞ —Ç–æ—á–Ω–∏–π –º–µ–¥–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑\n\nüíé –û—Ñ–æ—Ä–º—ñ—Ç—å –ø—ñ–¥–ø–∏—Å–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –≥–ª–∏–±–æ–∫–∏—Ö –º–µ–¥–∏—á–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π!",
                    "en": "ü§ñ **Want a more detailed response?**\n\nüîπ Our advanced AI can provide more detailed and accurate medical analysis\n\nüíé Get a subscription for access to deep medical responses!"
                }
            }
            
            text = upsell_texts.get(reason, upsell_texts["limits_exceeded"])
            
            await message.answer(
                text.get(lang, text["en"]),
                reply_markup=subscription_upsell_keyboard(lang),
                parse_mode="HTML"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ upsell —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    @staticmethod
    async def dismiss_upsell(callback: types.CallbackQuery):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç upsell —Å–æ–æ–±—â–µ–Ω–∏–µ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)"""
        try:
            await callback.message.delete()
            await callback.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è upsell —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await callback.answer()

# –°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è upsell —Å–æ–æ–±—â–µ–Ω–∏–π (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
class UpsellTracker:
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø–æ–∫–∞–∑ upsell —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    
    def __init__(self):
        self.user_message_counts = {}  # user_id: count
        self.user_last_upsell = {}     # user_id: timestamp
    
    def should_show_upsell(self, user_id: int) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å upsell —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        current_count = self.user_message_counts.get(user_id, 0)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
        if current_count >= 5:
            self.user_message_counts[user_id] = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
            self.user_last_upsell[user_id] = datetime.now().timestamp()
            return True
        
        return False
    
    def increment_message_count(self, user_id: int):
        """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.user_message_counts[user_id] = self.user_message_counts.get(user_id, 0) + 1
    
    def reset_count(self, user_id: int):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏)"""
        self.user_message_counts[user_id] = 0
        if user_id in self.user_last_upsell:
            del self.user_last_upsell[user_id]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç—Ä–µ–∫–µ—Ä–∞
upsell_tracker = UpsellTracker()