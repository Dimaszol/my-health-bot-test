# user_state_manager.py - –°–æ–∑–¥–∞–π —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞

import asyncio
from datetime import datetime, timedelta
from typing import Dict, Any, Optional
import logging

logger = logging.getLogger(__name__)

class UserStateManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–æ–π
    –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —É—Ç–µ—á–∫—É –ø–∞–º—è—Ç–∏ –∏–∑ registration.py
    """
    
    def __init__(self, ttl_minutes: int = 60):
        self.states: Dict[int, Any] = {}
        self.timestamps: Dict[int, datetime] = {}
        self.ttl = timedelta(minutes=ttl_minutes)
        self.cleanup_task = None
        logger.info(f"UserStateManager initialized with TTL={ttl_minutes} minutes")
    
    def set_state(self, user_id: int, state: Any):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.states[user_id] = state
        self.timestamps[user_id] = datetime.now()
        logger.debug(f"State set for user {user_id}: {type(state).__name__}")
    
    def get_state(self, user_id: int) -> Optional[Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id in self.states:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è
            if datetime.now() - self.timestamps[user_id] > self.ttl:
                self.clear_state(user_id)
                logger.debug(f"State expired and cleared for user {user_id}")
                return None
            return self.states[user_id]
        return None
    
    def clear_state(self, user_id: int):
        """–û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.states.pop(user_id, None)
        self.timestamps.pop(user_id, None)
        logger.debug(f"State manually cleared for user {user_id}")
    
    async def start_cleanup_loop(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É"""
        if self.cleanup_task is None:
            self.cleanup_task = asyncio.create_task(self._cleanup_loop())
            logger.info("‚úÖ User state cleanup loop started")
    
    async def stop_cleanup_loop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É"""
        if self.cleanup_task:
            self.cleanup_task.cancel()
            try:
                await self.cleanup_task
            except asyncio.CancelledError:
                pass
            self.cleanup_task = None
            logger.info("üõë User state cleanup loop stopped")
    
    async def _cleanup_loop(self):
        """–¶–∏–∫–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç"""
        while True:
            try:
                await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
                await self._cleanup_expired()
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"Error in cleanup loop: {e}")
    
    async def _cleanup_expired(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        now = datetime.now()
        expired_users = [
            user_id for user_id, timestamp in self.timestamps.items()
            if now - timestamp > self.ttl
        ]
        
        for user_id in expired_users:
            self.clear_state(user_id)
        
        if expired_users:
            logger.info(f"üßπ Cleaned up {len(expired_users)} expired user states")
    
    def get_stats(self) -> Dict[str, int]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        return {
            "total_states": len(self.states),
            "active_timestamps": len(self.timestamps),
            "cleanup_running": self.cleanup_task is not None
        }

# ‚úÖ –ì–õ–û–ë–ê–õ–¨–ù–´–ô –ú–ï–ù–ï–î–ñ–ï–† (–∑–∞–º–µ–Ω—è–µ—Ç user_states —Å–ª–æ–≤–∞—Ä—å)
user_state_manager = UserStateManager(ttl_minutes=60)

# ‚úÖ –§–£–ù–ö–¶–ò–ò-–û–ë–ï–†–¢–ö–ò –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
def set_user_state(user_id: int, state: Any):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_state_manager.set_state(user_id, state)

def get_user_state(user_id: int) -> Optional[Any]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return user_state_manager.get_state(user_id)

def clear_user_state(user_id: int):
    """–û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_state_manager.clear_state(user_id)

# ‚úÖ –°–õ–û–í–ê–†–¨ –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò (—á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥)
class StateDict:
    """–û–±—ä–µ–∫—Ç –∫–æ—Ç–æ—Ä—ã–π –≤–µ–¥–µ—Ç —Å–µ–±—è –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç UserStateManager"""
    
    def __getitem__(self, user_id: int):
        return user_state_manager.get_state(user_id)
    
    def __setitem__(self, user_id: int, value: Any):
        user_state_manager.set_state(user_id, value)
    
    def get(self, user_id: int, default=None):
        state = user_state_manager.get_state(user_id)
        return state if state is not None else default
    
    def pop(self, user_id: int, default=None):
        state = user_state_manager.get_state(user_id)
        if state is not None:
            user_state_manager.clear_state(user_id)
            return state
        return default

# ‚úÖ –°–û–ó–î–ê–ï–ú –°–û–í–ú–ï–°–¢–ò–ú–´–ô –û–ë–™–ï–ö–¢
user_states = StateDict()