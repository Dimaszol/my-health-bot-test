# photo_analyzer.py - –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å –≤–æ–ø—Ä–æ—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

import os
import logging
from typing import Optional, Tuple
from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from gemini_analyzer import send_to_gemini_vision
from db_postgresql import get_user_language, t
from subscription_manager import check_gpt4o_limit, spend_gpt4o_limit
from file_utils import create_simple_file_path, validate_file_size
from notification_system import NotificationSystem
from registration import user_states

logger = logging.getLogger(__name__)

async def handle_photo_analysis(message: types.Message, bot):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    """
    user_id = message.from_user.id
    lang = await get_user_language(user_id)
    
    try:
        print(f"\nüì∏ –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # ‚úÖ –ù–ê–ü–†–Ø–ú–£–Æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –∏–∑ –±–∞–∑—ã (–±–µ–∑ –ª–∏—à–Ω–∏—Ö –≤—ã–∑–æ–≤–æ–≤)
        from db_postgresql import get_user_limits
        limits = await get_user_limits(user_id)
        gpt4o_limit = limits.get('gpt4o_queries_left', 0)
        
        print(f"üîç –õ–∏–º–∏—Ç—ã gpt4o_queries_left: {gpt4o_limit}")
        
        if gpt4o_limit <= 0:
            print(f"üÜì –ù–µ—Ç –ª–∏–º–∏—Ç–æ–≤ –Ω–∞ –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            # ‚úÖ –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, –∫–∞–∫ –≤ main.py
            can_analyze = await NotificationSystem.check_and_notify_limits(
                message, user_id, action_type="image"
            )
            
            if not can_analyze:
                return
        
        print(f"üíé –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –µ—Å—Ç—å –ª–∏–º–∏—Ç—ã ({gpt4o_limit}), –Ω–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ (–±–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ)
        if not message.photo:
            await message.answer(t("please_send_file", lang))
            return
        
        photo = message.photo[-1]  # –°–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        file_info = await bot.get_file(photo.file_id)
        file_path = file_info.file_path
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        local_file = create_simple_file_path(user_id, f"photo_{photo.file_id[:8]}.jpg")
        print(f"üíæ –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ: {local_file}")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        print("‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞—é —Ñ–æ—Ç–æ...")
        await bot.download_file(file_path, destination=local_file)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
        if not validate_file_size(local_file):
            os.remove(local_file)
            await message.answer(t("photo_too_large", lang))
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_states[user_id] = {
            "type": "awaiting_photo_question",
            "photo_path": local_file,
            "photo_file_id": photo.file_id
        }
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å
        await message.answer(
            f"{t('photo_saved_for_analysis', lang)}\n\n"
            f"{t('photo_question_prompt', lang)}\n\n"
            f"{t('photo_question_examples', lang)}",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=t("cancel_analysis", lang), callback_data="cancel_photo_analysis")]
            ])
        )
        
        print("‚úÖ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –æ–∂–∏–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
        await message.answer(t("photo_analysis_error", lang))
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if user_id in user_states:
            user_states[user_id] = None

async def handle_photo_question(message: types.Message, bot):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Ñ–æ—Ç–æ
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    """
    user_id = message.from_user.id
    lang = await get_user_language(user_id)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state = user_states.get(user_id)
        if not state or state.get("type") != "awaiting_photo_question":
            await message.answer("‚ö†Ô∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –∑–∞–Ω–æ–≤–æ.")
            return
        
        photo_path = state.get("photo_path")
        user_question = message.text
        
        if not photo_path or not os.path.exists(photo_path):
            await message.answer("‚ö†Ô∏è –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –∑–∞–Ω–æ–≤–æ.")
            user_states[user_id] = None
            return
        
        print(f"\nü§î –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_question}")
        print(f"üì∏ –ü—É—Ç—å –∫ —Ñ–æ—Ç–æ: {photo_path}")
        
        # ‚úÖ –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        from db_postgresql import save_message
        await save_message(user_id, "user", user_question)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        processing_msg = await message.answer(
            t("photo_analyzing", lang)
            # ‚úÖ –£–ë–ò–†–ê–ï–ú reply_markup=types.ReplyKeyboardRemove() —á—Ç–æ–±—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –ø—Ä–æ–ø–∞–¥–∞–ª–∞
        )
        
        # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context = await prepare_user_context(user_id, lang)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç —Å –≤–æ–ø—Ä–æ—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        custom_prompt = create_photo_analysis_prompt(user_question, context, lang)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∞–Ω–∞–ª–∏–∑ –≤ Gemini
        analysis_result, error_message = await send_to_gemini_vision(
            photo_path, lang, custom_prompt
        )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
        try:
            await bot.delete_message(message.chat.id, processing_msg.message_id)
        except:
            pass
        
        if error_message:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {error_message}")
            return
        
        if not analysis_result:
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.")
            return
        
        # ‚úÖ –í–ê–ñ–ù–û: –¢—Ä–∞—Ç–∏–º –ª–∏–º–∏—Ç –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–Ω–∞–ø—Ä—è–º—É—é –≤ –±–∞–∑–µ)
        from db_postgresql import decrease_user_limit
        await decrease_user_limit(user_id, "gpt4o_queries", 1)
        print(f"üíé –õ–∏–º–∏—Ç –ø–æ—Ç—Ä–∞—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ)")
        
        # ‚úÖ –í–ê–ñ–ù–û: –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –î–û –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
        await cleanup_photo_analysis(user_id, photo_path)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        await send_analysis_result(message, analysis_result, lang)
        
        # ‚úÖ –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
        from db_postgresql import save_message
        await save_message(user_id, "assistant", f"–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {analysis_result[:500]}...")
        
        print("‚úÖ –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–æ—Ç–æ: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await cleanup_photo_analysis(user_id, photo_path if 'photo_path' in locals() else None)

async def prepare_user_context(user_id: int, lang: str) -> str:
    """
    –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    """
    try:
        # ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –§–£–ù–ö–¶–ò–ò
        from save_utils import format_user_profile
        from db_postgresql import get_last_messages
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —á–∞—Ç–µ)
        profile_text = await format_user_profile(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —á–∞—Ç–µ)
        recent_messages = await get_last_messages(user_id, limit=6)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        context_lines = []
        for msg in recent_messages:
            if isinstance(msg, (tuple, list)) and len(msg) >= 2:
                role = "USER" if msg[0] == 'user' else "BOT"
                content = str(msg[1])[:100]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                context_lines.append(f"{role}: {content}")
        
        context_text = "\n".join(context_lines) if context_lines else "–ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context_parts = []
        if profile_text and profile_text != "–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ü–∏–µ–Ω—Ç–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω":
            context_parts.append(f"üìå –ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ü–∏–µ–Ω—Ç–∞:\n{profile_text}")
        
        if context_text and context_text != "–ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π":
            context_parts.append(f"üí¨ –ù–µ–¥–∞–≤–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n{context_text}")
        
        return "\n\n".join(context_parts) if context_parts else "–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return "–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"

def create_photo_analysis_prompt(user_question: str, context: str, lang: str) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ —Å —É—á–µ—Ç–æ–º –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_question: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lang: –Ø–∑—ã–∫ –æ—Ç–≤–µ—Ç–∞
        
    Returns:
        str: –ì–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
    """
    lang_names = {
        'ru': 'Russian',
        'uk': 'Ukrainian', 
        'en': 'English'
    }
    response_language = lang_names.get(lang, 'Russian')
    
    return f"""You are an experienced medical consultant analyzing images.

USER QUESTION: "{user_question}"

USER CONTEXT:
{context}

INSTRUCTIONS:
1. Analyze the image in the context of the user's specific question
2. Consider the provided user information when giving recommendations  
3. Give a comprehensive but understandable answer
4. If this appears to be a medical condition, suggest whether medical consultation is needed
5. Be supportive and informative, but avoid definitive diagnoses
6. Always respond in {response_language} language

Focus your analysis specifically on answering the user's question while considering their medical context."""

async def send_analysis_result(message: types.Message, analysis_result: str, lang: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        analysis_result: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        lang: –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        result_text = f"{t('photo_analysis_result', lang)}\n\n{analysis_result}"
        
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
        if len(result_text) > 4000:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
            await message.answer(result_text[:4000] + "...", parse_mode="HTML")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏
            remaining_text = result_text[4000:]
            while remaining_text:
                chunk = remaining_text[:4000]
                remaining_text = remaining_text[4000:]
                await message.answer(chunk, parse_mode="HTML")
        else:
            await message.answer(result_text, parse_mode="HTML")
        
        # ‚úÖ –£–±–∏—Ä–∞–µ–º disclaimer - –ò–ò –∏ —Ç–∞–∫ –ø–∏—à–µ—Ç –ø—Ä–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤—Ä–∞—á–∞
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        await message.answer("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.")

async def cleanup_photo_analysis(user_id: int, photo_path: Optional[str] = None):
    """
    –û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        photo_path: –ü—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É —Ñ–æ—Ç–æ
    """
    try:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_states[user_id] = None
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if photo_path and os.path.exists(photo_path):
            os.remove(photo_path)
            print(f"üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {photo_path}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ: {e}")

async def cancel_photo_analysis(callback_query: types.CallbackQuery):
    """
    –û—Ç–º–µ–Ω—è–µ—Ç –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        callback_query: Callback query –æ—Ç–º–µ–Ω—ã
    """
    user_id = callback_query.from_user.id
    lang = await get_user_language(user_id)
    
    try:
        state = user_states.get(user_id)
        photo_path = None
        
        if state and state.get("type") == "awaiting_photo_question":
            photo_path = state.get("photo_path")
        
        await cleanup_photo_analysis(user_id, photo_path)
        
        await callback_query.message.edit_text(
            "‚ùå –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ –æ—Ç–º–µ–Ω–µ–Ω.",
            reply_markup=None
        )
        
        await callback_query.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã")