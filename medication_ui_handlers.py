# medication_ui_handlers.py - –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞—Ö

from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from db_postgresql import get_user_language, t, format_medications_schedule
from medication_notifications import get_user_notification_settings, toggle_user_medication_notifications, set_user_medication_timezone

# ================================
# 1. –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –ö–õ–ê–í–ò–ê–¢–£–†–ê –î–õ–Ø –õ–ï–ö–ê–†–°–¢–í
# ================================

async def medications_keyboard_with_notifications(lang: str, user_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    settings = await get_user_notification_settings(user_id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if settings['enabled']:
        notification_text = t("notifications_enabled", lang)  
        notification_callback = "toggle_med_notifications_off"
    else:
        notification_text = t("notifications_disabled", lang) 
        notification_callback = "toggle_med_notifications_on"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=t("edit_schedule_button", lang),
            callback_data="edit_meds"
        )],
        [InlineKeyboardButton(
            text=f"{notification_text}",
            callback_data=notification_callback
        ),
        InlineKeyboardButton(
            text=t("timezone_settings", lang),
            callback_data="medication_timezone_settings"
        )]
    ])
    
    return keyboard

# ================================
# 2. –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK'–û–í
# ================================

async def handle_toggle_medication_notifications(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞—Ö"""
    user_id = callback.from_user.id
    lang = await get_user_language(user_id)
    
    try:
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        new_state = await toggle_user_medication_notifications(user_id)
        
        if new_state:
            status_text = t("notifications_enabled_success", lang)
            # –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=t("setup_timezone", lang),
                    callback_data="medication_timezone_setup"
                )],
                [InlineKeyboardButton(
                    text=t("back_to_medications", lang),
                    callback_data="back_to_medications"
                )]
            ])
            await callback.message.edit_text(
                f"{status_text}\n\n{t('timezone_setup_suggestion', lang)}",
                reply_markup=keyboard
            )
        else:
            status_text = t("notifications_disabled_success", lang)
            await callback.message.edit_text(status_text)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –ª–µ–∫–∞—Ä—Å—Ç–≤ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            import asyncio
            await asyncio.sleep(2)
            await show_medications_with_notifications(callback.message, user_id, edit=True)
    
    except Exception as e:
        await callback.message.edit_text(t("notifications_toggle_error", lang))
    
    await callback.answer()

async def handle_timezone_setup(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
    user_id = callback.from_user.id
    lang = await get_user_language(user_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
    timezone_keyboard = InlineKeyboardMarkup(inline_keyboard=[
         # –†—è–¥ 1: –ï–≤—Ä–æ–ø–∞
        [InlineKeyboardButton(text=f"üá¨üáß {t('tz_london_gmt', lang)} (UTC+0)", callback_data="set_tz_0"),
         InlineKeyboardButton(text=f"üá™üá∫ {t('tz_europe', lang)} (UTC+1)", callback_data="set_tz_60")],
        [InlineKeyboardButton(text=f"üá∫üá¶ {t('tz_kyiv', lang)} (UTC+2)", callback_data="set_tz_120"),
         InlineKeyboardButton(text=f"üá∑üá∫ {t('tz_moscow', lang)} (UTC+3)", callback_data="set_tz_180")],
        [InlineKeyboardButton(text=f"üá∑üá∫ {t('tz_samara', lang)} (UTC+4)", callback_data="set_tz_240"),
         InlineKeyboardButton(text=f"üá∫üáø {t('tz_tashkent', lang)} (UTC+5)", callback_data="set_tz_300")],
        
        # –†—è–¥ 2: –ê–∑–∏—è  
        [InlineKeyboardButton(text=f"üá∞üáø {t('tz_almaty', lang)} (UTC+6)", callback_data="set_tz_360"),
         InlineKeyboardButton(text=f"üáπüá≠ {t('tz_bangkok', lang)} (UTC+7)", callback_data="set_tz_420")],
        [InlineKeyboardButton(text=f"üá®üá≥ {t('tz_beijing', lang)} (UTC+8)", callback_data="set_tz_480"),
         InlineKeyboardButton(text=f"üáØüáµ {t('tz_tokyo', lang)} (UTC+9)", callback_data="set_tz_540")],
        [InlineKeyboardButton(text=f"üá¶üá∫ {t('tz_sydney', lang)} (UTC+11)", callback_data="set_tz_660"),
         InlineKeyboardButton(text=f"üá∫üá∏ {t('tz_usa_east', lang)} (UTC-5)", callback_data="set_tz_-300")],
        
        # –†—è–¥ 3: –ê–º–µ—Ä–∏–∫–∞
        [InlineKeyboardButton(text=f"üá∫üá∏ {t('tz_usa_central', lang)} (UTC-6)", callback_data="set_tz_-360"),
         InlineKeyboardButton(text=f"üá∫üá∏ {t('tz_usa_west', lang)} (UTC-8)", callback_data="set_tz_-480")],
        
        # –ù–∞–∑–∞–¥
        [InlineKeyboardButton(text=t("back_button", lang), callback_data="back_to_medications")]
    ])
    
    await callback.message.edit_text(
        t("select_timezone", lang),
        reply_markup=timezone_keyboard
    )
    await callback.answer()

async def handle_timezone_set(callback: types.CallbackQuery, offset_minutes: int, timezone_name: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
    user_id = callback.from_user.id
    lang = await get_user_language(user_id)
    
    try:
        await set_user_medication_timezone(user_id, offset_minutes, timezone_name)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        hours = offset_minutes // 60
        
        if hours == 0:
            offset_display = "¬±0"
        elif hours > 0:
            offset_display = f"+{hours}"
        else:
            offset_display = str(hours)
        
        await callback.message.edit_text(
            t("timezone_set_success", lang, timezone=timezone_name, offset=offset_display),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=t("back_to_medications", lang),
                    callback_data="back_to_medications"
                )]
            ])
        )
        
    except Exception as e:
        await callback.message.edit_text(t("timezone_set_error", lang))
    
    await callback.answer()

async def show_medications_with_notifications(message: types.Message, user_id: int, edit: bool = False):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–¥–µ–ª –ª–µ–∫–∞—Ä—Å—Ç–≤ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
    lang = await get_user_language(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤
    schedule_text = await format_medications_schedule(user_id)
    if not schedule_text:
        schedule_text = t("schedule_empty", lang)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    settings = await get_user_notification_settings(user_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö
    if settings['enabled']:
        hours = settings['timezone_offset'] // 60
        
        # –ö—Ä–∞—Å–∏–≤–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
        if hours == 0:
            offset_display = "¬±0"
        elif hours > 0:
            offset_display = f"+{hours}"
        else:
            offset_display = str(hours)
            
        notification_info = t("notifications_status_enabled", lang, 
                             timezone=settings['timezone_name'], 
                             offset=offset_display)
    else:
        notification_info = t("notifications_status_disabled", lang)
    
    full_text = f"""üóì <b>{t('your_schedule', lang)}</b>

<pre>{schedule_text}</pre>

{notification_info}"""
    
    keyboard = await medications_keyboard_with_notifications(lang, user_id)
    
    if edit:
        await message.edit_text(full_text, reply_markup=keyboard, parse_mode="HTML")
    else:
        await message.answer(full_text, reply_markup=keyboard, parse_mode="HTML")

# ================================
# 3. –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø MAIN.PY
# ================================

async def handle_medication_callbacks(callback: types.CallbackQuery):
    """–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –¥–ª—è –ª–µ–∫–∞—Ä—Å—Ç–≤"""
    
    if callback.data in ["toggle_med_notifications_on", "toggle_med_notifications_off"]:
        await handle_toggle_medication_notifications(callback)
    
    elif callback.data == "medication_timezone_settings":
        await handle_timezone_setup(callback)
    
    elif callback.data.startswith("set_tz_"):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º offset –∏–∑ callback_data (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º)
        offset_str = callback.data.replace("set_tz_", "")
        offset_minutes = int(offset_str)
        
        timezone_names = {
            -480: t("tz_usa_west", await get_user_language(user_id)),       # UTC-8
            -360: t("tz_usa_central", await get_user_language(user_id)),    # UTC-6
            -300: t("tz_usa_east", await get_user_language(user_id)),       # UTC-5
            0: t("tz_london_gmt", await get_user_language(user_id)),        # UTC+0
            60: t("tz_europe", await get_user_language(user_id)),           # UTC+1
            120: t("tz_kyiv", await get_user_language(user_id)),            # UTC+2
            180: t("tz_moscow", await get_user_language(user_id)),          # UTC+3
            240: t("tz_samara", await get_user_language(user_id)),          # UTC+4
            300: t("tz_tashkent", await get_user_language(user_id)),        # UTC+5
            360: t("tz_almaty", await get_user_language(user_id)),          # UTC+6
            420: t("tz_bangkok", await get_user_language(user_id)),         # UTC+7
            480: t("tz_beijing", await get_user_language(user_id)),         # UTC+8
            540: t("tz_tokyo", await get_user_language(user_id)),           # UTC+9
            660: t("tz_sydney", await get_user_language(user_id))           # UTC+11
        }
        timezone_name = timezone_names.get(offset_minutes, "Manual")
        await handle_timezone_set(callback, offset_minutes, timezone_name)
    
    elif callback.data == "back_to_medications":
        await show_medications_with_notifications(callback.message, callback.from_user.id, edit=True)
    
    elif callback.data == "turn_off_med_notifications":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ —Å–∞–º–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        user_id = callback.from_user.id
        lang = await get_user_language(user_id)
        
        try:
            # –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            await toggle_user_medication_notifications(user_id)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await callback.message.edit_text(
                t("notifications_turned_off_from_reminder", lang),
                reply_markup=None
            )
            await callback.answer(t("notifications_disabled_success", lang), show_alert=True)
            
        except Exception as e:
            await callback.answer(t("notifications_toggle_error", lang), show_alert=True)
    
    elif callback.data == "medication_settings":
        await show_medications_with_notifications(callback.message, callback.from_user.id, edit=True)

# ================================
# 4. –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–£–©–ï–°–¢–í–£–Æ–©–ï–ì–û –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê
# ================================

# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–º–µ–Ω—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ show_medications_schedule –≤ main.py
async def show_medications_schedule_updated(message: types.Message):
    """–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤"""
    user_id = message.from_user.id
    await show_medications_with_notifications(message, user_id)