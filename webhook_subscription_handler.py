# webhook_subscription_handler.py - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫

import json
import logging
from datetime import datetime
from aiohttp import web
from subscription_manager import SubscriptionManager
from db_postgresql import get_user_name, get_user_language
from notification_system import NotificationSystem

logger = logging.getLogger(__name__)

class SubscriptionWebhookHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –¥–ª—è —Å–æ–±—ã—Ç–∏–π –ø–æ–¥–ø–∏—Å–æ–∫ –æ—Ç Make.com"""
    
    def __init__(self, bot):
        self.bot = bot
    
    async def handle_subscription_webhook(self, request):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook –æ—Ç Make.com —Å —Å–æ–±—ã—Ç–∏—è–º–∏ Stripe
        
        –û–∂–∏–¥–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:
        –ü–æ–¥–ø–∏—Å–∫–∏: {
            "event_type": "invoice.payment_succeeded",
            "user_id": "cus_...",
            "subscription_id": "sub_...", 
            "amount": "399"
        }
        
        –†–∞–∑–æ–≤—ã–µ –ø–ª–∞—Ç–µ–∂–∏: {
            "event_type": "checkout.session.completed",
            "session_id": "cs_...",
            "user_id": "123456",
            "amount": "199"
        }
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Make.com
            data = await request.json()
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º print –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            print(f"üéØ –ü–æ–ª—É—á–µ–Ω webhook –æ—Ç Make.com: {json.dumps(data, indent=2)}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            logger.info(f"üéØ –ü–æ–ª—É—á–µ–Ω webhook –æ—Ç Make.com: {json.dumps(data, indent=2)}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            event_type = data.get('event_type')
            stripe_customer_id = data.get('user_id')
            subscription_id = data.get('subscription_id')
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º amount –≤ —á–∏—Å–ª–æ (Make.com –ø–µ—Ä–µ–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É)
            amount_raw = data.get('amount', 0)
            try:
                amount = int(amount_raw) if amount_raw else 0
            except (ValueError, TypeError):
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ amount: {amount_raw}")
                amount = 0
            
            if not event_type:
                return web.json_response(
                    {"status": "error", "message": "Missing event_type"}, 
                    status=400
                )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π
            if event_type == 'invoice.payment_succeeded':
                result = await self._handle_successful_payment(
                    stripe_customer_id, subscription_id, amount
                )
            elif event_type == 'invoice.payment_failed':
                result = await self._handle_failed_payment(
                    stripe_customer_id, subscription_id
                )
            elif event_type == 'invoice.created':
                result = await self._handle_invoice_created(
                    stripe_customer_id, subscription_id
                )
            elif event_type == 'checkout.session.completed':
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–∞–∑–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
                session_id = data.get('session_id')
                user_id_from_metadata = data.get('user_id')
                
                if session_id:
                    print(f"üí≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {session_id}")
                    
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É
                    try:
                        from stripe_manager import StripeManager
                        success, message = await StripeManager.handle_successful_payment(session_id)
                        
                        if success:
                            result = {
                                "status": "success",
                                "message": f"One-time payment processed: {message}",
                                "session_id": session_id
                            }
                            print(f"‚úÖ –†–∞–∑–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ {session_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ—Å–ª–∏ –µ—Å—Ç—å user_id
                            if user_id_from_metadata:
                                try:
                                    await self.bot.send_message(
                                        int(user_id_from_metadata),
                                        f"‚úÖ <b>–ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!</b>\n\n"
                                        f"üí≥ –†–∞–∑–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
                                        f"üéâ –í–∞—à–∏ –ª–∏–º–∏—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\n"
                                        f"üìù {message}",
                                        parse_mode="HTML"
                                    )
                                    print(f"üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_from_metadata}")
                                except Exception as notify_error:
                                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notify_error}")
                        else:
                            result = {
                                "status": "error", 
                                "message": f"Payment processing failed: {message}"
                            }
                            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {message}")
                    except Exception as e:
                        result = {
                            "status": "error",
                            "message": f"Exception during payment processing: {str(e)}"
                        }
                        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
                else:
                    result = {"status": "error", "message": "Missing session_id"}
                    print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç session_id –≤ –¥–∞–Ω–Ω—ã—Ö webhook")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è: {event_type}")
                result = {"status": "ignored", "message": f"Event {event_type} ignored"}
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            return web.json_response({
                "status": "success",
                "message": "Webhook processed successfully",
                "event_type": event_type,
                "result": result,
                "processed_at": datetime.now().isoformat()
            })
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
            return web.json_response(
                {"status": "error", "message": str(e)}, 
                status=500
            )
    
    async def _handle_successful_payment(self, stripe_customer_id, subscription_id, amount):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º –¥–µ–ª–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ amount —É–∂–µ –≤ —Ü–µ–Ω—Ç–∞—Ö
            print(f"üí≥ –£—Å–ø–µ—à–Ω–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ: customer={stripe_customer_id}, amount=${amount/100}")
            logger.info(f"üí≥ –£—Å–ø–µ—à–Ω–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ: customer={stripe_customer_id}, amount=${amount/100}")
            
            # TODO: –ù–∞–π—Ç–∏ user_id –ø–æ stripe_customer_id
            user_id = int(stripe_customer_id)
            
            if not user_id:
                logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è customer {stripe_customer_id}")
                return {"status": "error", "message": "User not found"}
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ —Å—É–º–º–µ
            package_id = self._determine_package_by_amount(amount)
            
            # –ü–æ–ø–æ–ª–Ω—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = await SubscriptionManager.purchase_package(
                user_id=user_id,
                package_id=package_id,
                payment_method='stripe_subscription'
            )
            
            if result['success']:
                from db_pool import execute_query
                await execute_query("""
                    INSERT OR REPLACE INTO user_subscriptions 
                    (user_id, stripe_subscription_id, package_id, status, created_at)
                    VALUES (?, ?, ?, 'active', ?)
                """, (user_id, subscription_id, package_id, datetime.now()))
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await self._send_renewal_notification(user_id, package_id)
                
                logger.info(f"‚úÖ –õ–∏–º–∏—Ç—ã –ø–æ–ø–æ–ª–Ω–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return {
                    "status": "success",
                    "message": "Subscription renewed",
                    "user_id": user_id,
                    "package_id": package_id,
                    "new_limits": {
                        "documents": result.get('new_documents'),
                        "queries": result.get('new_queries')
                    }
                }
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤: {result.get('error')}")
                return {"status": "error", "message": result.get('error')}
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return {"status": "error", "message": str(e)}
    
    async def _handle_failed_payment(self, stripe_customer_id, subscription_id):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ—É–¥–∞—á–Ω–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            logger.warning(f"üí≥ –ù–µ—É–¥–∞—á–Ω–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ: customer={stripe_customer_id}")
            
            user_id = await self._get_user_id_by_stripe_customer(stripe_customer_id)
            
            if user_id:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ —Å –æ–ø–ª–∞—Ç–æ–π
                await self._send_payment_failed_notification(user_id)
                
                logger.info(f"üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ—É–¥–∞—á–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                return {
                    "status": "success",
                    "message": "Payment failed notification sent",
                    "user_id": user_id
                }
            else:
                return {"status": "error", "message": "User not found"}
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return {"status": "error", "message": str(e)}
    
    async def _handle_invoice_created(self, stripe_customer_id, subscription_id):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—á–µ—Ç–∞"""
        try:
            logger.info(f"üìÑ –°–æ–∑–¥–∞–Ω —Å—á–µ—Ç: customer={stripe_customer_id}")
            
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            
            return {
                "status": "success",
                "message": "Invoice created logged"
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞: {e}")
            return {"status": "error", "message": str(e)}
    
    async def _get_user_id_by_stripe_customer(self, stripe_customer_id):
        """
        –ù–∞—Ö–æ–¥–∏—Ç user_id –ø–æ stripe_customer_id
        
        TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –≤ –ë–î
        –ù—É–∂–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å–≤—è–∑–∏ stripe_customer_id -> user_id
        """
        # –ó–ê–ì–õ–£–®–ö–ê: –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if stripe_customer_id:
            return int(stripe_customer_id)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π ID
        return None
    
    def _determine_package_by_amount(self, amount_cents):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –ø–∞–∫–µ—Ç–∞ –ø–æ —Å—É–º–º–µ –ø–ª–∞—Ç–µ–∂–∞"""
        if amount_cents == 399:  # $3.99
            return "basic_sub"
        elif amount_cents == 999:  # $9.99
            return "premium_sub"
        elif amount_cents == 199:  # $1.99
            return "extra_pack"
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞: ${amount_cents/100}")
            return "basic_sub"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    async def _send_renewal_notification(self, user_id, package_id):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø—Ä–æ–¥–ª–µ–Ω–∏–∏"""
        try:
            name = await get_user_name(user_id)
            lang = await get_user_language(user_id)
            
            messages = {
                "ru": f"‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ {package_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞! –õ–∏–º–∏—Ç—ã –ø–æ–ø–æ–ª–Ω–µ–Ω—ã.",
                "uk": f"‚úÖ –í–∞—à—É –ø—ñ–¥–ø–∏—Å–∫—É {package_id} —É—Å–ø—ñ—à–Ω–æ –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–æ! –õ—ñ–º—ñ—Ç–∏ –ø–æ–ø–æ–≤–Ω–µ–Ω–æ.",
                "en": f"‚úÖ Your {package_id} subscription has been renewed! Limits replenished."
            }
            
            message = messages.get(lang, messages["ru"])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
            await self.bot.send_message(user_id, message)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏: {e}")
    
    async def _send_payment_failed_notification(self, user_id):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ—É–¥–∞—á–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ"""
        try:
            name = await get_user_name(user_id)
            lang = await get_user_language(user_id)
            
            messages = {
                "ru": "‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Stripe.",
                "uk": "‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ –∑ –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è–º –ø—ñ–¥–ø–∏—Å–∫–∏. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–∞–Ω—ñ –∫–∞—Ä—Ç–∫–∏ –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö Stripe.",
                "en": "‚ö†Ô∏è Subscription renewal failed. Please check your card details in Stripe settings."
            }
            
            message = messages.get(lang, messages["ru"])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
            await self.bot.send_message(user_id, message)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ—É–¥–∞—á–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def create_webhook_app(bot):
    """–°–æ–∑–¥–∞–µ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook"""
    
    handler = SubscriptionWebhookHandler(bot)
    app = web.Application()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è webhook
    app.router.add_post('/webhook', handler.handle_subscription_webhook)
    
    # –î–æ–±–∞–≤–ª—è–µ–º health check
    async def health_check(request):
        return web.json_response({
            "status": "healthy",
            "service": "subscription_webhook",
            "timestamp": datetime.now().isoformat()
        })
    
    app.router.add_get('/health', health_check)
    
    return app

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ webhook —Å–µ—Ä–≤–µ—Ä–∞
async def start_webhook_server(bot, host='0.0.0.0', port=8080):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç webhook —Å–µ—Ä–≤–µ—Ä"""
    
    app = create_webhook_app(bot)
    
    runner = web.AppRunner(app)
    await runner.setup()
    
    site = web.TCPSite(runner, host, port)
    await site.start()
    
    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º print –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(f"üöÄ Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {host}:{port}")
    print(f"üì° Endpoint: http://{host}:{port}/webhook")
    
    logger.info(f"üöÄ Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {host}:{port}")
    logger.info(f"üì° Endpoint: http://{host}:{port}/webhook")
    
    return runner