# webhook_subscription_handler.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø

import json
import logging
from datetime import datetime
from aiohttp import web
from subscription_manager import SubscriptionManager
from db_postgresql import get_user_language, t, get_db_connection, release_db_connection

logger = logging.getLogger(__name__)

class SubscriptionWebhookHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –¥–ª—è —Å–æ–±—ã—Ç–∏–π –ø–æ–¥–ø–∏—Å–æ–∫ –æ—Ç Stripe"""
    
    def __init__(self, bot):
        self.bot = bot
    
    async def handle_subscription_webhook(self, request):
        """
        ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è - –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä—è–º–æ–π PostgreSQL
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ webhook
            try:
                import stripe
                import os
                
                payload = await request.read()
                sig_header = request.headers.get('stripe-signature')
                webhook_secret = os.getenv('STRIPE_WEBHOOK_SECRET')
                
                if sig_header and webhook_secret and webhook_secret.startswith('whsec_'):
                    # –ü—Ä—è–º–æ–π Stripe webhook
                    event = stripe.Webhook.construct_event(payload, sig_header, webhook_secret)
                    data = event
                    logger.info("‚úÖ Webhook verified with Stripe signature")
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Stripe —Ñ–æ—Ä–º–∞—Ç–∞
                    event_type = data.get('type')
                    
                    if event_type == 'invoice.payment_succeeded':
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
                        invoice_data = data.get('data', {}).get('object', {})
                        
                        # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û–ï –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ user_id
                        stripe_customer_id = None
                        lines = invoice_data.get('lines', {}).get('data', [])
                        if lines:
                            line_metadata = lines[0].get('metadata', {})
                            stripe_customer_id = line_metadata.get('user_id')
                        
                        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ line items - –∏—â–µ–º –≤ subscription metadata
                        if not stripe_customer_id:
                            parent = invoice_data.get('parent', {})
                            if parent.get('type') == 'subscription_details':
                                sub_metadata = parent.get('subscription_details', {}).get('metadata', {})
                                stripe_customer_id = sub_metadata.get('user_id')
                        
                        # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û–ï –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ subscription_id
                        subscription_id = None
                        
                        # –°–ø–æ—Å–æ–± 1: –ò–∑ lines -> parent -> subscription_item_details -> subscription
                        if lines and len(lines) > 0:
                            parent = lines[0].get('parent', {})
                            if parent.get('type') == 'subscription_item_details':
                                subscription_item_details = parent.get('subscription_item_details', {})
                                subscription_id = subscription_item_details.get('subscription')
                        
                        # –°–ø–æ—Å–æ–± 2: –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤—ã—à–µ, –ø—Ä–æ–±—É–µ–º –∏–∑ parent -> subscription_details
                        if not subscription_id:
                            parent = invoice_data.get('parent', {})
                            if parent.get('type') == 'subscription_details':
                                subscription_details = parent.get('subscription_details', {})
                                subscription_id = subscription_details.get('subscription')
                        
                        # –°–ø–æ—Å–æ–± 3: –ü—Ä—è–º–æ –∏–∑ invoice (–µ—Å–ª–∏ –µ—Å—Ç—å)
                        if not subscription_id:
                            subscription_id = invoice_data.get('subscription')
                        
                        amount = invoice_data.get('amount_paid', 0)
                        
                        logger.info(f"üìÑ Invoice payment extracted:")
                        logger.info(f"   user_id: {stripe_customer_id}")
                        logger.info(f"   subscription_id: {subscription_id}")
                        logger.info(f"   amount: {amount}")
                        
                    elif event_type == 'checkout.session.completed':
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–æ–≤–æ–π –ø–æ–∫—É–ø–∫–∏
                        session_data = data.get('data', {}).get('object', {})
                        session_id = session_data.get('id')
                        stripe_customer_id = None  # –ë—É–¥–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω –≤ StripeManager
                        subscription_id = None
                        amount = 0
                        
                        logger.info(f"üí≥ Checkout completed: session_id={session_id}")
                        
                else:
                    # Fallback –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏
                    data = json.loads(payload.decode('utf-8'))
                    logger.info("‚ö†Ô∏è Webhook processed without signature verification")
                    
                    # Make.com —Ñ–æ—Ä–º–∞—Ç (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è)
                    event_type = data.get('event_type')
                    stripe_customer_id = data.get('user_id')
                    subscription_id = data.get('subscription_id')
                    amount = int(data.get('amount', 0))
                    
            except Exception as e:
                data = await request.json()
                logger.warning(f"‚ö†Ô∏è Webhook signature verification failed: {e}")
                
                # –ü—Ä–æ—Å—Ç–æ–π JSON —Ñ–æ—Ä–º–∞—Ç
                event_type = data.get('event_type') or data.get('type')
                stripe_customer_id = data.get('user_id')
                subscription_id = data.get('subscription_id')
                amount = int(data.get('amount', 0))
            
            logger.info(f"üéØ Processing: {event_type}, user: {stripe_customer_id}, subscription: {subscription_id}, amount: {amount}")
            
            # ‚úÖ –ü–†–û–°–¢–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê - —Ç–æ–ª—å–∫–æ 2 —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏–π
            if event_type == 'invoice.payment_succeeded':
                # –ü–æ–¥–ø–∏—Å–∫–∏
                if not stripe_customer_id:
                    logger.error("‚ùå User ID not found in invoice webhook")
                    return web.json_response(
                        {"status": "error", "message": "User ID not found"}, 
                        status=400
                    )
                
                if not subscription_id:
                    logger.error("‚ùå Subscription ID not found in invoice webhook")
                    return web.json_response(
                        {"status": "error", "message": "Subscription ID not found"}, 
                        status=400
                    )
                
                result = await self._handle_successful_payment(
                    stripe_customer_id, subscription_id, amount
                )
                
            elif event_type == 'checkout.session.completed':
                # –†–∞–∑–æ–≤—ã–µ –ø–æ–∫—É–ø–∫–∏
                session_id = data.get('session_id') or data.get('data', {}).get('object', {}).get('id')
                
                if session_id:
                    try:
                        from stripe_manager import StripeManager
                        success, message = await StripeManager.handle_successful_payment(session_id)
                        
                        if success:
                            result = {
                                "status": "success",
                                "message": f"One-time payment processed: {message}",
                                "session_id": session_id
                            }
                            
                            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                            if stripe_customer_id:
                                try:
                                    user_id = int(stripe_customer_id)
                                    lang = await get_user_language(user_id)
                                    localized_message = t("webhook_payment_processed_auto", lang, message=message)
                                    await self.bot.send_message(user_id, localized_message, parse_mode="HTML")
                                except Exception as notify_error:
                                    logger.warning(f"Notification failed: {notify_error}")
                        else:
                            result = {"status": "error", "message": f"Payment processing failed: {message}"}
                    except Exception as e:
                        result = {"status": "error", "message": f"Exception during payment processing: {str(e)}"}
                else:
                    result = {"status": "error", "message": "Missing session_id"}
                    
            else:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
                logger.info(f"üö´ Ignoring event: {event_type}")
                result = {"status": "ignored", "message": f"Event {event_type} ignored"}
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            logger.info(f"‚úÖ Webhook result: {result}")
            return web.json_response({
                "status": "success",
                "message": "Webhook processed successfully",
                "event_type": event_type,
                "result": result,
                "processed_at": datetime.now().isoformat()
            })
            
        except Exception as e:
            logger.error(f"‚ùå Webhook processing error: {e}")
            import traceback
            logger.error(f"‚ùå Full traceback: {traceback.format_exc()}")
            return web.json_response(
                {"status": "error", "message": str(e)}, 
                status=500
            )
    
    async def _handle_successful_payment(self, stripe_customer_id, subscription_id, amount):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ - –ü–†–Ø–ú–û–ô PostgreSQL"""
        try:
            logger.info(f"üîç –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò: user_id={stripe_customer_id}, sub_id={subscription_id}, amount={amount}")
            
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º user_id
            if not stripe_customer_id:
                logger.error("‚ùå stripe_customer_id –ø—É—Å—Ç–æ–π")
                return {"status": "error", "message": "stripe_customer_id is required"}
            
            try:
                user_id = int(stripe_customer_id)
                logger.info(f"‚úÖ user_id –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω: {user_id}")
            except (ValueError, TypeError) as e:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å user_id: {stripe_customer_id}, –æ—à–∏–±–∫–∞: {e}")
                return {"status": "error", "message": f"Invalid user_id: {stripe_customer_id}"}
            
            # 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–∫–µ—Ç
            package_id = self._determine_package_by_amount(amount)
            logger.info(f"üì¶ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–∞–∫–µ—Ç: {package_id} –¥–ª—è —Å—É–º–º—ã {amount}")
            
            # 3. –ü–æ–ª—É—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –Ω–∞–ø—Ä—è–º—É—é
            conn = await get_db_connection()
            try:
                # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_exists = await conn.fetchrow("""
                    SELECT user_id FROM users WHERE user_id = $1
                """, user_id)
                
                if not user_exists:
                    logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î, —Å–æ–∑–¥–∞–µ–º...")
                    await conn.execute("""
                        INSERT INTO users (user_id, name, created_at) 
                        VALUES ($1, $2, $3)
                        ON CONFLICT (user_id) DO NOTHING
                    """, user_id, f"User {user_id}", datetime.now())
                
                # 5. –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–º–∏—Ç—ã —á–µ—Ä–µ–∑ SubscriptionManager
                logger.info(f"üí≥ –í—ã–∑—ã–≤–∞–µ–º SubscriptionManager.purchase_package...")
                result = await SubscriptionManager.purchase_package(
                    user_id=user_id,
                    package_id=package_id,
                    payment_method='stripe_subscription'
                )
                
                logger.info(f"üí≥ –†–µ–∑—É–ª—å—Ç–∞—Ç SubscriptionManager: {result}")
                
                if not result.get('success'):
                    logger.error(f"‚ùå SubscriptionManager –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {result}")
                    return {"status": "error", "message": f"SubscriptionManager failed: {result.get('error')}"}
                
                # 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –ë–î –ù–ê–ü–†–Ø–ú–£–Æ —á–µ—Ä–µ–∑ PostgreSQL
                logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ user_subscriptions...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                existing_subscription = await conn.fetchrow("""
                    SELECT id, stripe_subscription_id FROM user_subscriptions 
                    WHERE user_id = $1
                """, user_id)
                
                logger.info(f"üîç –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: {dict(existing_subscription) if existing_subscription else None}")
                
                if existing_subscription:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
                    await conn.execute("""
                        UPDATE user_subscriptions 
                        SET stripe_subscription_id = $1, 
                            package_id = $2, 
                            status = $3,
                            created_at = $4,
                            cancelled_at = $5
                        WHERE user_id = $6
                    """, subscription_id, package_id, 'active', datetime.now(), None, user_id)
                    logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è user_id={user_id}")
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                    await conn.execute("""
                        INSERT INTO user_subscriptions 
                        (user_id, stripe_subscription_id, package_id, status, created_at, cancelled_at)
                        VALUES ($1, $2, $3, $4, $5, $6)
                    """, user_id, subscription_id, package_id, 'active', datetime.now(), None)
                    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è user_id={user_id}")
                
                # 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å
                saved_subscription = await conn.fetchrow("""
                    SELECT user_id, stripe_subscription_id, package_id, status, created_at 
                    FROM user_subscriptions 
                    WHERE user_id = $1
                """, user_id)
                
                logger.info(f"üîç –ü–†–û–í–ï–†–ö–ê: –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: {dict(saved_subscription) if saved_subscription else None}")
                
                # 8. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                await self._send_renewal_notification(user_id, package_id)
                
                logger.info(f"‚úÖ –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–û –¥–ª—è user_id={user_id}")
                
                return {
                    "status": "success",
                    "message": "Subscription renewed",
                    "user_id": user_id,
                    "package_id": package_id,
                    "stripe_subscription_id": subscription_id,
                    "new_limits": {
                        "documents": result.get('new_documents'),
                        "queries": result.get('new_queries')
                    },
                    "database_record": dict(saved_subscription) if saved_subscription else None
                }
                
            finally:
                await release_db_connection(conn)
                
        except Exception as e:
            logger.error(f"‚ùå –û–®–ò–ë–ö–ê –í _handle_successful_payment: {e}")
            import traceback
            logger.error(f"‚ùå –ü–æ–ª–Ω—ã–π traceback: {traceback.format_exc()}")
            return {"status": "error", "message": f"Exception: {str(e)}"}
    
    def _determine_package_by_amount(self, amount_cents):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –ø–∞–∫–µ—Ç–∞ –ø–æ —Å—É–º–º–µ –ø–ª–∞—Ç–µ–∂–∞ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        
        logger.info(f"üîç –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–∫–µ—Ç –¥–ª—è —Å—É–º–º—ã: {amount_cents} —Ü–µ–Ω—Ç–æ–≤")
        
        # ‚úÖ –û–ë–´–ß–ù–´–ï –¶–ï–ù–´
        if amount_cents == 399:  # $3.99 - Basic
            logger.info("üì¶ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–∞–∫–µ—Ç: basic_sub (–æ–±—ã—á–Ω–∞—è —Ü–µ–Ω–∞)")
            return "basic_sub"
        elif amount_cents == 999:  # $9.99 - Premium  
            logger.info("üì¶ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–∞–∫–µ—Ç: premium_sub (–æ–±—ã—á–Ω–∞—è —Ü–µ–Ω–∞)")
            return "premium_sub"
        elif amount_cents == 199:  # $1.99 - Extra pack
            logger.info("üì¶ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–∞–∫–µ—Ç: extra_pack")
            return "extra_pack"
        
        # ‚úÖ –ü–†–û–ú–û–ö–û–î–´
        elif amount_cents == 99:   # $0.99 - –ü—Ä–æ–º–æ–∫–æ–¥ Basic
            logger.info("üì¶ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–∞–∫–µ—Ç: basic_sub (–ø—Ä–æ–º–æ–∫–æ–¥)")
            return "basic_sub"
        elif amount_cents == 299:  # $2.99 - –ü—Ä–æ–º–æ–∫–æ–¥ Premium (–µ—Å–ª–∏ –µ—Å—Ç—å)
            logger.info("üì¶ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–∞–∫–µ—Ç: premium_sub (–ø—Ä–æ–º–æ–∫–æ–¥)")
            return "premium_sub"
        
        # ‚úÖ –ù–ï–ò–ó–í–ï–°–¢–ù–ê–Ø –°–£–ú–ú–ê
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—É–º–º–∞ {amount_cents}, –∏—Å–ø–æ–ª—å–∑—É–µ–º premium_sub –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            return "premium_sub"  # –î–ª—è $9.99 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é premium
    
    async def _send_renewal_notification(self, user_id, package_id):
        """‚úÖ –õ–û–ö–ê–õ–ò–ó–û–í–ê–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø—Ä–æ–¥–ª–µ–Ω–∏–∏"""
        try:
            lang = await get_user_language(user_id)
            
            # ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –õ–û–ö–ê–õ–ò–ó–û–í–ê–ù–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï
            message = t("webhook_subscription_renewed", lang, package_id=package_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
            await self.bot.send_message(user_id, message)
            
        except Exception as e:
            logger.error(f"Renewal notification failed: {e}")
    
    async def _send_payment_failed_notification(self, user_id):
        """‚úÖ –õ–û–ö–ê–õ–ò–ó–û–í–ê–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ—É–¥–∞—á–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ"""
        try:
            lang = await get_user_language(user_id)
            
            # ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –õ–û–ö–ê–õ–ò–ó–û–í–ê–ù–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï
            message = t("webhook_payment_failed", lang)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
            await self.bot.send_message(user_id, message)
            
        except Exception as e:
            logger.error(f"Payment failure notification failed: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def create_webhook_app(bot):
    """–°–æ–∑–¥–∞–µ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook"""
    
    handler = SubscriptionWebhookHandler(bot)
    app = web.Application()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è webhook
    app.router.add_post('/webhook/stripe', handler.handle_subscription_webhook)
    
    # –î–æ–±–∞–≤–ª—è–µ–º health check
    async def health_check(request):
        return web.json_response({
            "status": "healthy",
            "service": "subscription_webhook",
            "timestamp": datetime.now().isoformat()
        })
    
    app.router.add_get('/health', health_check)
    
    return app

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ webhook —Å–µ—Ä–≤–µ—Ä–∞
async def start_webhook_server(bot, host='0.0.0.0', port=8080):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç webhook —Å–µ—Ä–≤–µ—Ä"""
    
    app = create_webhook_app(bot)
    
    runner = web.AppRunner(app)
    await runner.setup()
    
    site = web.TCPSite(runner, host, port)
    await site.start()
    
    logger.info(f"Webhook server started on port {port}")
    
    return runner