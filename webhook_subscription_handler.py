# webhook_subscription_handler.py - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫

import json
import logging
from datetime import datetime
from aiohttp import web
from subscription_manager import SubscriptionManager
from db_postgresql import get_user_name, get_user_language, t
from notification_system import NotificationSystem

logger = logging.getLogger(__name__)

class SubscriptionWebhookHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –¥–ª—è —Å–æ–±—ã—Ç–∏–π –ø–æ–¥–ø–∏—Å–æ–∫ –æ—Ç Make.com"""
    
    def __init__(self, bot):
        self.bot = bot
    
    async def handle_subscription_webhook(self, request):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook –æ—Ç Stripe —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ webhook
            try:
                import stripe
                import os
                
                payload = await request.read()
                sig_header = request.headers.get('stripe-signature')
                webhook_secret = os.getenv('STRIPE_WEBHOOK_SECRET')
                
                if sig_header and webhook_secret and webhook_secret.startswith('whsec_'):
                    event = stripe.Webhook.construct_event(payload, sig_header, webhook_secret)
                    data = event
                    logger.info("Webhook verified with Stripe signature")
                else:
                    data = json.loads(payload.decode('utf-8'))
                    logger.info("Webhook processed as JSON (Make.com format)")
                    
            except Exception as e:
                data = await request.json()
                logger.warning("Webhook signature verification failed, processing as JSON")
            
            logger.info("Webhook received from payment provider")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
            event_type = data.get('event_type') or data.get('type')
            stripe_customer_id = data.get('user_id')
            subscription_id = data.get('subscription_id')
            amount_raw = data.get('amount', 0)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä—è–º—ã—Ö Stripe webhook
            if not event_type and 'type' in data:
                event_type = data['type']
                
                if event_type == 'invoice.payment_succeeded':
                    invoice_data = data.get('data', {}).get('object', {})
                    
                    # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û–ï –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ user_id –∏–∑ metadata
                    metadata = invoice_data.get('metadata', {})
                    stripe_customer_id = metadata.get('user_id')
                    
                    # –ï—Å–ª–∏ –Ω–µ—Ç –≤ invoice metadata - –∏—â–µ–º –≤ line items
                    if not stripe_customer_id:
                        lines = invoice_data.get('lines', {}).get('data', [])
                        if lines:
                            line_metadata = lines[0].get('metadata', {})
                            stripe_customer_id = line_metadata.get('user_id')
                    
                    # –ï—Å–ª–∏ –Ω–µ—Ç –≤ line items - –∏—â–µ–º –≤ subscription metadata
                    if not stripe_customer_id:
                        parent = invoice_data.get('parent', {})
                        if parent.get('type') == 'subscription_details':
                            sub_metadata = parent.get('subscription_details', {}).get('metadata', {})
                            stripe_customer_id = sub_metadata.get('user_id')
                    
                    amount_raw = invoice_data.get('amount_paid', 0)
                    subscription_id = invoice_data.get('subscription')
                    
                    # ‚úÖ –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º billing_reason
                    billing_reason = invoice_data.get('billing_reason')
                    logger.info(f"Invoice billing_reason: {billing_reason}")
                    
                elif event_type == 'checkout.session.completed':
                    session_data = data.get('data', {}).get('object', {})
                    session_id = session_data.get('id')
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Å–µ—Å—Å–∏–∏
                    try:
                        import stripe
                        session = stripe.checkout.Session.retrieve(session_id)
                        
                        # ‚úÖ –ö–õ–Æ–ß–ï–í–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º mode —Å–µ—Å—Å–∏–∏
                        session_mode = session.mode
                        logger.info(f"Session mode: {session_mode}")
                        
                        # –ï—Å–ª–∏ —ç—Ç–æ subscription mode - –ù–ï –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–¥–µ—Å—å
                        if session_mode == 'subscription':
                            logger.info("üö´ Skipping checkout.session.completed for subscription - will be handled by invoice.payment_succeeded")
                            return web.json_response({
                                "status": "success",
                                "message": "Subscription checkout ignored - will be processed by invoice webhook",
                                "event_type": event_type
                            })
                        
                    except Exception as session_error:
                        logger.error(f"Error retrieving session details: {session_error}")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º amount
            try:
                amount = int(amount_raw) if amount_raw else 0
            except (ValueError, TypeError):
                amount = 0
            
            if not event_type:
                return web.json_response(
                    {"status": "error", "message": "Missing event_type or type"}, 
                    status=400
                )
            
            logger.info(f"Processing event: {event_type}, user_id: {stripe_customer_id}, amount: {amount}")
            
            # ‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –°–û–ë–´–¢–ò–ô –° –ó–ê–©–ò–¢–û–ô –û–¢ –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø
            if event_type == 'invoice.payment_succeeded':
                # ‚úÖ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ
                if billing_reason in ['subscription_create', 'subscription_cycle']:
                    logger.info(f"Processing subscription payment for billing_reason: {billing_reason}")
                    
                    if not stripe_customer_id:
                        logger.error("‚ùå User ID not found in invoice webhook data")
                        return web.json_response(
                            {"status": "error", "message": "User ID not found"}, 
                            status=400
                        )
                    
                    result = await self._handle_successful_payment(
                        stripe_customer_id, subscription_id, amount
                    )
                else:
                    logger.info(f"üö´ Ignoring invoice.payment_succeeded with billing_reason: {billing_reason}")
                    result = {"status": "ignored", "message": f"Billing reason {billing_reason} ignored"}
                    
            elif event_type == 'invoice.payment_failed':
                result = await self._handle_failed_payment(
                    stripe_customer_id, subscription_id
                )
                
            elif event_type == 'checkout.session.completed':
                # ‚úÖ –ó–¥–µ—Å—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û —Ä–∞–∑–æ–≤—ã–µ –ø–æ–∫—É–ø–∫–∏ (mode = 'payment')
                session_id = data.get('session_id') or data.get('data', {}).get('object', {}).get('id')
                user_id_from_metadata = stripe_customer_id or data.get('user_id')
                
                if session_id:
                    try:
                        from stripe_manager import StripeManager
                        success, message = await StripeManager.handle_successful_payment(session_id)
                        
                        if success:
                            result = {
                                "status": "success",
                                "message": f"One-time payment processed: {message}",
                                "session_id": session_id
                            }
                            
                            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                            if user_id_from_metadata:
                                try:
                                    user_id = int(user_id_from_metadata)
                                    lang = await get_user_language(user_id)
                                    
                                    localized_message = t("webhook_payment_processed_auto", lang, message=message)
                                    
                                    await self.bot.send_message(
                                        user_id,
                                        localized_message,
                                        parse_mode="HTML"
                                    )
                                except Exception as notify_error:
                                    logger.warning(f"Notification failed: {notify_error}")
                        else:
                            result = {
                                "status": "error", 
                                "message": f"Payment processing failed: {message}"
                            }
                    except Exception as e:
                        result = {
                            "status": "error",
                            "message": f"Exception during payment processing: {str(e)}"
                        }
                else:
                    result = {"status": "error", "message": "Missing session_id"}
                    
            else:
                logger.warning(f"Unknown webhook event type: {event_type}")
                result = {"status": "ignored", "message": f"Event {event_type} ignored"}
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            logger.info(f"‚úÖ Webhook processing completed: {result}")
            return web.json_response({
                "status": "success",
                "message": "Webhook processed successfully",
                "event_type": event_type,
                "result": result,
                "processed_at": datetime.now().isoformat()
            })
            
        except Exception as e:
            logger.error(f"‚ùå Webhook processing error: {e}")
            import traceback
            logger.error(f"‚ùå Full traceback: {traceback.format_exc()}")
            return web.json_response(
                {"status": "error", "message": str(e)}, 
                status=500
            )
    
    async def _handle_successful_payment(self, stripe_customer_id, subscription_id, amount):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º –¥–µ–ª–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ amount —É–∂–µ –≤ —Ü–µ–Ω—Ç–∞—Ö
            logger.info("Subscription payment processed successfully")
            
            # TODO: –ù–∞–π—Ç–∏ user_id –ø–æ stripe_customer_id
            user_id = int(stripe_customer_id)
            
            if not user_id:
                logger.warning("User not found for webhook")
                return {"status": "error", "message": "User not found"}
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ —Å—É–º–º–µ
            package_id = self._determine_package_by_amount(amount)
            
            # –ü–æ–ø–æ–ª–Ω—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = await SubscriptionManager.purchase_package(
                user_id=user_id,
                package_id=package_id,
                payment_method='stripe_subscription'
            )
            
            if result['success']:
                from db_postgresql import execute_query
                
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô SQL: –ò—Å–ø–æ–ª—å–∑—É–µ–º None –≤–º–µ—Å—Ç–æ NULL –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
                await execute_query("""
                    INSERT INTO user_subscriptions 
                    (user_id, stripe_subscription_id, package_id, status, created_at, cancelled_at)
                    VALUES ($1, $2, $3, $4, $5, $6)
                    ON CONFLICT (user_id) 
                    DO UPDATE SET 
                        stripe_subscription_id = EXCLUDED.stripe_subscription_id,
                        package_id = EXCLUDED.package_id,
                        status = EXCLUDED.status,
                        created_at = EXCLUDED.created_at,
                        cancelled_at = EXCLUDED.cancelled_at
                """, (user_id, subscription_id, package_id, 'active', datetime.now(), None))
                
                # ‚úÖ –õ–û–ö–ê–õ–ò–ó–û–í–ê–ù–ù–û–ï —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await self._send_renewal_notification(user_id, package_id)
                
                logger.info("User limits updated successfully")
                return {
                    "status": "success",
                    "message": "Subscription renewed",
                    "user_id": user_id,
                    "package_id": package_id,
                    "new_limits": {
                        "documents": result.get('new_documents'),
                        "queries": result.get('new_queries')
                    }
                }
            else:
                logger.error("Limits update failed")
                return {"status": "error", "message": result.get('error')}
                
        except Exception as e:
            logger.error("Payment processing error")
            return {"status": "error", "message": str(e)}
    
    async def _handle_failed_payment(self, stripe_customer_id, subscription_id):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ—É–¥–∞—á–Ω–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            logger.warning("Subscription payment failed")
            
            user_id = await self._get_user_id_by_stripe_customer(stripe_customer_id)
            
            if user_id:
                # 1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await self._send_payment_failed_notification(user_id)
                
                # 2Ô∏è‚É£ ‚úÖ –ù–û–í–û–ï: –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –ë–î
                from db_postgresql import execute_query
                
                await execute_query("""
                    UPDATE user_subscriptions 
                    SET status = 'payment_failed', cancelled_at = $1
                    WHERE user_id = $2 AND stripe_subscription_id = $3
                """, (datetime.now(), user_id, subscription_id))
                
                # 3Ô∏è‚É£ ‚úÖ –ù–û–í–û–ï: –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await execute_query("""
                    UPDATE user_limits 
                    SET subscription_type = 'free',
                        subscription_expires_at = NULL
                    WHERE user_id = $1
                """, (user_id,))
                
                logger.info("Payment failure notification sent")
                logger.info("Subscription deactivated")
                
                return {
                    "status": "success",
                    "message": "Payment failed processed and subscription deactivated",
                    "user_id": user_id
                }
            else:
                return {"status": "error", "message": "User not found"}
                
        except Exception as e:
            logger.error("Failed payment processing error")
            return {"status": "error", "message": str(e)}
    
    async def _handle_invoice_created(self, stripe_customer_id, subscription_id):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—á–µ—Ç–∞"""
        try:
            logger.info("Invoice created")
            
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            
            return {
                "status": "success",
                "message": "Invoice created logged"
            }
            
        except Exception as e:
            logger.error("Invoice processing error")
            return {"status": "error", "message": str(e)}
    
    async def _get_user_id_by_stripe_customer(self, stripe_customer_id):
        """
        –ù–∞—Ö–æ–¥–∏—Ç user_id –ø–æ stripe_customer_id
        
        TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –≤ –ë–î
        –ù—É–∂–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å–≤—è–∑–∏ stripe_customer_id -> user_id
        """
        # –ó–ê–ì–õ–£–®–ö–ê: –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if stripe_customer_id:
            return int(stripe_customer_id)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π ID
        return None
    
    def _determine_package_by_amount(self, amount_cents):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –ø–∞–∫–µ—Ç–∞ –ø–æ —Å—É–º–º–µ –ø–ª–∞—Ç–µ–∂–∞"""
        
        # ‚úÖ –û–ë–´–ß–ù–´–ï –¶–ï–ù–´
        if amount_cents == 399:  # $3.99 - –û–±—ã—á–Ω–∞—è —Ü–µ–Ω–∞ Basic
            return "basic_sub"
        elif amount_cents == 999:  # $9.99 - –û–±—ã—á–Ω–∞—è —Ü–µ–Ω–∞ Premium  
            return "premium_sub"
        elif amount_cents == 199:  # $1.99 - –†–∞–∑–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞
            return "extra_pack"
        
        # ‚úÖ –ü–†–û–ú–û–ö–û–î–´ (–î–û–ë–ê–í–õ–Ø–ï–ú –≠–¢–ò –°–¢–†–û–ö–ò!)
        elif amount_cents == 99:   # $0.99 - –ü—Ä–æ–º–æ–∫–æ–¥ Basic (–±—ã–ª–æ $3.99)
            logger.info("Promotional pricing detected")
            return "basic_sub"
        elif amount_cents == 199:  # $1.99 - –ü—Ä–æ–º–æ–∫–æ–¥ Premium (–±—ã–ª–æ $9.99) 
            logger.info("Premium subscription processed")
            return "premium_sub"
        
        # ‚úÖ –ù–ï–ò–ó–í–ï–°–¢–ù–ê–Ø –°–£–ú–ú–ê
        else:
            logger.warning("Unrecognized payment amount")
            return "basic_sub"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    async def _send_renewal_notification(self, user_id, package_id):
        """‚úÖ –õ–û–ö–ê–õ–ò–ó–û–í–ê–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø—Ä–æ–¥–ª–µ–Ω–∏–∏"""
        try:
            lang = await get_user_language(user_id)
            
            # ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –õ–û–ö–ê–õ–ò–ó–û–í–ê–ù–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï
            message = t("webhook_subscription_renewed", lang, package_id=package_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
            await self.bot.send_message(user_id, message)
            
        except Exception as e:
            logger.error("Renewal notification failed")
    
    async def _send_payment_failed_notification(self, user_id):
        """‚úÖ –õ–û–ö–ê–õ–ò–ó–û–í–ê–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ—É–¥–∞—á–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ"""
        try:
            lang = await get_user_language(user_id)
            
            # ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –õ–û–ö–ê–õ–ò–ó–û–í–ê–ù–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï
            message = t("webhook_payment_failed", lang)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
            await self.bot.send_message(user_id, message)
            
        except Exception as e:
            logger.error("Payment failure notification failed")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def create_webhook_app(bot):
    """–°–æ–∑–¥–∞–µ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook"""
    
    handler = SubscriptionWebhookHandler(bot)
    app = web.Application()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è webhook
    app.router.add_post('/webhook/stripe', handler.handle_subscription_webhook)
    
    # –î–æ–±–∞–≤–ª—è–µ–º health check
    async def health_check(request):
        return web.json_response({
            "status": "healthy",
            "service": "subscription_webhook",
            "timestamp": datetime.now().isoformat()
        })
    
    app.router.add_get('/health', health_check)
    
    return app

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ webhook —Å–µ—Ä–≤–µ—Ä–∞
async def start_webhook_server(bot, host='0.0.0.0', port=8080):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç webhook —Å–µ—Ä–≤–µ—Ä"""
    
    app = create_webhook_app(bot)
    
    runner = web.AppRunner(app)
    await runner.setup()
    
    site = web.TCPSite(runner, host, port)
    await site.start()
    
    logger.info(f"Webhook server started on port {port}")
    
    return runner