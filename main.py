import asyncio
import os
import html
from datetime import datetime
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.client.default import DefaultBotProperties

# ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –ò–ú–ü–û–†–¢–´ - PostgreSQL –≤–µ—Ä—Å–∏–∏
from db_postgresql import (
    get_user, create_user, save_document, update_document_title, is_fully_registered, get_user_name,
    get_user_documents, get_document_by_id, delete_document, save_message, 
    get_last_messages, get_conversation_summary,
    get_user_profile, get_user_language, t, get_all_values_for_key,
    initialize_db_pool, close_db_pool, get_db_stats, db_health_check, set_user_language
)

from registration import user_states, start_registration, handle_registration_step
from error_handler import handle_telegram_errors, BotError, OpenAIError, get_user_friendly_message, log_error_with_context, check_openai_health
from keyboards import main_menu_keyboard, settings_keyboard
from profile_keyboards import (
    profile_view_keyboard, profile_edit_keyboard, smoking_choice_keyboard,
    alcohol_choice_keyboard, activity_choice_keyboard, language_choice_keyboard, cancel_keyboard
)
from profile_manager import ProfileManager, CHOICE_MAPPINGS
from documents import handle_show_documents, handle_ignore_document
from save_utils import maybe_update_summary, format_user_profile
from rate_limiter import check_rate_limit, record_user_action, get_rate_limit_stats

# ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –ò–ú–ü–û–†–¢–´ - Vector DB PostgreSQL
from vector_db_postgresql import (
    initialize_vector_db, search_similar_chunks, keyword_search_chunks, 
    delete_document_from_vector_db
)

from gpt import ask_doctor, check_openai_status, fallback_response, fallback_summarize
from subscription_manager import check_document_limit, SubscriptionManager, check_gpt4o_limit
from stripe_config import check_stripe_setup
from subscription_handlers import SubscriptionHandlers, upsell_tracker
from notification_system import NotificationSystem
from stripe_manager import StripeManager
from prompt_logger import process_user_question_detailed, log_search_summary
from photo_analyzer import handle_photo_analysis, handle_photo_question, cancel_photo_analysis

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

def detect_user_language(user: types.User) -> str:
    """–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ Telegram"""
    phone_lang = user.language_code if user.language_code else 'en'
    print(f"üåç –Ø–∑—ã–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_lang}")
    
    # –ü—Ä–æ—Å—Ç–æ–π –º–∞–ø–ø–∏–Ω–≥ –Ω–∞ 4 —è–∑—ã–∫–∞
    if phone_lang == 'ru':
        return 'ru'
    elif phone_lang == 'uk': 
        return 'uk'
    elif phone_lang == 'de':
        return 'de'
    else:
        return 'en'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

@dp.message(CommandStart())
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        user_data = await get_user(user_id)
        
        if user_data is None:
            # üÜï –ù–û–í–´–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨
            
            # üåç –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –∏ —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            auto_lang = detect_user_language(message.from_user)
            await set_user_language(user_id, auto_lang)
            
            # üöÄ –°–†–ê–ó–£ –ù–ê–ß–ò–ù–ê–ï–ú –†–ï–ì–ò–°–¢–†–ê–¶–ò–Æ —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º
            await start_registration_with_language_option(user_id, message, auto_lang)
            return
            
        # ‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if await is_fully_registered(user_id):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            name = user_data.get('name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
            lang = await get_user_language(user_id)
            
            await message.answer(
                t("welcome_back", lang, name=name), 
                reply_markup=main_menu_keyboard(lang)
            )
        else:
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            await start_registration(user_id, message)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def start_registration_with_language_option(user_id: int, message: types.Message, lang: str):
    """–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–º–µ–Ω—ã —è–∑—ã–∫–∞"""
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏
    user_states[user_id] = {"step": "awaiting_name"}
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ç—Ä–æ-—Ç–µ–∫—Å—Ç
    intro_text = f"{t('intro_1', lang)}\n\n{t('intro_2', lang)}\n\n{t('ask_name', lang)}"
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=t("change_language", lang), 
            callback_data="change_language_registration"
        )]
    ])
    
    await message.answer(
        intro_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )

# üÜï –î–û–ë–ê–í–¨–¢–ï —ç—Ç–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ü–û–°–õ–ï start_registration_with_language_option:

@dp.callback_query(lambda c: c.data == "change_language_registration")
async def handle_language_change_during_registration(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–æ–≤
    language_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="set_lang_ru")],
        [InlineKeyboardButton(text="üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", callback_data="set_lang_uk")],
        [InlineKeyboardButton(text="üá¨üáß English", callback_data="set_lang_en")],
        [InlineKeyboardButton(text="üá©üá™ Deutsch", callback_data="set_lang_de")]
    ])
    
    await callback.message.edit_text(
        "üá∫üá¶ –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É\n"
        "üá∑üá∫ –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞\n" 
        "üá¨üáß Choose your language\n"
        "üá©üá™ Sprache w√§hlen",
        reply_markup=language_keyboard
    )
    
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("set_lang_"))
async def handle_set_language_during_registration(callback: types.CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    user_id = callback.from_user.id
    selected_lang = callback.data.replace("set_lang_", "")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await set_user_language(user_id, selected_lang)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –Ω–æ–≤—ã–º —è–∑—ã–∫–æ–º
    await start_registration_with_language_option(user_id, callback.message, selected_lang)
    
    await callback.answer()

@dp.message(lambda msg: msg.text in ["üá∑ –†—É—Å—Å–∫–∏–π", "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", "üá¨üáß English"])
@handle_telegram_errors
async def language_start(message: types.Message):
    from db_postgresql import set_user_language
    user_id = message.from_user.id

    lang_map = {
        "üá∑ –†—É—Å—Å–∫–∏–π": "ru",
        "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞": "uk",
        "üá¨üáß English": "en"
    }
    lang_code = lang_map[message.text]
    await set_user_language(user_id, lang_code)
   
    if await is_fully_registered(user_id):
        name = await get_user_name(user_id)
        keyboard = main_menu_keyboard(lang_code)
        await message.answer(t("welcome_back", lang_code, name=name), reply_markup=keyboard)
    else:
        await start_registration(user_id, message)

@dp.message(lambda msg: msg.text in get_all_values_for_key("main_upload_doc"))
@handle_telegram_errors
async def prompt_document_upload(message: types.Message):
    user_id = message.from_user.id
    lang = await get_user_language(user_id)
    
    # ‚úÖ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    can_upload = await NotificationSystem.check_and_notify_limits(
        message, user_id, action_type="document"
    )
    
    if not can_upload:
        return  # –õ–∏–º–∏—Ç—ã –∏—Å—á–µ—Ä–ø–∞–Ω—ã, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–æ
    
    # –ï—Å–ª–∏ –ª–∏–º–∏—Ç—ã –µ—Å—Ç—å - —Ä–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    user_states[message.from_user.id] = "awaiting_document"
    await message.answer(t("please_send_file", lang))

@dp.message(lambda msg: msg.text in get_all_values_for_key("main_note"))
@handle_telegram_errors
async def prompt_memory_note(message: types.Message):
    user_id = message.from_user.id
    lang = await get_user_language(user_id)
    user_states[message.from_user.id] = "awaiting_memory_note"
    keyboard = ReplyKeyboardMarkup(
         keyboard=[[KeyboardButton(text=t("cancel", lang))]],
        resize_keyboard=True
    )
    await message.answer(t("write_note", lang), reply_markup=keyboard)

@dp.message(lambda msg: msg.text in get_all_values_for_key("main_documents"))
@handle_telegram_errors
async def show_documents_handler(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id] = {"mode": "viewing_documents", "offset": 0}
    await handle_show_documents(message, user_id=message.from_user.id)

@dp.message(lambda msg: msg.text in get_all_values_for_key("main_schedule"))
@handle_telegram_errors
async def show_medications_schedule(message: types.Message):
    try:
        from db_postgresql import format_medications_schedule, get_user_language
        from locales import translations
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

        user_id = message.from_user.id
        lang = await get_user_language(user_id)

        text = await format_medications_schedule(user_id)
        if not text:
            text = translations[lang]["schedule_empty"]

        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(
                text=translations[lang]["edit_schedule_button"],
                callback_data="edit_meds"
            )
        ]])
        await message.answer(
            f"üóì <b>{translations[lang]['your_schedule']}</b>\n\n<pre>{text}</pre>",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        lang = await get_user_language(message.from_user.id)
        log_error_with_context(e, {"user_id": message.from_user.id, "action": "show_medications"})
        await message.answer(get_user_friendly_message(e, lang))

@dp.message(lambda msg: msg.text in get_all_values_for_key("main_settings"))
@handle_telegram_errors
async def show_settings_menu_new(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    lang = await get_user_language(message.from_user.id)
    
    await message.answer(
        t("settings_menu_title", lang),
        reply_markup=settings_keyboard(lang)
    )

@dp.message(lambda msg: msg.text == "/reset123456")
@handle_telegram_errors
async def reset_user(message: types.Message):
    user_id = message.from_user.id
    from db_postgresql import delete_user_completely

    await delete_user_completely(user_id)
    lang = "ru"  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —è–∑—ã–∫ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    await message.answer(t("reset_done", lang))



@dp.message()
@handle_telegram_errors
async def handle_user_message(message: types.Message):
    user_id = message.from_user.id
    lang = await get_user_language(user_id)
    
    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –ü–ï–†–í–´–ú –î–ï–õ–û–ú (–¥–æ –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫)
    if message.text and message.text in [t("cancel", lang)]:
        current_state = user_states.get(user_id)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_states[user_id] = None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫—É—é –æ—Ç–º–µ–Ω—É –≤—ã–ø–æ–ª–Ω—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if current_state == "awaiting_memory_note":
            await message.answer(
                t("note_cancelled", lang),
                reply_markup=types.ReplyKeyboardRemove()  # ‚úÖ –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            )
        elif isinstance(current_state, dict) and current_state.get("mode") == "editing_profile":
            await message.answer(
                t("profile_edit_cancelled", lang),
                reply_markup=types.ReplyKeyboardRemove()  # ‚úÖ –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            )
        elif current_state == "editing_medications":
            await message.answer(
                "‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                reply_markup=types.ReplyKeyboardRemove()  # ‚úÖ –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            )
        elif isinstance(current_state, str) and current_state.startswith("rename_"):
            await message.answer(
                t("rename_cancelled", lang),
                reply_markup=types.ReplyKeyboardRemove()  # ‚úÖ –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            )
        else:
            # –õ—é–±–∞—è –¥—Ä—É–≥–∞—è –æ—Ç–º–µ–Ω–∞
            await message.answer(
                "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
                reply_markup=types.ReplyKeyboardRemove()  # ‚úÖ –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            )
        
        # ‚úÖ –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í–°–ï–ì–î–ê –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã
        from keyboards import show_main_menu
        await show_main_menu(message, lang)
        return  # ‚úÖ –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, –±–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º

    # ‚úÖ –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ü–û–°–õ–ï –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã
    current_state = user_states.get(user_id)
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç
    if current_state == "awaiting_document":
        if message.text is not None:  # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ —Ñ–∞–π–ª–∞
            await message.answer(t("unrecognized_document", lang))
            user_states[user_id] = None
            return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
    if message.text is None:
        if current_state == "awaiting_document":
            allowed, error_msg = await check_rate_limit(user_id, "document")
            if not allowed:
                await message.answer(error_msg)
                return
            try:
                from upload import handle_document_upload
                await handle_document_upload(message, bot)
                await record_user_action(user_id, "document")
                return
            except Exception as e:
                log_error_with_context(e, {"user_id": user_id, "action": "document_upload"})
                await message.answer(get_user_friendly_message(e, lang))
                return
        
        elif message.content_type == types.ContentType.PHOTO:
            # ‚úÖ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            allowed, error_msg = await check_rate_limit(user_id, "image")
            if not allowed:
                await message.answer(error_msg)
                return
            try:
                await handle_photo_analysis(message, bot)
                await record_user_action(user_id, "image")
                return
            except Exception as e:
                log_error_with_context(e, {"user_id": user_id, "action": "photo_analysis"})
                await message.answer(get_user_friendly_message(e, lang))
                return

        else:
            # –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è
            await message.answer(t("unsupported_input", lang))
            return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if await handle_registration_step(user_id, message):
        return
    
    # ‚úÖ –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –∫ —Ñ–æ—Ç–æ
    elif isinstance(current_state, dict) and current_state.get("type") == "awaiting_photo_question":
        try:
            await handle_photo_question(message, bot)
            return
        except Exception as e:
            log_error_with_context(e, {"user_id": user_id, "action": "photo_question"})
            await message.answer(get_user_friendly_message(e, lang))
            return
        
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    elif isinstance(current_state, str) and current_state.startswith("rename_"):
        # ‚úÖ –û—Ç–º–µ–Ω–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤—ã—à–µ, —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        try:
            doc_id = int(current_state.split("_")[1])
            new_title = message.text.strip()
            await update_document_title(doc_id, new_title)
            await message.answer(t("document_renamed", lang, name=new_title), parse_mode="HTML")
            user_states[user_id] = None
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
            from keyboards import show_main_menu
            await show_main_menu(message, lang)
            return
        except Exception as e:
            log_error_with_context(e, {"user_id": user_id, "action": "rename_document"})
            await message.answer(get_user_friendly_message(e, lang))
            return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–º–µ—Ç–æ–∫ –≤ –ø–∞–º—è—Ç—å
    elif current_state == "awaiting_memory_note":
        # ‚úÖ –û—Ç–º–µ–Ω–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤—ã—à–µ, —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        allowed, error_msg = await check_rate_limit(user_id, "note")
        if not allowed:
            await message.answer(error_msg)
            return
        try:
            from gpt import summarize_note_text, generate_title_for_note
            from vector_db_postgresql import split_into_chunks, add_chunks_to_vector_db
            from db_postgresql import save_document
            from documents import send_note_controls

            note_text = message.text.strip()
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –≤—ã–∑–æ–≤—ã GPT —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            try:
                title = await generate_title_for_note(note_text)
                summary = await summarize_note_text(note_text, lang)
            except OpenAIError as e:
                title = f"–ó–∞–º–µ—Ç–∫–∞ {datetime.now().strftime('%Y-%m-%d %H:%M')}"
                summary = fallback_summarize(note_text, lang)
                await message.answer("‚ö†Ô∏è –ò–ò-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∑–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º –≤–∏–¥–µ.")

            document_id = await save_document(
                user_id=user_id,
                title=title,
                file_path="memory_note",
                file_type="note",
                raw_text=note_text,
                summary=summary,
                confirmed=True
            )

            chunks = await split_into_chunks(summary, document_id, user_id)
            await add_chunks_to_vector_db(document_id, user_id, chunks)

            await message.answer(t("note_saved", lang, title=title), parse_mode="HTML")
            await send_note_controls(message, document_id)
            user_states[user_id] = None
            
            await record_user_action(user_id, "note")
            
            from keyboards import show_main_menu
            await show_main_menu(message, lang)
            return
            
        except Exception as e:
            log_error_with_context(e, {"user_id": user_id, "action": "save_memory_note"})
            await message.answer(get_user_friendly_message(e, lang))
            return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    elif isinstance(current_state, dict) and current_state.get("mode") == "editing_profile":
        # ‚úÖ –û—Ç–º–µ–Ω–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤—ã—à–µ, —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        try:
            state = user_states[user_id]
            field = state.get("field")
            
            if not field:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                user_states[user_id] = None
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ
            success, response_message = await ProfileManager.update_field(
                user_id, field, message.text, lang
            )
            
            if success:
                await message.answer(
                    response_message,
                    reply_markup=types.ReplyKeyboardRemove()  # ‚úÖ –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                )
                user_states[user_id] = None
                # ‚úÖ –ü–û–ö–ê–ó–´–í–ê–ï–ú –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                from keyboards import show_main_menu
                await show_main_menu(message, lang)
            else:
                # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –æ—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ –ø–æ–ª–µ
                await message.answer(response_message)
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–Ω–æ–≤–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–≤–æ–¥–∞
                from profile_keyboards import cancel_keyboard
                await message.answer(
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:",
                    reply_markup=cancel_keyboard(lang)
                )
            
            return
            
        except Exception as e:
            log_error_with_context(e, {"user_id": user_id, "action": "edit_profile_field"})
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è",
                reply_markup=types.ReplyKeyboardRemove()  # ‚úÖ –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            )
            user_states[user_id] = None
            # ‚úÖ –ü–û–ö–ê–ó–´–í–ê–ï–ú –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            from keyboards import show_main_menu
            await show_main_menu(message, lang)
            return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤
    elif current_state == "editing_medications":
        try:
            from db_postgresql import get_medications, replace_medications
            from gpt import update_medications_via_gpt
            from save_utils import update_user_profile_medications

            current_list = await get_medications(user_id)
            user_input = message.text.strip()

            try:
                new_list = await update_medications_via_gpt(user_input, current_list)
                if new_list is not None:
                    await replace_medications(user_id, new_list)
                    await update_user_profile_medications(user_id)
                    user_states[user_id] = None
                    await message.answer(t("schedule_updated", lang))
                    
                    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤
                    from keyboards import show_main_menu
                    await show_main_menu(message, lang)
                else:
                    await message.answer(t("schedule_update_failed", lang))
            except OpenAIError:
                # Fallback - –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –µ—Å–ª–∏ GPT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                await message.answer("‚ö†Ô∏è –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –ø–æ–∑–∂–µ.")
                
            return
            
        except Exception as e:
            log_error_with_context(e, {"user_id": user_id, "action": "edit_medications"})
            await message.answer(get_user_friendly_message(e, lang))
            return

    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    else:
        allowed, error_msg = await check_rate_limit(user_id, "message")
        if not allowed:
            await message.answer(error_msg)
            return
        try:
            name = await get_user_name(user_id)
            if not name:
                await message.answer(t("not_registered", lang))
                return
                
            user_input = message.text
            await save_message(user_id, "user", user_input)
            
            # ‚úÖ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å upsell –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
            await NotificationSystem.check_and_notify_limits(
                message, user_id, action_type="message"
            )
            
            # üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –í–û–ü–†–û–°–ê –° –õ–û–ì–ò–†–û–í–ê–ù–ò–ï–ú
            try:
                prompt_data = await process_user_question_detailed(user_id, user_input)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                profile_text = prompt_data["profile_text"]
                summary_text = prompt_data["summary_text"]
                chunks_text = prompt_data["chunks_text"]
                chunks_found = prompt_data["chunks_found"]
                lang = prompt_data["lang"]
                
            except Exception as e:
                # Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
                print("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
                
                # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è (–≤–∞—à —Å—Ç–∞—Ä—ã–π –∫–æ–¥)
                from gpt import enrich_query_for_vector_search
                try:
                    refined_query = await enrich_query_for_vector_search(user_input)
                    print(f"üîç –ó–∞–ø—Ä–æ—Å: '{user_input}' ‚Üí —É–ª—É—á—à–µ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ ({len(refined_query)} —Å–∏–º–≤.)")
                except OpenAIError:
                    refined_query = user_input
                    print(f"üîç –ó–∞–ø—Ä–æ—Å: '{user_input}' (GPT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")

                # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ë–ï–ó –∏—Å–∫–ª—é—á–µ–Ω–∏–π
                vector_chunks = await search_similar_chunks(user_id, refined_query, limit=10)
                keyword_chunks = await keyword_search_chunks(user_id, user_input, limit=10)
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–æ–¥–∫—É —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
                summary_text, _ = await get_conversation_summary(user_id)

                def filter_chunks_simple(chunks, limit=5):
                    """–ü—Ä–æ—Å—Ç–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
                    filtered_texts = []
                    for chunk in chunks:
                        chunk_text = chunk.get("chunk_text", "")
                        if chunk_text.strip():  # –¢–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ —á–∞–Ω–∫–∏
                            filtered_texts.append(chunk_text)
                            if len(filtered_texts) >= limit:
                                break
                    return filtered_texts

                vector_texts = filter_chunks_simple(vector_chunks, limit=4)
                keyword_texts = filter_chunks_simple(keyword_chunks, limit=2)
                all_chunks = list(dict.fromkeys(vector_texts + keyword_texts))
                chunks_text = "\n\n".join(all_chunks[:6])
                chunks_found = len(all_chunks)
                
                # –ö—Ä–∞—Ç–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ë–ï–ó excluded_doc_id
                print(f"üß† –ù–∞–π–¥–µ–Ω–æ: {len(vector_chunks)} –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö + {len(keyword_chunks)} –∫–ª—é—á–µ–≤—ã—Ö = {chunks_found} –∏—Ç–æ–≥–æ")
                
                # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è fallback
                profile_text = await format_user_profile(user_id)
                lang = await get_user_language(user_id)

            # ==========================================
            # –û–¢–ü–†–ê–í–ö–ê –í GPT (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            # ==========================================

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ GPT-4o
            use_gpt4o = await check_gpt4o_limit(user_id)

            try:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                try:
                    from db_postgresql import get_last_messages
                    recent_messages = await get_last_messages(user_id, limit=6)
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    context_lines = []
                    for msg in recent_messages:
                        if isinstance(msg, (tuple, list)) and len(msg) >= 2:
                            role = "USER" if msg[0] == 'user' else "BOT"
                            content = str(msg[1])[:100]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                            context_lines.append(f"{role}: {content}")
                        else:
                            print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {msg}")
                    
                    context_text = "\n".join(context_lines)
                    
                except Exception as e:
                    context_text = ""
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

                 # ‚úÖ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –í–´–ë–û–†–ê –ú–û–î–ï–õ–ò
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ª–∏–º–∏—Ç—ã
                has_premium_limits = await check_gpt4o_limit(user_id)
                
                # ‚úÖ –û–ü–†–ï–î–ï–õ–Ø–ï–ú –ö–ê–ö–£–Æ –ú–û–î–ï–õ–¨ –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨
                if has_premium_limits:
                    # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ª–∏–º–∏—Ç—ã ‚Üí –∏—Å–ø–æ–ª—å–∑—É–µ–º Gemini
                    use_gemini = True
                    model_name = "Gemini 2.5 Flash"
                    print(f"üíé –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –ª–∏–º–∏—Ç—ã ‚Üí –∏—Å–ø–æ–ª—å–∑—É–µ–º {model_name}")
                else:
                    # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ª–∏–º–∏—Ç–æ–≤ ‚Üí –∏—Å–ø–æ–ª—å–∑—É–µ–º GPT-4o mini
                    use_gemini = False
                    model_name = "GPT-4o-mini"
                    print(f"üÜì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±–µ–∑ –ª–∏–º–∏—Ç–æ–≤ ‚Üí –∏—Å–ø–æ–ª—å–∑—É–µ–º {model_name}")

                # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ ask_doctor —Å –≤–∞—à–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                response = await ask_doctor(
                    profile_text=profile_text,
                    summary_text=summary_text, 
                    chunks_text=chunks_text,
                    context_text=context_text,
                    user_question=user_input,
                    lang=lang,
                    user_id=user_id,
                    use_gemini=use_gemini
                )
                
                print(f"ü§ñ {'GPT-4o' if use_gpt4o else 'GPT-4o-mini'} | –ß–∞–Ω–∫–æ–≤: {chunks_found}")
                
                # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                if response:
                    await message.answer(response)
                    await save_message(user_id, "assistant", response)
                    await maybe_update_summary(user_id)
                    print(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {len(response)} —Å–∏–º–≤–æ–ª–æ–≤")
                else:
                    await message.answer(get_user_friendly_message("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç", lang))
                    
            except Exception as e:
                log_error_with_context(e, {"user_id": user_id, "action": "gpt_request"})
                await message.answer(get_user_friendly_message(e, lang))
                    
        except Exception as e:
            log_error_with_context(e, {"user_id": user_id, "action": "message_processing"})
            await message.answer(get_user_friendly_message(e, lang))

@dp.callback_query(lambda c: c.data == "settings_profile")
@handle_telegram_errors  
async def handle_profile_settings(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    lang = await get_user_language(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
    profile_text = await ProfileManager.get_profile_text(user_id, lang)
    
    await callback.message.edit_text(
        profile_text,
        reply_markup=profile_view_keyboard(lang),
        parse_mode="HTML"
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "edit_profile")
@handle_telegram_errors
async def handle_edit_profile(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    lang = await get_user_language(callback.from_user.id)
    
    await callback.message.edit_text(
        t("edit_profile_title", lang),
        reply_markup=profile_edit_keyboard(lang),
        parse_mode="HTML"
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "back_to_profile")
@handle_telegram_errors
async def handle_back_to_profile(callback: types.CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –ø—Ä–æ—Ñ–∏–ª—è"""
    user_id = callback.from_user.id
    lang = await get_user_language(user_id)
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    user_states[user_id] = None
    
    profile_text = await ProfileManager.get_profile_text(user_id, lang)
    
    await callback.message.edit_text(
        profile_text,
        reply_markup=profile_view_keyboard(lang),
        parse_mode="HTML"
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "back_to_settings")
@handle_telegram_errors
async def handle_back_to_settings(callback: types.CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    lang = await get_user_language(callback.from_user.id)
    
    await callback.message.edit_text(
        t("settings_menu_title", lang),
        reply_markup=settings_keyboard(lang)
    )
    await callback.answer()

# HANDLERS –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–ª–µ–π
@dp.callback_query(lambda c: c.data.startswith("edit_field_"))
@handle_telegram_errors
async def handle_edit_field(callback: types.CallbackQuery):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è"""
    user_id = callback.from_user.id
    lang = await get_user_language(user_id)
    
    field = callback.data.replace("edit_field_", "")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    user_states[user_id] = {
        "mode": "editing_profile",
        "field": field
    }
    
    if field in ["name", "height_cm", "weight_kg", "allergies"]:
        # –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥
        prompts = {
            "name": "enter_new_name",
            "height_cm": "enter_new_height", 
            "weight_kg": "enter_new_weight",
            "allergies": "enter_new_allergies"
        }
        
        await callback.message.answer(
            t(prompts[field], lang),
            reply_markup=cancel_keyboard(lang)
        )
        
    elif field == "smoking":
        # –í—ã–±–æ—Ä –∏–∑ –∫–Ω–æ–ø–æ–∫
        await callback.message.edit_text(
            t("choose_smoking", lang),
            reply_markup=smoking_choice_keyboard(lang)
        )
        
    elif field == "alcohol":
        await callback.message.edit_text(
            t("choose_alcohol", lang),
            reply_markup=alcohol_choice_keyboard(lang)
        )
        
    elif field == "physical_activity":
        await callback.message.edit_text(
            t("choose_activity", lang),
            reply_markup=activity_choice_keyboard(lang)
        )
        
    elif field == "language":
        await callback.message.edit_text(
            t("choose_language", lang),
            reply_markup=language_choice_keyboard()
        )
    
    await callback.answer()

# HANDLERS –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–∑ –∫–Ω–æ–ø–æ–∫
@dp.callback_query(lambda c: c.data.startswith(("smoking_", "alcohol_", "activity_", "lang_")))
@handle_telegram_errors
async def handle_choice_selection(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–∑ –∫–Ω–æ–ø–æ–∫"""
    user_id = callback.from_user.id
    lang = await get_user_language(user_id)
    
    state = user_states.get(user_id)
    if not state or state.get("mode") != "editing_profile":
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
        return
    
    field = state.get("field")
    choice = callback.data
    
    print(f"üîß DEBUG: field={field}, choice={choice}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    if choice.startswith("lang_"):
        new_lang = choice.replace("lang_", "")
        success, message = await ProfileManager.update_field(user_id, "language", new_lang, lang)
        
        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            lang = new_lang
        
        await callback.message.edit_text(message, parse_mode="HTML")
        user_states[user_id] = None
        
        # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
        from keyboards import show_main_menu
        await show_main_menu(callback.message, lang)
        
        await callback.answer()
        return
    
    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–π
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ callback data
    if choice.startswith("smoking_"):
        db_field = "smoking"
    elif choice.startswith("alcohol_"):
        db_field = "alcohol"
    elif choice.startswith("activity_"):
        db_field = "physical_activity"  # ‚úÖ –í–ê–ñ–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—è –≤ –ë–î
    else:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≤—ã–±–æ—Ä–∞")
        return
    
    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ–ª—É—á–∞–µ–º —á–∏—Ç–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ CHOICE_MAPPINGS
    if db_field in CHOICE_MAPPINGS and choice in CHOICE_MAPPINGS[db_field]:
        readable_value = CHOICE_MAPPINGS[db_field][choice][lang]
        print(f"üîß DEBUG: readable_value={readable_value}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
    else:
        # Fallback –Ω–∞ –ø—Ä—è–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        readable_value = choice
        print(f"‚ö†Ô∏è DEBUG: Fallback value={readable_value}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ
    success, message = await ProfileManager.update_field(user_id, db_field, readable_value, lang)
    
    if success:
        await callback.message.edit_text(message, parse_mode="HTML")
        user_states[user_id] = None
        
        # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        from keyboards import show_main_menu
        await show_main_menu(callback.message, lang)
    else:
        await callback.message.edit_text(message)
    
    await callback.answer()

@dp.callback_query(lambda c: c.data == "cancel_edit")
@handle_telegram_errors
async def handle_cancel_edit(callback: types.CallbackQuery):
    """–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    user_id = callback.from_user.id
    lang = await get_user_language(user_id)
    
    user_states[user_id] = None
    
    await callback.message.edit_text(
        t("profile_edit_cancelled", lang),
        parse_mode="HTML"
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "settings_faq")
@handle_telegram_errors
async def handle_faq_settings(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ FAQ (–∑–∞–≥–ª—É—à–∫–∞)"""
    lang = await get_user_language(callback.from_user.id)
    
    await callback.message.edit_text(
        t("faq_coming_soon", lang)
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "settings_subscription")
@handle_telegram_errors
async def handle_subscription_settings(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ü–æ–¥–ø–∏—Å–∫–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"""
    await SubscriptionHandlers.show_subscription_menu(callback)

# 2. –ù–û–í–´–ï –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
@dp.callback_query(lambda c: c.data.startswith("buy_"))
@handle_telegram_errors
async def handle_purchase_request(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–∫—É–ø–∫—É –ø–∞–∫–µ—Ç–æ–≤"""
    package_id = callback.data.replace("buy_", "")
    await SubscriptionHandlers.handle_purchase_request(callback, package_id)

@dp.callback_query(lambda c: c.data.startswith("confirm_purchase_"))
@handle_telegram_errors
async def handle_purchase_confirmation(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏"""
    package_id = callback.data.replace("confirm_purchase_", "")
    await SubscriptionHandlers.handle_purchase_confirmation(callback, package_id)

@dp.callback_query(lambda c: c.data.startswith("upgrade_to_"))
@handle_telegram_errors
async def handle_simple_upgrade(callback: types.CallbackQuery):
    """‚úÖ –ü–†–û–°–¢–û–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–ø–≥—Ä–µ–π–¥–∞ - –Ω–∞—Ö–æ–¥–∏–º —Å—Ç–∞—Ä—É—é –ø–æ–¥–ø–∏—Å–∫—É —Å–∞–º–∏"""
    try:
        user_id = callback.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –ø–∞–∫–µ—Ç –∏–∑ callback
        new_package_id = callback.data.replace("upgrade_to_", "")
        
        # ‚úÖ –ü–†–û–°–¢–ê–Ø –õ–û–ì–ò–ö–ê: –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –≤ –ë–î
        from db_postgresql import fetch_one
        active_subscription = await fetch_one("""
            SELECT package_id FROM user_subscriptions 
            WHERE user_id = ? AND status = 'active'
            ORDER BY created_at DESC LIMIT 1
        """, (user_id,))
        
        if not active_subscription:
            await callback.answer("‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
            
        current_package_id = active_subscription[0]
        
        # ‚úÖ –ü–†–û–°–¢–û: –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—É—é, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
        await SubscriptionHandlers.handle_subscription_upgrade(
            callback, current_package_id, new_package_id
        )
        
    except Exception as e:
        log_error_with_context(e, {
            "action": "simple_upgrade", 
            "user_id": callback.from_user.id
        })
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)

# 3. –ù–û–í–´–ï –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
@dp.callback_query(lambda c: c.data == "subscription_menu")
@handle_telegram_errors
async def handle_subscription_menu(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫"""
    await SubscriptionHandlers.show_subscription_menu(callback)

@dp.callback_query(lambda c: c.data == "show_limits")
@handle_telegram_errors
async def handle_show_limits(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏–º–∏—Ç–∞—Ö"""
    await SubscriptionHandlers.show_user_limits(callback)

@dp.callback_query(lambda c: c.data == "cancel_subscription")
@handle_telegram_errors
async def handle_cancel_subscription_request(callback: types.CallbackQuery):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–º–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏"""
    await SubscriptionHandlers.handle_cancel_subscription_request(callback)

@dp.callback_query(lambda c: c.data == "confirm_cancel_subscription")
@handle_telegram_errors
async def handle_cancel_subscription_confirmation(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏"""
    await SubscriptionHandlers.handle_cancel_subscription_confirmation(callback)

# 4. –ù–û–í–´–ï –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ upsell —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@dp.callback_query(lambda c: c.data == "dismiss_upsell")
@handle_telegram_errors
async def handle_dismiss_upsell(callback: types.CallbackQuery):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ upsell —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    await SubscriptionHandlers.dismiss_upsell(callback)

@dp.callback_query(lambda c: c.data == "subscription_current")
@handle_telegram_errors
async def handle_current_subscription(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É"""
    await callback.answer("‚úÖ –≠—Ç–æ –≤–∞—à–∞ —Ç–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞", show_alert=True)

@dp.callback_query(lambda c: c.data == "cancel_photo_analysis")
async def process_cancel_photo_analysis(callback_query: types.CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ"""
    await cancel_photo_analysis(callback_query)

@dp.callback_query()
@handle_telegram_errors
async def handle_button_action(callback: types.CallbackQuery):
    if callback.data == "more_docs":
        user_id = callback.from_user.id
        state = user_states.get(user_id)

        if isinstance(state, dict) and state.get("mode") == "viewing_documents":
            user_states[user_id]["offset"] += 5
            from documents import handle_show_documents
            await handle_show_documents(callback.message, user_id=user_id)
        else:
            lang = await get_user_language(user_id)  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω await
            await callback.message.answer(t("unknown_state", lang))
        await callback.answer()
        return
        
    if callback.data == "edit_meds":
        user_states[callback.from_user.id] = "editing_medications"
        lang = await get_user_language(callback.from_user.id)
        await callback.message.answer(t("edit_schedule", lang))
        await callback.answer()
        return
    
    if callback.data == "settings_profile":
        lang = await get_user_language(callback.from_user.id)
        await callback.message.answer(t("profile_later", lang))
        await callback.answer()
        return

    if callback.data == "settings_help":
        lang = await get_user_language(callback.from_user.id)
        await callback.message.answer(t("help_later", lang))
        await callback.answer()
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
    try:
        action, doc_id = callback.data.split("_", 1)
        doc_id = int(doc_id)

        if action == "ignore":
            await handle_ignore_document(callback, doc_id)
            return

        user_id = callback.from_user.id
        doc = await get_document_by_id(doc_id)
        lang = await get_user_language(user_id)
        
        if not doc or doc["user_id"] != user_id:
            await callback.message.answer(t("document_not_found", lang))
            return

        if action == "view":
            title = html.escape(doc["title"])
            text = doc["raw_text"] or t("empty_document", lang)
            clean_text = html.escape(text[:4000])
            from utils.security import safe_send_message
            await safe_send_message(callback.message, clean_text, title=title)
        elif action == "rename":
            user_states[user_id] = f"rename_{doc_id}"
            await callback.message.answer(t("enter_new_name", lang))
        elif action == "delete":
            await delete_document(doc_id)
            await callback.message.answer(t("document_deleted", lang))
        elif action == "download":
            file_path = doc.get("file_path")
            if not file_path or not os.path.exists(file_path):
                await callback.message.answer(t("file_not_found", lang))
                return
            await callback.message.answer_document(types.FSInputFile(path=file_path))
            
    except Exception as e:
        user_id = callback.from_user.id
        lang = await get_user_language(user_id)
        log_error_with_context(e, {"user_id": user_id, "action": "button_callback", "callback_data": callback.data})
        await callback.message.answer(get_user_friendly_message(e, lang))

# üöÄ –ó–ê–ú–ï–ù–ò–¢–ï –§–£–ù–ö–¶–ò–Æ main() –í –ö–û–ù–¶–ï –í–ê–®–ï–ì–û main.py –ù–ê –≠–¢–£:

@handle_telegram_errors
async def main():
    """
    üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è main() —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
    """
    print("üöÄ –ó–∞–ø—É—Å–∫ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –±–æ—Ç–∞...")
    
    try:
        # üîß 1. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ USER STATE
        from user_state_manager import UserStateManager
        user_state_manager = UserStateManager(ttl_minutes=60)
        print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è...")
        
        # üí≥ 2. –ü–†–û–í–ï–†–ö–ê STRIPE
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Stripe...")
        stripe_ok = check_stripe_setup()  # –ë–ï–ó await - —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ async!
        if stripe_ok:
            print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Stripe API —É—Å–ø–µ—à–Ω–æ")
            print("üí≥ Stripe –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        
        # üåê 3. –ó–ê–ü–£–°–ö WEBHOOK –°–ï–†–í–ï–†–ê
        from webhook_subscription_handler import start_webhook_server
        webhook_runner = await start_webhook_server(bot, port=8080)
        
        # üóÑÔ∏è 4. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø POSTGRESQL (–ö–†–ò–¢–ò–ß–ù–û!)
        print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...")
        await initialize_db_pool(max_connections=10)
        print("üóÑÔ∏è Database pool –≥–æ—Ç–æ–≤")
        
        # üß† 5. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø VECTOR DB (–ü–û–°–õ–ï PostgreSQL!)
        from vector_db_postgresql import initialize_vector_db
                
        await initialize_vector_db()
        print("üß† Vector database –≥–æ—Ç–æ–≤–∞")
        
        # ü§ñ 6. –ü–†–û–í–ï–†–ö–ê OPENAI
        openai_status = await check_openai_status()
        if openai_status:
            print("‚úÖ OpenAI API –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å OpenAI API")
        
       
        print("üö¶ Rate Limiter –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        print("   - –°–æ–æ–±—â–µ–Ω–∏—è: 10/–º–∏–Ω")
        print("   - –î–æ–∫—É–º–µ–Ω—Ç—ã: 3/5–º–∏–Ω") 
        print("   - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: 3/10–º–∏–Ω")
        print("   - –ó–∞–º–µ—Ç–∫–∏: 5/5–º–∏–Ω")
        
        # üöÄ 8. –ó–ê–ü–£–°–ö –ë–û–¢–ê
        await dp.start_polling(bot)
        
    except KeyboardInterrupt:
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        log_error_with_context(e, {"action": "main_startup"})
        
    finally:
        # üßπ –û–ß–ò–°–¢–ö–ê –†–ï–°–£–†–°–û–í
        print("üßπ –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...")
        try:
            await close_db_pool()
            print("‚úÖ –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç—ã")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±–∞–∑: {e}")

# üéØ –¢–û–ß–ö–ê –í–•–û–î–ê (–≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞, –∑–∞–º–µ–Ω–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é)
if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")