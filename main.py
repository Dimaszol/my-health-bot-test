import asyncio
import os
import html
import logging
from datetime import datetime
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.client.default import DefaultBotProperties

from db_postgresql import (
    get_user, save_document, update_document_title, is_fully_registered, get_user_name,
    get_document_by_id, delete_document, save_message, get_last_messages, get_conversation_summary,
    get_user_language, t, get_all_values_for_key, initialize_db_pool, close_db_pool, set_user_language, save_user
)
from registration import user_states, start_registration, handle_registration_step
from error_handler import handle_telegram_errors, BotError, OpenAIError, get_user_friendly_message, log_error_with_context, check_openai_health
from keyboards import main_menu_keyboard, settings_keyboard, show_main_menu
from profile_keyboards import (
    profile_view_keyboard, profile_edit_keyboard, smoking_choice_keyboard,
    alcohol_choice_keyboard, activity_choice_keyboard, language_choice_keyboard, cancel_keyboard
)
from profile_manager import ProfileManager, CHOICE_MAPPINGS
from documents import handle_show_documents, handle_ignore_document
from save_utils import maybe_update_summary, format_user_profile
from rate_limiter import check_rate_limit, record_user_action
from vector_db_postgresql import initialize_vector_db, search_similar_chunks, keyword_search_chunks
from gpt import ask_doctor, check_openai_status, fallback_summarize
from subscription_manager import SubscriptionManager, check_gpt4o_limit, spend_gpt4o_limit
from stripe_config import check_stripe_setup
from subscription_handlers import SubscriptionHandlers, upsell_tracker
from notification_system import NotificationSystem
from stripe_manager import StripeManager
from prompt_logger import process_user_question_detailed
from photo_analyzer import handle_photo_analysis, handle_photo_question, cancel_photo_analysis
from analytics_system import Analytics
from faq_handler import handle_faq_main, handle_faq_section
from promo_manager import PromoManager, check_promo_on_message
from safe_message_answer import send_error_message, send_response_message
from user_checker import full_process_debug_7374723347

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),  # –õ–æ–≥–∏ –≤ —Ñ–∞–π–ª
        logging.StreamHandler()  # –õ–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)

# –£–±–∏—Ä–∞–µ–º —Å–ø–∞–º –æ—Ç —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
logging.getLogger('aiogram').setLevel(logging.WARNING)
logging.getLogger('aiohttp').setLevel(logging.WARNING)
logging.getLogger('urllib3').setLevel(logging.WARNING)

# –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

def detect_user_language(user: types.User) -> str:
    """–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ Telegram"""
    phone_lang = user.language_code if user.language_code else 'en'
    
    # –ü—Ä–æ—Å—Ç–æ–π –º–∞–ø–ø–∏–Ω–≥ –Ω–∞ 4 —è–∑—ã–∫–∞
    if phone_lang == 'ru':
        return 'ru'
    elif phone_lang == 'uk': 
        return 'uk'
    elif phone_lang == 'de':
        return 'de'
    else:
        return 'en'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

@dp.message(CommandStart())
@handle_telegram_errors
async def send_welcome(message: types.Message):
    """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    
    user_id = message.from_user.id
    
    try:
        # 1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = await get_user(user_id)
        auto_lang = detect_user_language(message.from_user)
        
        # 2Ô∏è‚É£ –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω–æ–≤—ã–π —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –Ω–µ—Ç
        is_new_user = user_data is None
        
        # üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        await Analytics.track_user_started(user_id, auto_lang, is_new_user)
        
        # 3Ô∏è‚É£ –ù–û–í–´–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨
        if user_data is None:
            await set_user_language(user_id, auto_lang, message.from_user)
            
            from registration import show_gdpr_welcome
            await show_gdpr_welcome(user_id, message, auto_lang)
            return
            
        # 4Ô∏è‚É£ –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ - –ø—Ä–æ–≤–µ—Ä—è–µ–º GDPR —Å–æ–≥–ª–∞—Å–∏–µ
        from db_postgresql import has_gdpr_consent
        if not await has_gdpr_consent(user_id):
            lang = await get_user_language(user_id) 
            from registration import show_gdpr_welcome
            await show_gdpr_welcome(user_id, message, lang)
            return
        
        # 5Ô∏è‚É£ –ü–†–û–í–ï–†–Ø–ï–ú –†–ï–ì–ò–°–¢–†–ê–¶–ò–Æ (–∏–º—è + –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π)
        lang = await get_user_language(user_id)
        
        if await is_fully_registered(user_id):
            # ‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∏–º—è –∏ –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            name = user_data.get('name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
            
            await message.answer(
                t("welcome_back", lang, name=name), 
                reply_markup=main_menu_keyboard(lang)
            )
        else:
            
            from registration import start_registration
            await start_registration(user_id, message)
            
    except Exception as e:
        log_error_with_context(e, {"action": "start_command", "user_id": user_id})
        await message.answer(t("start_command_error", lang))

async def start_registration_with_language_option(user_id: int, message: types.Message, lang: str):
    """–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–º–µ–Ω—ã —è–∑—ã–∫–∞"""
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏
    user_states[user_id] = {"step": "awaiting_name"}
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ç—Ä–æ-—Ç–µ–∫—Å—Ç
    intro_text = f"{t('intro_1', lang)}\n\n{t('intro_2', lang)}\n\n{t('ask_name', lang)}"
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=t("change_language", lang), 
            callback_data="change_language_registration"
        )]
    ])
    
    await message.answer(
        intro_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )

# üÜï –î–û–ë–ê–í–¨–¢–ï —ç—Ç–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ü–û–°–õ–ï start_registration_with_language_option:

@dp.callback_query(lambda c: c.data == "change_language_registration")
async def handle_language_change_during_registration(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–æ–≤
    language_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üá¨üáß English", callback_data="set_lang_en")],
        [InlineKeyboardButton(text="üá©üá™ Deutsch", callback_data="set_lang_de")],
        [InlineKeyboardButton(text="üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", callback_data="set_lang_uk")],
        [InlineKeyboardButton(text="üá∑ –†—É—Å—Å–∫–∏–π", callback_data="set_lang_ru")]
        
    ])
    
    await callback.message.edit_text(
        "üá¨üáß Choose your language\n"
        "üá©üá™ Sprache w√§hlen\n"
        "üá∫üá¶ –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É\n"
        "üá∑ –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞", 
        
        reply_markup=language_keyboard
    )
    
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("set_lang_"))
@handle_telegram_errors  # ‚úÖ –î–û–ë–ê–í–ò–¢–¨ –≠–¢–û–¢ –î–ï–ö–û–†–ê–¢–û–†!
async def handle_set_language_during_registration(callback: types.CallbackQuery):
    """–û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫"""
    user_id = callback.from_user.id
    selected_lang = callback.data.replace("set_lang_", "")
    
    try:  # ‚úÖ –î–û–ë–ê–í–ò–¢–¨ TRY-CATCH
        # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await set_user_language(user_id, selected_lang)
        
        # ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú: —ç—Ç–æ GDPR —ç–∫—Ä–∞–Ω –∏–ª–∏ –æ–±—ã—á–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è?
        user_data = await get_user(user_id)
        from db_postgresql import has_gdpr_consent
        
        if user_data is None or not await has_gdpr_consent(user_id):
            # –≠—Ç–æ GDPR —ç–∫—Ä–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏—Å–∫–ª–µ–π–º–µ—Ä –∑–∞–Ω–æ–≤–æ
            from registration import show_gdpr_welcome
            await show_gdpr_welcome(user_id, callback.message, selected_lang)
        else:
            # –≠—Ç–æ –æ–±—ã—á–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            await start_registration(user_id, callback.message)
    
    except Exception as e:
        try:
            from registration import show_gdpr_welcome
            await show_gdpr_welcome(user_id, callback.message, selected_lang)
        except Exception as e2:
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start", show_alert=True)
    
    await callback.answer()

@dp.callback_query(lambda callback: callback.data == "gdpr_consent_agree")
@handle_telegram_errors
async def handle_gdpr_consent(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ GDPR —Å–æ–≥–ª–∞—Å–∏—è"""
    user_id = callback.from_user.id
    lang = await get_user_language(user_id)
    
    try:
        # ‚úÖ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –£–ñ–ï –°–£–©–ï–°–¢–í–£–ï–¢ (—Å–æ–∑–¥–∞–Ω –≤ set_user_language)
        # –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º GDPR —Å–æ–≥–ª–∞—Å–∏–µ
        from db_postgresql import set_gdpr_consent
        success = await set_gdpr_consent(user_id, True)
        
        if not success:
            await callback.answer(
                t("error_database_error", lang), 
                show_alert=True
            )
            return
        
        # ‚úÖ –ü–û–ö–ê–ó–´–í–ê–ï–ú –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï
        await callback.message.edit_text(
            t("gdpr_consent_given", lang)
        )
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ UX
        await asyncio.sleep(1)
        
        # ‚úÖ –ó–ê–ü–£–°–ö–ê–ï–ú –†–ï–ì–ò–°–¢–†–ê–¶–ò–Æ
        from registration import start_registration
        await start_registration(user_id, callback.message)
        
    except Exception as e:
        log_error_with_context(e, {"function": "handle_gdpr_consent", "user_id": user_id})
        await callback.answer(
            t("start_command_error", lang), 
            show_alert=True
        )
    
    await callback.answer()

@dp.message(lambda msg: msg.text in get_all_values_for_key("main_upload_doc"))
@handle_telegram_errors
async def prompt_document_upload(message: types.Message):
    user_id = message.from_user.id
    lang = await get_user_language(user_id)
    
    # ‚úÖ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    can_upload = await NotificationSystem.check_and_notify_limits(
        message, user_id, action_type="document"
    )
    
    if not can_upload:
        return  # –õ–∏–º–∏—Ç—ã –∏—Å—á–µ—Ä–ø–∞–Ω—ã, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–æ
    
    # –ï—Å–ª–∏ –ª–∏–º–∏—Ç—ã –µ—Å—Ç—å - —Ä–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    user_states[message.from_user.id] = "awaiting_document"
    
    # ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞" –≤–º–µ—Å—Ç–æ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    from keyboards import cancel_keyboard
    await message.answer(
        t("please_send_file", lang), 
        reply_markup=cancel_keyboard(lang)  # ‚Üê –í–û–¢ –≠–¢–û –í–ê–ñ–ù–û!
    )

@dp.message(lambda msg: msg.text in get_all_values_for_key("main_note"))
@handle_telegram_errors
async def prompt_memory_note(message: types.Message):
    user_id = message.from_user.id
    lang = await get_user_language(user_id)
    user_states[message.from_user.id] = "awaiting_memory_note"
    
    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º cancel_keyboard –∏–∑ keyboards
    from keyboards import cancel_keyboard
    await message.answer(
        t("write_note", lang), 
        reply_markup=cancel_keyboard(lang)
    )

@dp.message(Command("storage_full"))
async def show_full_storage(message):
    if message.from_user.id != 7374723347: return
    
    import os
    try:
        base_path = "/app/persistent_files"
        total_files = 0
        total_size = 0
        result = "üìÅ **–ü–û–õ–ù–û–ï –•–†–ê–ù–ò–õ–ò–©–ï:**\n\n"
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ø–∞–ø–∫–∞–º –∏ —Ñ–∞–π–ª–∞–º
        for root, dirs, files in os.walk(base_path):
            if not files: continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –ø–∞–ø–∫–∏
            
            # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –æ—Ç base_path
            rel_path = root.replace(base_path, "").lstrip("/")
            if not rel_path: rel_path = "root"
            
            # –°—á–∏—Ç–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–∞–ø–∫–∏
            folder_size = 0
            for file in files:
                try:
                    file_path = os.path.join(root, file)
                    size = os.path.getsize(file_path)
                    folder_size += size
                    total_size += size
                except: pass
            
            total_files += len(files)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result += f"üìÇ **{rel_path}**\n"
            result += f"   üìä {len(files)} —Ñ–∞–π–ª–æ–≤, {folder_size/1024/1024:.1f} MB\n"
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ —Ñ–∞–π–ª—ã
            for i, file in enumerate(files[:3]):
                result += f"   üìÑ {file}\n"
            
            if len(files) > 3:
                result += f"   üìÑ ... –µ—â–µ {len(files)-3} —Ñ–∞–π–ª–æ–≤\n"
            
            result += "\n"
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(result) > 3500:
                result += "... (–ø–æ–∫–∞–∑–∞–Ω–æ —á–∞—Å—Ç–∏—á–Ω–æ)"
                break
        
        result += f"üéØ **–ò–¢–û–ì–û:** {total_files} —Ñ–∞–π–ª–æ–≤, {total_size/1024/1024:.1f} MB"
        
        await message.answer(result, parse_mode="Markdown")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@dp.message(lambda msg: msg.text in get_all_values_for_key("main_documents"))
@handle_telegram_errors
async def show_documents_handler(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id] = {"mode": "viewing_documents", "offset": 0}
    await handle_show_documents(message, user_id=message.from_user.id)

@dp.message(lambda msg: msg.text in get_all_values_for_key("main_schedule"))
@handle_telegram_errors
async def show_medications_schedule(message: types.Message):
    try:
        from db_postgresql import format_medications_schedule
        from locales import translations
        
        user_id = message.from_user.id
        lang = await get_user_language(user_id)

        text = await format_medications_schedule(user_id)
        if not text:
            text = translations[lang]["schedule_empty"]

        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(
                text=translations[lang]["edit_schedule_button"],
                callback_data="edit_meds"
            )
        ]])
        await message.answer(
            f"üóì <b>{translations[lang]['your_schedule']}</b>\n\n<pre>{text}</pre>",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        lang = await get_user_language(message.from_user.id)
        log_error_with_context(e, {"user_id": message.from_user.id, "action": "show_medications"})
        await message.answer(get_user_friendly_message(e, lang))

@dp.message(lambda msg: msg.text in get_all_values_for_key("main_settings"))
@handle_telegram_errors
async def show_settings_menu_new(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    lang = await get_user_language(message.from_user.id)
    
    await message.answer(
        t("settings_menu_title", lang),
        reply_markup=settings_keyboard(lang)
    )

@dp.callback_query(lambda c: c.data.startswith("promo_buy:"))
@handle_telegram_errors
async def handle_promo_purchase_callback(callback: types.CallbackQuery):
    """
    üí≥ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É
    """
    logger.info(f"üé´ User {callback.from_user.id} –Ω–∞–∂–∞–ª –Ω–∞ –ø—Ä–æ–º–æ–∫–Ω–æ–ø–∫—É: {callback.data}")
    await PromoManager.handle_promo_purchase(callback)

@dp.callback_query(lambda c: c.data == "promo_dismiss")
@handle_telegram_errors
async def handle_promo_dismiss_callback(callback: types.CallbackQuery):
    """
    ‚è∞ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ú–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ"
    """
    logger.info(f"‚è∞ User {callback.from_user.id} –æ—Ç–ª–æ–∂–∏–ª –ø—Ä–æ–º–æ–∫–æ–¥")
    await PromoManager.handle_promo_dismiss(callback)

@dp.message(lambda msg: msg.text == "/reset123456")
@handle_telegram_errors
async def reset_user(message: types.Message):
    user_id = message.from_user.id
    from db_postgresql import delete_user_completely

    await delete_user_completely(user_id)
    lang = "ru"  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —è–∑—ã–∫ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    await message.answer(t("reset_done", lang))

delete_confirmation_states = {}

@dp.callback_query(lambda c: c.data == "delete_profile_data")
@handle_telegram_errors  
async def handle_delete_profile_data(callback: types.CallbackQuery):
    """–ü–µ—Ä–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    user_id = callback.from_user.id
    lang = await get_user_language(user_id)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=t("delete_data_confirm", lang),
            callback_data="delete_data_step2"
        )],
        [InlineKeyboardButton(
            text=t("delete_data_cancel", lang), 
            callback_data="back_to_profile"
        )]
    ])
    
    await callback.message.edit_text(
        t("delete_data_warning", lang),
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "delete_data_step2")
@handle_telegram_errors
async def handle_delete_step2(callback: types.CallbackQuery):
    """–ó–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    user_id = callback.from_user.id
    lang = await get_user_language(user_id)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞
    delete_confirmation_states[user_id] = "awaiting_delete_code"
    
    # –£–±–∏—Ä–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å –∫–æ–¥–æ–º
    await callback.message.edit_text(
        t("delete_data_code_prompt", lang),
        parse_mode="HTML"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –≤–≤–æ–¥–∞
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=t("cancel", lang))]],
        resize_keyboard=True
    )
    
    await callback.message.answer(
        t("delete_data_code_input", lang),
        reply_markup=keyboard
    )
    
    await callback.answer()

# ‚úÖ –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–í–û–î–ê –ö–û–î–ê (—Ç–æ—Ç –∂–µ —á—Ç–æ –±—ã–ª)
@dp.message(lambda msg: msg.from_user.id in delete_confirmation_states)
@handle_telegram_errors
async def handle_delete_confirmation_code(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è"""
    user_id = message.from_user.id
    lang = await get_user_language(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if delete_confirmation_states.get(user_id) != "awaiting_delete_code":
        return
    
    # –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    delete_confirmation_states.pop(user_id, None)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
    if message.text and message.text.strip().upper() == "DELETE":
        # –ö–æ–¥ –≤–µ—Ä–Ω—ã–π - –≤—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
        await message.answer(
            t("deleting_all_data", lang), 
            reply_markup=types.ReplyKeyboardRemove()
        )
        
        try:
            from db_postgresql import delete_user_completely
            success = await delete_user_completely(user_id)
            
            if success:
                await message.answer(t("delete_data_success", "ru"))  # –î–µ—Ñ–æ–ª—Ç–Ω—ã–π —è–∑—ã–∫ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
            else:
                await message.answer(t("delete_error_contact_support", lang))
                
        except Exception as e:
            await message.answer(t("delete_error_contact_support", lang))
            
    else:
        # –ö–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π
        await message.answer(
            t("delete_data_code_wrong", lang),
            reply_markup=types.ReplyKeyboardRemove()
        )
        from keyboards import show_main_menu
        await show_main_menu(message, lang)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Ñ–∏–ª—é
        await asyncio.sleep(1)
        profile_text = await ProfileManager.get_profile_text(user_id, lang)
        await message.answer(
            profile_text,
            reply_markup=profile_view_keyboard(lang),
            parse_mode="HTML"
        )

# üìä –ö–û–ú–ê–ù–î–ê –î–õ–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò (–¢–û–õ–¨–ö–û –î–õ–Ø –ê–î–ú–ò–ù–ê)
ADMIN_USER_ID = 7374723347  # üî• –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® TELEGRAM ID!

@dp.message(lambda msg: msg.text == "/stats")
@handle_telegram_errors
async def show_stats(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    user_id = message.from_user.id
    
    if user_id != ADMIN_USER_ID:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é
        stats = await Analytics.get_stats(days=7)
        
        report = f"""üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê 7 –î–ù–ï–ô</b>

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: {stats['total_users']}
‚Ä¢ –ù–æ–≤—ã—Ö: {stats['new_users']}

üìà <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {stats['registrations']}
‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã: {stats['documents']}
‚Ä¢ –í–æ–ø—Ä–æ—Å—ã: {stats['questions']}
‚Ä¢ –û–ø–ª–∞—Ç—ã: {stats['payments']}

üìä <b>–ö–æ–Ω–≤–µ—Ä—Å–∏–∏:</b>
‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {stats['registration_rate']:.1f}%
‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {stats['document_rate']:.1f}%

üéØ <b>–û—Ü–µ–Ω–∫–∞ MVP:</b>"""

        # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞
        if stats['registration_rate'] > 70:
            report += "\nüü¢ –û—Ç–ª–∏—á–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!"
        elif stats['registration_rate'] > 50:
            report += "\nüü° –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"
        else:
            report += "\nüî¥ –ù–∏–∑–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è - —É–ª—É—á—à–∏—Ç—å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥"
        
        if stats['document_rate'] > 50:
            report += "\nüü¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ –∑–∞–≥—Ä—É–∂–∞—é—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã!"
        elif stats['document_rate'] > 30:
            report += "\nüü° –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏"
        else:
            report += "\nüî¥ –ú–∞–ª–æ –∑–∞–≥—Ä—É–∑–æ–∫ - —É–ª—É—á—à–∏—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏"
        
        await message.answer(report, parse_mode="HTML")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

@dp.message(lambda msg: msg.text == "/analytics")
@handle_telegram_errors  
async def show_analytics_help(message: types.Message):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ"""
    user_id = message.from_user.id
    
    if user_id != ADMIN_USER_ID:
        return
    
    help_text = """üîß <b>–ö–û–ú–ê–ù–î–´ –ê–ù–ê–õ–ò–¢–ò–ö–ò</b>

üìä <code>/stats</code> - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 7 –¥–Ω–µ–π
üìà <code>/stats_today</code> - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è (—Å–∫–æ—Ä–æ)
üìã <code>/funnel</code> - –∞–Ω–∞–ª–∏–∑ –≤–æ—Ä–æ–Ω–∫–∏ (—Å–∫–æ—Ä–æ)

üí° <b>–ß—Ç–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º:</b>
‚Ä¢ user_started - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
‚Ä¢ registration_completed - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏  
‚Ä¢ document_uploaded - –∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
‚Ä¢ question_asked - –≤–æ–ø—Ä–æ—Å—ã –∫ –ò–ò
‚Ä¢ payment_completed - –æ–ø–ª–∞—Ç—ã

üéØ <b>–ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞ MVP:</b>
‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è > 70%
‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ > 50%
‚Ä¢ –í–æ–∑–≤—Ä–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π > 15%"""

    await message.answer(help_text, parse_mode="HTML")




@dp.message()
@handle_telegram_errors
async def handle_user_message(message: types.Message):
    user_id = message.from_user.id
    lang = await get_user_language(user_id)

    from db_postgresql import has_gdpr_consent
    if not await has_gdpr_consent(user_id):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º GDPR –¥–∏—Å–∫–ª–µ–π–º–µ—Ä –≤–º–µ—Å—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        from registration import show_gdpr_welcome
        await show_gdpr_welcome(user_id, message, lang)
        return  # ‚ö†Ô∏è –í–ê–ñ–ù–û: –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É!
    
    # ‚úÖ –ù–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê: –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö Reply-–∫–Ω–æ–ø–æ–∫ (–î–û–ë–ê–í–ò–¢–¨ –ó–î–ï–°–¨)
    if message.text:
        # ‚úÖ –ü–û–õ–ù–´–ô –°–ü–ò–°–û–ö –≤—Å–µ—Ö Reply-–∫–Ω–æ–ø–æ–∫ –∏–∑ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
        reply_buttons = [
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            t("skip", lang),                    # ‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å
            t("cancel", lang),                  # ‚ùå –û—Ç–º–µ–Ω–∞
            t("cancel_analysis", lang),         # ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å (–∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ)
            
            # –ö–Ω–æ–ø–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ - –ø–æ–ª
            t("gender_male", lang),             # –ú—É–∂—Å–∫–æ–π/Male/M√§nnlich/–ß–æ–ª–æ–≤—ñ—á–∞
            t("gender_female", lang),           # –ñ–µ–Ω—Å–∫–∏–π/Female/Weiblich/–ñ—ñ–Ω–æ—á–∞  
            t("gender_other", lang),            # –î—Ä—É–≥–æ–µ/Other/Andere/–Ü–Ω—à–µ
            
            # –ö–Ω–æ–ø–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ - –∫—É—Ä–µ–Ω–∏–µ
            t("smoking_yes", lang),             # –î–∞/Yes/Ja/–¢–∞–∫
            t("smoking_no", lang),              # –ù–µ—Ç/No/Nein/–ù—ñ
            "Vape",                             # Vape (–Ω–∞ –≤—Å–µ—Ö —è–∑—ã–∫–∞—Ö –æ–¥–∏–Ω–∞–∫–æ–≤–æ)
            
            # –ö–Ω–æ–ø–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ - –∞–ª–∫–æ–≥–æ–ª—å
            t("alcohol_never", lang),           # –ù–µ —É–ø–æ—Ç—Ä–µ–±–ª—è—é/Never/Nie/–ù–µ –≤–∂–∏–≤–∞—é
            t("alcohol_sometimes", lang),       # –ò–Ω–æ–≥–¥–∞/Sometimes/Manchmal/–Ü–Ω–æ–¥—ñ
            t("alcohol_often", lang),           # –ß–∞—Å—Ç–æ/Often/Oft/–ß–∞—Å—Ç–æ
            
            # –ö–Ω–æ–ø–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            t("complete_profile", lang),        # üìù –î–æ–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É
            t("finish_registration", lang),     # ‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            
            # –ö–Ω–æ–ø–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Å —ç–º–æ–¥–∑–∏ –¥–ª—è –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤)
            "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", "üö∂ –ù–∏–∑–∫–∞—è", "üèÉ –°—Ä–µ–¥–Ω—è—è", "üí™ –í—ã—Å–æ–∫–∞—è", "üèÜ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è",
            "‚ùå –í—ñ–¥—Å—É—Ç–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å", "üö∂ –ù–∏–∑—å–∫–∞", "üèÉ –°–µ—Ä–µ–¥–Ω—è", "üí™ –í–∏—Å–æ–∫–∞", "üèÜ –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∞", 
            "‚ùå No activity", "üö∂ Low", "üèÉ Medium", "üí™ High", "üèÜ Professional",
            "‚ùå Keine Aktivit√§t", "üö∂ Niedrig", "üèÉ Mittel", "üí™ Hoch", "üèÜ Professionell",
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            "–î–∞", "–ù–µ—Ç", "–¢–∞–∫", "–ù—ñ", "Yes", "No", "Ja", "Nein",
            "–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π", "–î—Ä—É–≥–æ–µ", "–ß–æ–ª–æ–≤—ñ—á–∞", "–ñ—ñ–Ω–æ—á–∞", "–Ü–Ω—à–µ",
            "Male", "Female", "Other", "M√§nnlich", "Weiblich", "Andere",
            "–ù–µ —É–ø–æ—Ç—Ä–µ–±–ª—è—é", "–ò–Ω–æ–≥–¥–∞", "–ß–∞—Å—Ç–æ", "–ù–µ –≤–∂–∏–≤–∞—é", "–Ü–Ω–æ–¥—ñ",
            "Never", "Sometimes", "Often", "Nie", "Manchmal", "Oft"
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º: —ç—Ç–æ Reply-–∫–Ω–æ–ø–∫–∞ –ò –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è?
        current_state = user_states.get(user_id)
        is_in_delete_state = user_id in delete_confirmation_states
        
        if message.text in reply_buttons and not current_state and not is_in_delete_state:
            # ‚úÖ –≠—Ç–æ —É—Å—Ç–∞—Ä–µ–≤—à–∞—è Reply-–∫–Ω–æ–ø–∫–∞!
            await message.answer(
                t("button_expired", lang),
                reply_markup=types.ReplyKeyboardRemove()  # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await show_main_menu(message, lang)
            return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limits
    allowed, rate_message = await check_rate_limit(user_id, "message")
    if not allowed:
        await message.answer(rate_message)
        return

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await record_user_action(user_id, "message")
    
    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –ü–ï–†–í–´–ú –î–ï–õ–û–ú (–¥–æ –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫)
    if message.text and message.text in [t("cancel", lang)]:
        if user_id in delete_confirmation_states:
            delete_confirmation_states.pop(user_id, None)  # –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await message.answer(
                t("profile_delete_cancelled", lang),
                reply_markup=types.ReplyKeyboardRemove()
            )
            # ‚úÖ –ü–û–ö–ê–ó–´–í–ê–ï–ú –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ
            await show_main_menu(message, lang)
            return
        current_state = user_states.get(user_id)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_states[user_id] = None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫—É—é –æ—Ç–º–µ–Ω—É –≤—ã–ø–æ–ª–Ω—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if current_state == "awaiting_memory_note":
            await message.answer(
                t("note_cancelled", lang),
                reply_markup=types.ReplyKeyboardRemove()  # ‚úÖ –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            )
        elif isinstance(current_state, dict) and current_state.get("mode") == "editing_profile":
            await message.answer(
                t("profile_edit_cancelled", lang),
                reply_markup=types.ReplyKeyboardRemove()  # ‚úÖ –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            )
        elif current_state == "editing_medications":
            await message.answer(
                t("medication_edit_cancelled", lang),
                reply_markup=types.ReplyKeyboardRemove()  # ‚úÖ –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            )
        elif isinstance(current_state, str) and current_state.startswith("rename_"):
            await message.answer(
                t("rename_cancelled", lang),
                reply_markup=types.ReplyKeyboardRemove()  # ‚úÖ –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            )
        else:
            # –õ—é–±–∞—è –¥—Ä—É–≥–∞—è –æ—Ç–º–µ–Ω–∞
            await message.answer(
                t("operation_cancelled", lang),
                reply_markup=types.ReplyKeyboardRemove()  # ‚úÖ –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            )
        
        # ‚úÖ –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í–°–ï–ì–î–ê –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã
        
        await show_main_menu(message, lang)
        return  # ‚úÖ –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, –±–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º

    # ‚úÖ –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ü–û–°–õ–ï –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã
    current_state = user_states.get(user_id)
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç
    if current_state == "awaiting_document":
        if message.text is not None:  # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ —Ñ–∞–π–ª–∞
            await message.answer(t("unrecognized_document", lang))
            user_states[user_id] = None
            # ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await show_main_menu(message, lang)
            return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
    if message.text is None:
        if current_state == "awaiting_document":
            allowed, error_msg = await check_rate_limit(user_id, "document")
            if not allowed:
                await message.answer(error_msg)
                return
            try:
                from upload import handle_document_upload
                await handle_document_upload(message, bot)
                await record_user_action(user_id, "document")
                return
            except Exception as e:
                log_error_with_context(e, {"user_id": user_id, "action": "document_upload"})
                await message.answer(get_user_friendly_message(e, lang))
                return
        
        elif message.content_type == types.ContentType.PHOTO:
            # ‚úÖ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            allowed, error_msg = await check_rate_limit(user_id, "image")
            if not allowed:
                await message.answer(error_msg)
                return
            try:
                await handle_photo_analysis(message, bot)
                await record_user_action(user_id, "image")
                return
            except Exception as e:
                log_error_with_context(e, {"user_id": user_id, "action": "photo_analysis"})
                await message.answer(get_user_friendly_message(e, lang))
                return

        else:
            # –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è
            await message.answer(t("unsupported_input", lang))
            return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if await handle_registration_step(user_id, message):
        return
    
    # ‚úÖ –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –∫ —Ñ–æ—Ç–æ
    elif isinstance(current_state, dict) and current_state.get("type") == "awaiting_photo_question":
        try:
            await handle_photo_question(message, bot)
            return
        except Exception as e:
            log_error_with_context(e, {"user_id": user_id, "action": "photo_question"})
            await message.answer(get_user_friendly_message(e, lang))
            return
        
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    elif isinstance(current_state, str) and current_state.startswith("rename_"):
        # ‚úÖ –û—Ç–º–µ–Ω–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤—ã—à–µ, —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        try:
            doc_id = int(current_state.split("_")[1])
            new_title = message.text.strip()
            await update_document_title(doc_id, new_title)
            await message.answer(t("document_renamed", lang, name=new_title), parse_mode="HTML")
            user_states[user_id] = None
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
            await show_main_menu(message, lang)
            return
        except Exception as e:
            log_error_with_context(e, {"user_id": user_id, "action": "rename_document"})
            await message.answer(get_user_friendly_message(e, lang))
            return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–º–µ—Ç–æ–∫ –≤ –ø–∞–º—è—Ç—å
    elif current_state == "awaiting_memory_note":
        # ‚úÖ –û—Ç–º–µ–Ω–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤—ã—à–µ, —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        allowed, error_msg = await check_rate_limit(user_id, "note")
        if not allowed:
            await message.answer(error_msg)
            return
        try:
            from gpt import summarize_note_text, generate_title_for_note
            from vector_db_postgresql import split_into_chunks, add_chunks_to_vector_db
            from documents import send_note_controls

            note_text = message.text.strip()
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –≤—ã–∑–æ–≤—ã GPT —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            try:
                title = await generate_title_for_note(note_text)
                summary = await summarize_note_text(note_text, lang)
            except OpenAIError as e:
                title = f"–ó–∞–º–µ—Ç–∫–∞ {datetime.now().strftime('%Y-%m-%d %H:%M')}"
                summary = fallback_summarize(note_text, lang)
                await message.answer("‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∑–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º –≤–∏–¥–µ.")

            document_id = await save_document(
                user_id=user_id,
                title=title,
                file_path="memory_note",
                file_type="note",
                raw_text=note_text,
                summary=summary,
                confirmed=True
            )

            chunks = await split_into_chunks(summary, document_id, user_id)
            await add_chunks_to_vector_db(document_id, user_id, chunks)

            await message.answer(t("note_saved", lang, title=title), parse_mode="HTML")
            await send_note_controls(message, document_id)
            user_states[user_id] = None
            
            await record_user_action(user_id, "note")
            
            await show_main_menu(message, lang)
            return
            
        except Exception as e:
            log_error_with_context(e, {"user_id": user_id, "action": "save_memory_note"})
            await message.answer(get_user_friendly_message(e, lang))
            return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    elif isinstance(current_state, dict) and current_state.get("mode") == "editing_profile":
        # ‚úÖ –û—Ç–º–µ–Ω–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤—ã—à–µ, —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        try:
            state = user_states[user_id]
            field = state.get("field")
            
            if not field:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                user_states[user_id] = None
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ
            success, response_message = await ProfileManager.update_field(
                user_id, field, message.text, lang
            )
            
            if success:
                await message.answer(
                    response_message,
                    reply_markup=types.ReplyKeyboardRemove()  # ‚úÖ –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                )
                user_states[user_id] = None
                # ‚úÖ –ü–û–ö–ê–ó–´–í–ê–ï–ú –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                await show_main_menu(message, lang)
            else:
                # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –æ—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ –ø–æ–ª–µ
                await message.answer(response_message)
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–Ω–æ–≤–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–≤–æ–¥–∞
                await message.answer(
                    t("try_again", lang),
                    reply_markup=cancel_keyboard(lang)
                )
            
            return
            
        except Exception as e:
            log_error_with_context(e, {"user_id": user_id, "action": "edit_profile_field"})
            await message.answer(
                t("try_again", lang),
                reply_markup=types.ReplyKeyboardRemove()  # ‚úÖ –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            )
            user_states[user_id] = None
            # ‚úÖ –ü–û–ö–ê–ó–´–í–ê–ï–ú –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            await show_main_menu(message, lang)
            return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤
    elif current_state == "editing_medications":
        # ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú –õ–ò–ú–ò–¢ —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–∏—Å—Ç–µ–º—É
        allowed, error_msg = await check_rate_limit(user_id, "pills")
        if not allowed:
            await message.answer(
                error_msg,
                reply_markup=types.ReplyKeyboardRemove()
            )
            user_states[user_id] = None
            await show_main_menu(message, lang)
            return

        try:
            from db_postgresql import get_medications, replace_medications
            from gpt import update_medications_via_gpt
            from save_utils import update_user_profile_medications

            current_list = await get_medications(user_id)
            user_input = message.text.strip()

            try:
                # ‚úÖ –í–´–ó–´–í–ê–ï–ú GPT –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤
                new_list = await update_medications_via_gpt(user_input, current_list)
                
                if new_list is not None:
                    # ‚úÖ –ó–ê–ü–ò–°–´–í–ê–ï–ú –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–∏—Å—Ç–µ–º—É
                    await record_user_action(user_id, "pills")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    await replace_medications(user_id, new_list)
                    await update_user_profile_medications(user_id)
                    user_states[user_id] = None
                    await message.answer(
                        t("schedule_updated", lang),
                        reply_markup=types.ReplyKeyboardRemove()
                    )
                    await show_main_menu(message, lang)
                else:
                    await message.answer(t("schedule_update_failed", lang))
                    
            except Exception as openai_error:
                # –ù–ï –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –µ—Å–ª–∏ GPT —É–ø–∞–ª
                await message.answer("‚ö†Ô∏è –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –ø–æ–∑–∂–µ.")
                user_states[user_id] = None
                await show_main_menu(message, lang)
                
            return
            
        except Exception as e:
            log_error_with_context(e, {"user_id": user_id, "action": "edit_medications"})
            await message.answer(get_user_friendly_message(e, lang))
            user_states[user_id] = None
            await show_main_menu(message, lang)
            return

    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    else:
        if message.from_user.id == 7374723347:
            await full_process_debug_7374723347(message.from_user.id, message.text)
        allowed, error_msg = await check_rate_limit(user_id, "message")
        if not allowed:
            await message.answer(error_msg)
            return
        try:
            name = await get_user_name(user_id)
            if not name:
                await message.answer(t("not_registered", lang))
                return
                
            user_input = message.text
            await save_message(user_id, "user", user_input)
            
            from subscription_manager import SubscriptionManager
            limits = await SubscriptionManager.get_user_limits(user_id)
            gpt4o_queries_left = limits.get('gpt4o_queries_left', 0)
            subscription_type = limits.get('subscription_type', 'free')
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –ª–∏–º–∏—Ç–æ–≤ –ò –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
            if gpt4o_queries_left == 0 and subscription_type != 'subscription':
                upsell_tracker.increment_message_count(user_id)
                
                # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
                if upsell_tracker.should_show_upsell(user_id):
                    await SubscriptionHandlers.show_subscription_upsell(
                        message, user_id, reason="better_response"
                    )
            
            # üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –í–û–ü–†–û–°–ê –° –õ–û–ì–ò–†–û–í–ê–ù–ò–ï–ú
            try:
                prompt_data = await process_user_question_detailed(user_id, user_input)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                profile_text = prompt_data["profile_text"]
                summary_text = prompt_data["summary_text"]
                chunks_text = prompt_data["chunks_text"]
                chunks_found = prompt_data["chunks_found"]
                lang = prompt_data["lang"]
                
            except Exception as e:
                from error_handler import log_error_with_context
                log_error_with_context(e, {
                    "function": "search_fallback", 
                    "user_id": user_id
                })

                from gpt import enrich_query_for_vector_search
                try:
                    refined_query = await enrich_query_for_vector_search(user_input)
                except OpenAIError:
                    refined_query = user_input

                # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ë–ï–ó –∏—Å–∫–ª—é—á–µ–Ω–∏–π
                vector_chunks = await search_similar_chunks(user_id, refined_query, limit=10)
                keyword_chunks = await keyword_search_chunks(user_id, user_input, limit=10)
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–æ–¥–∫—É —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
                summary_text, _ = await get_conversation_summary(user_id)

                def filter_chunks_simple(chunks, limit=5):
                    """–ü—Ä–æ—Å—Ç–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
                    filtered_texts = []
                    for chunk in chunks:
                        chunk_text = chunk.get("chunk_text", "")
                        if chunk_text.strip():  # –¢–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ —á–∞–Ω–∫–∏
                            filtered_texts.append(chunk_text)
                            if len(filtered_texts) >= limit:
                                break
                    return filtered_texts

                vector_texts = filter_chunks_simple(vector_chunks, limit=4)
                keyword_texts = filter_chunks_simple(keyword_chunks, limit=2)
                all_chunks = list(dict.fromkeys(vector_texts + keyword_texts))
                chunks_text = "\n\n".join(all_chunks[:6])
                chunks_found = len(all_chunks)

                # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è fallback
                profile_text = await format_user_profile(user_id)
                lang = await get_user_language(user_id)

            # ==========================================
            # –û–¢–ü–†–ê–í–ö–ê –í GPT (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            # ==========================================

            try:
                # ‚úÖ –û–ü–†–ï–î–ï–õ–Ø–ï–ú –ü–û–õ–ù–´–ô –ö–û–ù–¢–ï–ö–°–¢
                if 'prompt_data' in locals() and prompt_data and 'context_text' in prompt_data:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ prompt_logger
                    full_context = prompt_data["context_text"]
                else:
                    # Fallback: —Å–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ —á–∞—Å—Ç–µ–π
                    context_parts = []
                    
                    context_parts.append(f"üìå Patient profile:\n{profile_text}")
                    context_parts.append(f"üß† Conversation summary:\n{summary_text}")
                    context_parts.append(f"üîé Related historical data:\n{chunks_text}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    try:
                        recent_messages = await get_last_messages(user_id, limit=6)
                        context_lines = []
                        for msg in recent_messages:
                            if isinstance(msg, (tuple, list)) and len(msg) >= 2:
                                role = "USER" if msg[0] == 'user' else "BOT"
                                content = str(msg[1])[:100]
                                context_lines.append(f"{role}: {content}")
                        recent_context = "\n".join(context_lines)
                        context_parts.append(f"üí¨ Recent messages:\n{recent_context}")
                    except Exception as e:
                        pass
                    
                    full_context = "\n\n".join(context_parts)

                # ‚úÖ –û–ü–†–ï–î–ï–õ–Ø–ï–ú –ö–ê–ö–£–Æ –ú–û–î–ï–õ–¨ –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨
                has_premium_limits = await check_gpt4o_limit(user_id)
                
                if has_premium_limits:
                    use_gemini = True
                    model_name = "gpt-4o"
                else:
                    use_gemini = False
                    model_name = "gpt-4o-mini"

                # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ô –í–´–ó–û–í ask_doctor (–ù–û–í–ê–Ø –°–ò–ì–ù–ê–¢–£–†–ê):
                processing_msg = None
                if use_gemini:  # GPT-5
                    processing_msg = await message.answer(
                        t("gpt5_processing", lang), 
                        parse_mode="HTML"
                    )

                try:
                    # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏
                    response = await ask_doctor(
                        context_text=full_context,
                        user_question=user_input,
                        lang=lang,
                        user_id=user_id,
                        use_gemini=use_gemini
                    )
                    
                    # –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç–≤–µ—Ç–∞
                    if processing_msg:
                        try:
                            await bot.delete_message(
                                chat_id=message.chat.id, 
                                message_id=processing_msg.message_id
                            )
                        except Exception:
                            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
                            
                except Exception as e:
                    # –ü—Ä–∏ –æ—à–∏–±–∫–µ —Ç–æ–∂–µ —É–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    if processing_msg:
                        try:
                            await bot.delete_message(
                                chat_id=message.chat.id, 
                                message_id=processing_msg.message_id
                            )
                        except Exception:
                            pass
                    raise e  # –ü–µ—Ä–µ–¥–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                if response:
                    await send_response_message(message, response)
                    
                    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¢—Ä–∞—Ç–∏–º –ª–∏–º–∏—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é –º–æ–¥–µ–ª—å
                    if use_gemini:  # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ Gemini - —Ç–æ—á–Ω–æ —Ç—Ä–∞—Ç–∏–º –ª–∏–º–∏—Ç
                        
                        await spend_gpt4o_limit(user_id, message, bot)
                    
                    await save_message(user_id, "assistant", response)
                    summary_allowed, _ = await check_rate_limit(user_id, "summary")
                    if summary_allowed:
                        summary_was_updated = await maybe_update_summary(user_id)
                        if summary_was_updated:
                            await record_user_action(user_id, "summary")
                    else:
                        summary_was_updated = False

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ upsell –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —Å–≤–æ–¥–∫–∞ —Ä–µ–∞–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∞—Å—å
                    if summary_was_updated:
                        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–≤–æ–¥–æ–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –ª–∏–º–∏—Ç–æ–≤ –ò –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
                        if gpt4o_queries_left == 0 and subscription_type != 'subscription':
                            upsell_tracker.increment_summary_count(user_id)
                            
                            # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
                            if upsell_tracker.should_show_upsell_on_summary(user_id):
                                await SubscriptionHandlers.show_subscription_upsell(
                                    message, user_id, reason="summary_updated"
                                )
                else:
                    await send_error_message(message, get_user_friendly_message("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç", lang))
                    
            except Exception as e:
                log_error_with_context(e, {"user_id": user_id, "action": "gpt_request"})
                await send_error_message(message, get_user_friendly_message(e, lang))
                    
        except Exception as e:
            log_error_with_context(e, {"user_id": user_id, "action": "message_processing"})
            await send_error_message(message, get_user_friendly_message(e, lang))
    
    # üéØ –ì–õ–ê–í–ù–û–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï - –ü–†–û–í–ï–†–ö–ê –ü–†–û–ú–û–ö–û–î–ê:
    try:
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –∏ –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        from cumulative_counter import increment_and_get_total_messages
        total_message_count = await increment_and_get_total_messages(user_id)
        
        logger.info(f"üìä User {user_id}: –≤—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π #{total_message_count}")
        
        # 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—ã–π –Ω–æ–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è (–ü—Ä–æ–º–æ–∫–æ–¥1)
        if total_message_count == 30:  # –¢–æ—á–Ω–æ –Ω–∞ 30 —Å–æ–æ–±—â–µ–Ω–∏–∏
            promo_message = await check_promo_on_message(user_id, total_message_count)
            if promo_message:
                logger.info(f"üéâ User {user_id}: –ø–æ–∫–∞–∑–∞–Ω –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ {total_message_count}-–º —Å–æ–æ–±—â–µ–Ω–∏–∏!")
        # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º!
            
    except Exception as e:
        # –û—à–∏–±–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ª–æ–º–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –¥–ª—è user {user_id}: {e}")
    

@dp.callback_query(lambda c: c.data == "settings_profile")
@handle_telegram_errors  
async def handle_profile_settings(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    lang = await get_user_language(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
    profile_text = await ProfileManager.get_profile_text(user_id, lang)
    
    await callback.message.edit_text(
        profile_text,
        reply_markup=profile_view_keyboard(lang),
        parse_mode="HTML"
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "edit_profile")
@handle_telegram_errors
async def handle_edit_profile(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    lang = await get_user_language(callback.from_user.id)
    
    await callback.message.edit_text(
        t("edit_profile_title", lang),
        reply_markup=profile_edit_keyboard(lang),
        parse_mode="HTML"
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "back_to_profile")
@handle_telegram_errors
async def handle_back_to_profile(callback: types.CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –ø—Ä–æ—Ñ–∏–ª—è"""
    user_id = callback.from_user.id
    lang = await get_user_language(user_id)
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    user_states[user_id] = None
    
    profile_text = await ProfileManager.get_profile_text(user_id, lang)
    
    await callback.message.edit_text(
        profile_text,
        reply_markup=profile_view_keyboard(lang),
        parse_mode="HTML"
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "back_to_settings")
@handle_telegram_errors
async def handle_back_to_settings(callback: types.CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    lang = await get_user_language(callback.from_user.id)
    
    await callback.message.edit_text(
        t("settings_menu_title", lang),
        reply_markup=settings_keyboard(lang)
    )
    await callback.answer()

# HANDLERS –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–ª–µ–π
@dp.callback_query(lambda c: c.data.startswith("edit_field_"))
@handle_telegram_errors
async def handle_edit_field(callback: types.CallbackQuery):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è"""
    user_id = callback.from_user.id
    lang = await get_user_language(user_id)
    
    field = callback.data.replace("edit_field_", "")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    user_states[user_id] = {
        "mode": "editing_profile",
        "field": field
    }
    
    if field in ["name", "height_cm", "weight_kg", "allergies"]:
        # –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥
        prompts = {
            "name": "enter_new_name",
            "height_cm": "enter_new_height", 
            "weight_kg": "enter_new_weight",
            "allergies": "enter_new_allergies"
        }
        
        await callback.message.answer(
            t(prompts[field], lang),
            reply_markup=cancel_keyboard(lang)
        )
        
    elif field == "smoking":
        # –í—ã–±–æ—Ä –∏–∑ –∫–Ω–æ–ø–æ–∫
        await callback.message.edit_text(
            t("choose_smoking", lang),
            reply_markup=smoking_choice_keyboard(lang)
        )
        
    elif field == "alcohol":
        await callback.message.edit_text(
            t("choose_alcohol", lang),
            reply_markup=alcohol_choice_keyboard(lang)
        )
        
    elif field == "physical_activity":
        await callback.message.edit_text(
            t("choose_activity", lang),
            reply_markup=activity_choice_keyboard(lang)
        )
        
    elif field == "language":
        await callback.message.edit_text(
            t("choose_language", lang),
            reply_markup=language_choice_keyboard(lang)
        )
    
    await callback.answer()

# HANDLERS –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–∑ –∫–Ω–æ–ø–æ–∫
@dp.callback_query(lambda c: c.data.startswith(("smoking_", "alcohol_", "activity_", "lang_")))
@handle_telegram_errors
async def handle_choice_selection(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–∑ –∫–Ω–æ–ø–æ–∫"""
    user_id = callback.from_user.id
    lang = await get_user_language(user_id)
    
    state = user_states.get(user_id)
    if not state or state.get("mode") != "editing_profile":
        await callback.answer(t("error_state", lang))
        return
    
    field = state.get("field")
    choice = callback.data

    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    if choice.startswith("lang_"):
        new_lang = choice.replace("lang_", "")
        success, message = await ProfileManager.update_field(user_id, "language", new_lang, lang)
        
        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            lang = new_lang
        
        await callback.message.edit_text(message, parse_mode="HTML")
        user_states[user_id] = None
        
        # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
        await show_main_menu(callback.message, lang)
        
        await callback.answer()
        return
    
    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–π
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ callback data
    if choice.startswith("smoking_"):
        db_field = "smoking"
    elif choice.startswith("alcohol_"):
        db_field = "alcohol"
    elif choice.startswith("activity_"):
        db_field = "physical_activity"  # ‚úÖ –í–ê–ñ–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—è –≤ –ë–î
    else:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≤—ã–±–æ—Ä–∞")
        return
    
    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ–ª—É—á–∞–µ–º —á–∏—Ç–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ CHOICE_MAPPINGS
    if db_field in CHOICE_MAPPINGS and choice in CHOICE_MAPPINGS[db_field]:
        readable_value = CHOICE_MAPPINGS[db_field][choice][lang]
    else:
        # Fallback –Ω–∞ –ø—Ä—è–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        readable_value = choice
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ
    success, message = await ProfileManager.update_field(user_id, db_field, readable_value, lang)
    
    if success:
        await callback.message.edit_text(message, parse_mode="HTML")
        user_states[user_id] = None
        
        # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        await show_main_menu(callback.message, lang)
    else:
        await callback.message.edit_text(message)
    
    await callback.answer()

@dp.callback_query(lambda c: c.data == "cancel_edit")
@handle_telegram_errors
async def handle_cancel_edit(callback: types.CallbackQuery):
    """–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    user_id = callback.from_user.id
    lang = await get_user_language(user_id)
    
    user_states[user_id] = None
    
    await callback.message.edit_text(
        t("profile_edit_cancelled", lang),
        parse_mode="HTML"
    )
    await show_main_menu(callback.message, lang)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "settings_faq")
@handle_telegram_errors
async def handle_faq_settings(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ FAQ"""
    await handle_faq_main(callback)

@dp.callback_query(lambda c: c.data.startswith("faq_"))
@handle_telegram_errors
async def handle_faq_sections(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ FAQ"""
    await handle_faq_section(callback)

@dp.callback_query(lambda c: c.data == "settings_subscription")
@handle_telegram_errors
async def handle_subscription_settings(callback: types.CallbackQuery):
    """
    üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ü–æ–¥–ø–∏—Å–∫–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Å –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
    """
    user_id = callback.from_user.id
    lang = await get_user_language(user_id)
    
    try:
        # üîÑ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø —Å Stripe –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞—Ö–æ–¥–µ
        logger.info(f"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–∑–∞–≥—Ä—É–∑–∫–∞" –ø–æ–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º—Å—è
        await callback.message.edit_text(
            t("subscription_syncing", lang),
            parse_mode="HTML"
        )
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
        sync_result = await SubscriptionManager.force_sync_with_stripe(user_id)
        
        if sync_result.get("actions"):
            # –ï—Å–ª–∏ –±—ã–ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è - –ª–æ–≥–∏—Ä—É–µ–º
            logger.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è {user_id}: {'; '.join(sync_result['actions'])}")
        
        # –ü–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
        await SubscriptionHandlers.show_subscription_menu(callback)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        
        # –ï—Å–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å - –≤—Å—ë —Ä–∞–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        await SubscriptionHandlers.show_subscription_menu(callback)

# 2. –ù–û–í–´–ï –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
@dp.callback_query(lambda c: c.data.startswith("buy_"))
@handle_telegram_errors
async def handle_purchase_request(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–∫—É–ø–∫—É –ø–∞–∫–µ—Ç–æ–≤"""
    package_id = callback.data.replace("buy_", "")
    await SubscriptionHandlers.handle_purchase_request(callback, package_id)

@dp.callback_query(lambda c: c.data.startswith("confirm_purchase_"))
@handle_telegram_errors
async def handle_purchase_confirmation(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏"""
    package_id = callback.data.replace("confirm_purchase_", "")
    await SubscriptionHandlers.handle_purchase_confirmation(callback, package_id)

@dp.callback_query(lambda c: c.data.startswith("upgrade_to_"))
@handle_telegram_errors
async def handle_simple_upgrade(callback: types.CallbackQuery):
    """‚úÖ –ü–†–û–°–¢–û–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–ø–≥—Ä–µ–π–¥–∞ - –Ω–∞—Ö–æ–¥–∏–º —Å—Ç–∞—Ä—É—é –ø–æ–¥–ø–∏—Å–∫—É —Å–∞–º–∏"""
    try:
        user_id = callback.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –ø–∞–∫–µ—Ç –∏–∑ callback
        new_package_id = callback.data.replace("upgrade_to_", "")
        
        # ‚úÖ –ü–†–û–°–¢–ê–Ø –õ–û–ì–ò–ö–ê: –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –≤ –ë–î
        from db_postgresql import fetch_one
        active_subscription = await fetch_one("""
            SELECT package_id FROM user_subscriptions 
            WHERE user_id = ? AND status = 'active'
            ORDER BY created_at DESC LIMIT 1
        """, (user_id,))
        
        if not active_subscription:
            await callback.answer("‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
            
        current_package_id = active_subscription[0]
        
        # ‚úÖ –ü–†–û–°–¢–û: –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—É—é, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
        await SubscriptionHandlers.handle_subscription_upgrade(
            callback, current_package_id, new_package_id
        )
        
    except Exception as e:
        log_error_with_context(e, {
            "action": "simple_upgrade", 
            "user_id": callback.from_user.id
        })
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)

# 3. –ù–û–í–´–ï –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
@dp.callback_query(lambda c: c.data == "subscription_menu")
@handle_telegram_errors
async def handle_subscription_menu(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫"""
    await SubscriptionHandlers.show_subscription_menu(callback)

@dp.callback_query(lambda c: c.data == "cancel_subscription")
@handle_telegram_errors
async def handle_cancel_subscription_request(callback: types.CallbackQuery):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–º–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏"""
    await SubscriptionHandlers.handle_cancel_subscription_request(callback)

@dp.callback_query(lambda c: c.data == "confirm_cancel_subscription")
@handle_telegram_errors
async def handle_cancel_subscription_confirmation(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏"""
    await SubscriptionHandlers.handle_cancel_subscription_confirmation(callback)

# 4. –ù–û–í–´–ï –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ upsell —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@dp.callback_query(lambda c: c.data == "dismiss_upsell")
@handle_telegram_errors
async def handle_dismiss_upsell(callback: types.CallbackQuery):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ upsell —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    await SubscriptionHandlers.dismiss_upsell(callback)

@dp.callback_query(lambda c: c.data == "subscription_current")
@handle_telegram_errors
async def handle_current_subscription(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É"""
    lang = await get_user_language(callback.from_user.id)
    await callback.answer(t("your_current_subscription", lang), show_alert=True)

@dp.callback_query(lambda c: c.data == "cancel_photo_analysis")
async def process_cancel_photo_analysis(callback_query: types.CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ"""
    await cancel_photo_analysis(callback_query)

@dp.callback_query()
@handle_telegram_errors
async def handle_button_action(callback: types.CallbackQuery):
    if callback.data == "more_docs":
        user_id = callback.from_user.id
        state = user_states.get(user_id)

        if isinstance(state, dict) and state.get("mode") == "viewing_documents":
            user_states[user_id]["offset"] += 5
            await handle_show_documents(callback.message, user_id=user_id)
        else:
            await callback.message.answer(t("unknown_state", lang))
        await callback.answer()
        return
        
    if callback.data == "edit_meds":
        user_states[callback.from_user.id] = "editing_medications"
        lang = await get_user_language(callback.from_user.id)
        
        # ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞"
        from keyboards import cancel_keyboard
        await callback.message.answer(
            t("edit_schedule", lang),
            reply_markup=cancel_keyboard(lang)  # ‚Üê –í–û–¢ –≠–¢–û –í–ê–ñ–ù–û!
        )
        await callback.answer()
        return
    
    if callback.data == "settings_profile":
        lang = await get_user_language(callback.from_user.id)
        await callback.message.answer(t("profile_later", lang))
        await callback.answer()
        return

    if callback.data == "settings_help":
        lang = await get_user_language(callback.from_user.id)
        await callback.message.answer(t("help_later", lang))
        await callback.answer()
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
    try:
        action, doc_id = callback.data.split("_", 1)
        doc_id = int(doc_id)

        if action == "ignore":
            await handle_ignore_document(callback, doc_id)
            return

        user_id = callback.from_user.id
        doc = await get_document_by_id(doc_id)
        lang = await get_user_language(user_id)
        
        if not doc or doc["user_id"] != user_id:
            await callback.message.answer(t("document_not_found", lang))
            # ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –ï–°–õ–ò –î–û–ö–£–ú–ï–ù–¢ –ù–ï –ù–ê–ô–î–ï–ù
            await show_main_menu(callback.message, lang)
            return

        if action == "view":
            title = doc["title"]
            text = doc["raw_text"] or t("empty_document", lang)
            clean_text = text[:4000]
            from utils.security import safe_send_message
            await safe_send_message(callback.message, clean_text, title=title)

            
        elif action == "rename":
            user_states[user_id] = f"rename_{doc_id}"
            await callback.message.answer(t("enter_new_name_doc", lang))
            
        elif action == "delete":
            await delete_document(doc_id)
            await callback.message.answer(t("document_deleted", lang))
            # ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –ü–û–°–õ–ï –£–î–ê–õ–ï–ù–ò–Ø
            await show_main_menu(callback.message, lang)
            
        elif action == "download":
            file_path = doc.get("file_path")
            if not file_path:
                await callback.message.answer(t("file_not_found", lang))
                return
            
            try:
                from file_storage import get_file_storage
                storage = get_file_storage()
                
                if storage.storage_type == "supabase":
                    # ‚úÖ –î–õ–Ø –ü–†–ò–í–ê–¢–ù–û–ì–û BUCKET –°–†–ê–ó–£ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ë–ï–ó–û–ü–ê–°–ù–û–ï –°–ö–ê–ß–ò–í–ê–ù–ò–ï
                    logger.info(f"üì• [SUPABASE] –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {file_path}")
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    original_filename = doc.get("title", "document")
                    file_ext = os.path.splitext(file_path)[1] or ".pdf"
                    safe_filename = f"{original_filename}{file_ext}"
                    
                    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    import tempfile
                    with tempfile.NamedTemporaryFile(delete=False, suffix=file_ext) as temp_file:
                        temp_path = temp_file.name
                    
                    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏–∑ Supabase Storage
                    import asyncio
                    download_success = await storage.storage_manager.download_file(file_path, temp_path)
                    
                    if download_success and os.path.exists(temp_path):
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        await callback.message.answer_document(
                            types.FSInputFile(path=temp_path, filename=safe_filename)
                        )
                        logger.info(f"‚úÖ [SUPABASE] –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {safe_filename}")
                        
                        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                        try:
                            os.remove(temp_path)
                        except:
                            pass
                    else:
                        await callback.message.answer(t("file_not_found", lang))
                        
                else:
                    # ‚úÖ –õ–û–ö–ê–õ–¨–ù–´–ï –§–ê–ô–õ–´ (–¥–ª—è fallback —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
                    if not os.path.exists(file_path):
                        await callback.message.answer(t("file_not_found", lang))
                        return
                    await callback.message.answer_document(types.FSInputFile(path=file_path))
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
                await callback.message.answer(t("file_not_found", lang))
          
            
    except Exception as e:
        user_id = callback.from_user.id
        lang = await get_user_language(user_id)
        log_error_with_context(e, {"user_id": user_id, "action": "button_callback", "callback_data": callback.data})
        await callback.message.answer(get_user_friendly_message(e, lang))
        # ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –î–ê–ñ–ï –ü–†–ò –û–®–ò–ë–ö–ê–•
        await show_main_menu(callback.message, lang)
    
    await callback.answer()

@handle_telegram_errors
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ (Railway-ready)"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –±–æ—Ç–∞...")
    
    try:
        # üîß –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –æ—Ç Railway (–¥–ª—è webhook)
        port = int(os.getenv("PORT", 8080))
        is_railway = os.getenv("RAILWAY_ENVIRONMENT") == "production"
        
        print(f"üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ {'–Ω–∞ Railway' if is_railway else '–ª–æ–∫–∞–ª—å–Ω–æ'}")
        print(f"üåê Webhook –ø–æ—Ä—Ç: {port}")
        
        # üîß 1. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ USER STATE
        from user_state_manager import UserStateManager
        user_state_manager = UserStateManager(ttl_minutes=60)
        print("‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # üí≥ 2. –ü–†–û–í–ï–†–ö–ê STRIPE
        stripe_ok = check_stripe_setup()  # –ë–ï–ó await - —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ async!
        if stripe_ok:
            print("‚úÖ Stripe API –≥–æ—Ç–æ–≤")
            print("üí≥ Stripe –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        else:
            print("‚ö†Ô∏è Stripe –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã)")
        
        # üóÑÔ∏è 3. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø POSTGRESQL (–ö–†–ò–¢–ò–ß–ù–û!)
        print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...")
        database_url = os.getenv("DATABASE_URL")
        if not database_url:
            raise Exception("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        await initialize_db_pool(max_connections=10)
        print("üóÑÔ∏è PostgreSQL pool –≥–æ—Ç–æ–≤")

        from aiogram.types import MenuButtonCommands, BotCommand
    
        # –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        commands = [
            BotCommand(command="start", description="üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
            BotCommand(command="menu", description="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
            BotCommand(command="help", description="‚ùì –ü–æ–º–æ—â—å"),
        ]
        await bot.set_my_commands(commands)
        
        # –ó–∞—Ç–µ–º –∫–Ω–æ–ø–∫—É –º–µ–Ω—é
        menu_button = MenuButtonCommands()
        await bot.set_chat_menu_button(menu_button=menu_button)
        
        print("‚úÖ –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é –∏ –∫–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
              
        # üß† 4. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø VECTOR DB (–ü–û–°–õ–ï PostgreSQL!)
        print("üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è pgvector...")
        try:
            await initialize_vector_db()
            print("‚úÖ Vector database –≥–æ—Ç–æ–≤–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ pgvector: {e}")
            print("‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ pgvector –≤–∫–ª—é—á–µ–Ω–æ –≤ Railway PostgreSQL")
            raise

        # üìÅ 5. –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–û–í–û–ì–û –•–†–ê–ù–ò–õ–ò–©–ê (–í–°–¢–ê–í–ò–¢–¨ –°–Æ–î–ê!)
        try:
            from file_storage import check_storage_setup
            storage_info = check_storage_setup()
            
            if storage_info['success']:
                stats = storage_info['stats']
                print(f"‚úÖ –§–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≥–æ—Ç–æ–≤–æ:")
                print(f"   üìÇ –¢–∏–ø: {stats['storage_type']}")
                print(f"   üìç –ü—É—Ç—å: {stats['storage_path']}")
                print(f"   üìä –§–∞–π–ª–æ–≤: {stats['file_count']}")
                print(f"   üíæ –†–∞–∑–º–µ—Ä: {stats['total_size_mb']} MB")
                
                if stats['storage_type'] == 'persistent':
                    print("   üéâ Railway Volumes –∞–∫—Ç–∏–≤–Ω—ã!")
                else:
                    print("   ‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–¥–æ–±–∞–≤—å—Ç–µ Railway Volume)")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {storage_info['error']}")
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {e}")
        
        # ü§ñ 6. –ü–†–û–í–ï–†–ö–ê OPENAI
        openai_status = await check_openai_status()
        if openai_status:
            print("‚úÖ OpenAI API –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å OpenAI API")
        
        # üåê 7. –ó–ê–ü–£–°–ö WEBHOOK –°–ï–†–í–ï–†–ê (–Ω–∞ Railway –ø–æ—Ä—Ç—É)
        if stripe_ok:
            print(f"üîó –ó–∞–ø—É—Å–∫ Stripe webhook —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
            from webhook_subscription_handler import start_webhook_server
            webhook_runner = await start_webhook_server(bot, port=port)
            print("‚úÖ Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
        
        print("üö¶ Rate Limiter –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        print("   - –°–æ–æ–±—â–µ–Ω–∏—è: 10/–º–∏–Ω")
        print("   - –î–æ–∫—É–º–µ–Ω—Ç—ã: 3/5–º–∏–Ω") 
        print("   - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: 3/10–º–∏–Ω")
        print("   - –ó–∞–º–µ—Ç–∫–∏: 5/5–º–∏–Ω")
        print("üöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –Ω–∞ Railway!")
        
        # üöÄ 8. –ó–ê–ü–£–°–ö –ë–û–¢–ê
        await dp.start_polling(bot)
        
    except KeyboardInterrupt:
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        log_error_with_context(e, {"action": "railway_startup"})
        
    finally:
        # üßπ –û–ß–ò–°–¢–ö–ê –†–ï–°–£–†–°–û–í
        print("üßπ –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...")
        try:
            await close_db_pool()
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∞")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: {e}")

# üéØ –¢–û–ß–ö–ê –í–•–û–î–ê (–≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞, –∑–∞–º–µ–Ω–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é)
if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")