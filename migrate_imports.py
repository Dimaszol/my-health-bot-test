#!/usr/bin/env python3
# migrate_imports.py - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –∏–º–ø–æ—Ä—Ç–æ–≤ —Å SQLite –Ω–∞ PostgreSQL

import os
import re
import shutil
from datetime import datetime

# üéØ –ö–ê–†–¢–ê –ó–ê–ú–ï–ù –ò–ú–ü–û–†–¢–û–í
IMPORT_REPLACEMENTS = {
    # –ó–∞–º–µ–Ω—ã –∏–∑ db.py –Ω–∞ db_postgresql.py
    'from db import': 'from db_postgresql import',
    'import db': 'import db_postgresql as db',
    
    # –ó–∞–º–µ–Ω—ã –∏–∑ vector_db.py –Ω–∞ vector_db_postgresql.py  
    'from vector_db import': 'from vector_db_postgresql import',
    'import vector_db': 'import vector_db_postgresql as vector_db',
    
    # –ó–∞–º–µ–Ω—ã –∏–∑ vector_utils.py (—Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ vector_db_postgresql.py)
    'from vector_utils import': 'from vector_db_postgresql import',
    'import vector_utils': 'import vector_db_postgresql as vector_utils',
    
    # –ó–∞–º–µ–Ω—ã –∏–∑ db_pool.py (—Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ db_postgresql.py)
    'from db_pool import': 'from db_postgresql import',
    'import db_pool': 'import db_postgresql as db_pool',
}

# üîß –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ó–ê–ú–ï–ù–´ –§–£–ù–ö–¶–ò–ô (–∫–æ–≥–¥–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑–º–µ–Ω–∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è)
FUNCTION_REPLACEMENTS = {
    # –ï—Å–ª–∏ –≤ PostgreSQL –≤–µ—Ä—Å–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω—ã
    'user_exists(': 'get_user(',  # user_exists –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ get_user
    'add_chunks_to_vector_db(': 'await add_chunks_to_vector_db(',  # —Å—Ç–∞–ª–∞ async
    'search_similar_chunks(': 'await search_similar_chunks(',  # —Å—Ç–∞–ª–∞ async
    'keyword_search_chunks(': 'await keyword_search_chunks(',  # —Å—Ç–∞–ª–∞ async
}

# üìÅ –§–ê–ô–õ–´ –î–õ–Ø –ú–ò–ì–†–ê–¶–ò–ò
FILES_TO_MIGRATE = [
    'main.py',
    'upload.py', 
    'profile_manager.py',
    'save_utils.py',
    'registration.py',
    'documents.py',
    'subscription_manager.py',
    'notification_system.py',
    'gpt.py',
    'keyboards.py',
    'error_handler.py'
]

def backup_file(file_path):
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞"""
    if os.path.exists(file_path):
        backup_path = f"{file_path}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        shutil.copy2(file_path, backup_path)
        print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
        return backup_path
    return None

def migrate_imports_in_file(file_path):
    """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ"""
    if not os.path.exists(file_path):
        print(f"‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return False
    
    print(f"\nüîÑ –ú–∏–≥—Ä–∏—Ä—É—é —Ñ–∞–π–ª: {file_path}")
    
    # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
    with open(file_path, 'r', encoding='utf-8') as file:
        content = file.read()
    
    original_content = content
    changes_made = []
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—ã –∏–º–ø–æ—Ä—Ç–æ–≤
    for old_import, new_import in IMPORT_REPLACEMENTS.items():
        if old_import in content:
            content = content.replace(old_import, new_import)
            changes_made.append(f"  ‚úÖ {old_import} ‚Üí {new_import}")
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–π (–±–æ–ª–µ–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ)
    for old_func, new_func in FUNCTION_REPLACEMENTS.items():
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º regex –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –∑–∞–º–µ–Ω—ã
        pattern = re.escape(old_func)
        if re.search(pattern, content):
            content = re.sub(pattern, new_func, content)
            changes_made.append(f"  üîß {old_func} ‚Üí {new_func}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if changes_made:
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        backup_path = backup_file(file_path)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        with open(file_path, 'w', encoding='utf-8') as file:
            file.write(content)
        
        print(f"‚úÖ –§–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω: {file_path}")
        for change in changes_made:
            print(change)
        
        return True
    else:
        print(f"‚è≠Ô∏è  –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è: {file_path}")
        return False

def check_async_functions(file_path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å await –∫ —Ñ—É–Ω–∫—Ü–∏—è–º"""
    if not os.path.exists(file_path):
        return []
    
    with open(file_path, 'r', encoding='utf-8') as file:
        content = file.read()
    
    # –°–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–ø–µ—Ä—å async
    async_functions = [
        'get_user(',
        'create_user(',
        'save_document(',
        'get_user_documents(',
        'update_user_profile(',
        'search_similar_chunks(',
        'keyword_search_chunks(',
        'add_chunks_to_vector_db(',
        'delete_document_from_vector_db('
    ]
    
    missing_awaits = []
    
    for func in async_functions:
        # –ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ await
        pattern = rf'(?<!await\s){re.escape(func)}'
        matches = re.findall(pattern, content)
        if matches:
            missing_awaits.append(func)
    
    return missing_awaits

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print("üöÄ –ù–∞—á–∏–Ω–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –º–∏–≥—Ä–∞—Ü–∏—é –∏–º–ø–æ—Ä—Ç–æ–≤...")
    print("üîÑ SQLite ‚Üí PostgreSQL")
    print(f"üìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("="*50)
    
    migrated_files = []
    
    # –ú–∏–≥—Ä–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    for file_name in FILES_TO_MIGRATE:
        if migrate_imports_in_file(file_name):
            migrated_files.append(file_name)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º async —Ñ—É–Ω–∫—Ü–∏–∏
        missing_awaits = check_async_functions(file_name)
        if missing_awaits:
            print(f"‚ö†Ô∏è  –í —Ñ–∞–π–ª–µ {file_name} –≤–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å await –∫:")
            for func in missing_awaits:
                print(f"    - {func}")
    
    print("\n" + "="*50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ú–ò–ì–†–ê–¶–ò–ò:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(migrated_files)}")
    
    if migrated_files:
        print("\nüìÅ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        for file_name in migrated_files:
            print(f"  - {file_name}")
    
    print("\nüîç –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –Ω–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ–± await")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("3. –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π (.backup_*)")
    print("4. –£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã: db.py, db_pool.py, vector_db.py, vector_utils.py")

if __name__ == "__main__":
    main()