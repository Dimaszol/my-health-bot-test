# subscription_manager.py - –ü–û–õ–ù–ê–Ø –ó–ê–ú–ï–ù–ê –§–ê–ô–õ–ê

import stripe
import logging
from datetime import datetime, timedelta
from db_postgresql import fetch_one, execute_query

logger = logging.getLogger(__name__)

class SubscriptionManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –ª–∏–º–∏—Ç–æ–≤"""
    
    @staticmethod
    async def fix_orphaned_subscription_state(user_id: int):
        """
        ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç "–ø–æ–¥–≤–µ—à–µ–Ω–Ω–æ–µ" —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        –ö–æ–≥–¥–∞ –≤ –ë–î –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –æ –ø–æ–¥–ø–∏—Å–∫–µ, –Ω–æ –≤ Stripe –µ—ë –Ω–µ—Ç
        """
        try:
            logger.info(f"üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ Stripe
            stripe_check = await SubscriptionManager.check_real_stripe_subscription(user_id)
            
            if not stripe_check["has_active"]:
                # –í Stripe –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ - –ø—Ä–∏–≤–æ–¥–∏–º –ë–î –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
                
                # 1. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–æ–∫ –≤ user_subscriptions
                await execute_query("""
                    UPDATE user_subscriptions 
                    SET status = 'cancelled', cancelled_at = ?
                    WHERE user_id = ? AND status = 'active'
                """, (datetime.now(), user_id))
                
                # 2. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã
                limits = await fetch_one("""
                    SELECT documents_left, gpt4o_queries_left 
                    FROM user_limits 
                    WHERE user_id = ?
                """, (user_id,))
                
                if limits:
                    docs, queries = limits
                    
                    # 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π subscription_type
                    if docs > 0 or queries > 0:
                        # –ï—Å—Ç—å –ª–∏–º–∏—Ç—ã, –Ω–æ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ - –∑–Ω–∞—á–∏—Ç —ç—Ç–æ —Ä–∞–∑–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞
                        new_type = 'one_time'
                    else:
                        # –ù–µ—Ç –ª–∏–º–∏—Ç–æ–≤ - –∑–Ω–∞—á–∏—Ç free
                        new_type = 'free'
                    
                    # 4. –û–±–Ω–æ–≤–ª—è–µ–º subscription_type
                    await execute_query("""
                        UPDATE user_limits 
                        SET subscription_type = ?, updated_at = CURRENT_TIMESTAMP
                        WHERE user_id = ?
                    """, (new_type, user_id))
                    
                    logger.info(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: user_id={user_id}, type={new_type}, docs={docs}, queries={queries}")
                    return True
            else:
                logger.info(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –≤ Stripe")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False

    @staticmethod
    async def check_real_stripe_subscription(user_id: int):
        """
        ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ Stripe
        
        Returns:
            dict: {"has_active": bool, "subscription_id": str, "status": str}
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
            subscription_data = await fetch_one("""
                SELECT stripe_subscription_id, package_id 
                FROM user_subscriptions 
                WHERE user_id = ? AND status = 'active'
                ORDER BY created_at DESC LIMIT 1
            """, (user_id,))
            
            if not subscription_data:
                return {"has_active": False, "subscription_id": None, "status": "none"}
            
            stripe_subscription_id = subscription_data[0]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ Stripe
            try:
                subscription = stripe.Subscription.retrieve(stripe_subscription_id)
                
                if subscription.status in ['active', 'trialing']:
                    return {
                        "has_active": True, 
                        "subscription_id": stripe_subscription_id,
                        "status": subscription.status
                    }
                else:
                    # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –≤ Stripe - –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î
                    await SubscriptionManager._sync_inactive_subscription(user_id, stripe_subscription_id, subscription.status)
                    return {
                        "has_active": False, 
                        "subscription_id": stripe_subscription_id,
                        "status": subscription.status
                    }
                    
            except stripe.error.InvalidRequestError:
                # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Stripe - —É–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
                await SubscriptionManager._sync_deleted_subscription(user_id, stripe_subscription_id)
                return {"has_active": False, "subscription_id": None, "status": "deleted"}
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Stripe –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return {"has_active": False, "subscription_id": None, "status": "error"}
    
    @staticmethod
    async def _sync_inactive_subscription(user_id: int, stripe_subscription_id: str, stripe_status: str):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î"""
        try:
            await execute_query("""
                UPDATE user_subscriptions 
                SET status = 'cancelled', cancelled_at = ?
                WHERE user_id = ? AND stripe_subscription_id = ?
            """, (datetime.now(), user_id, stripe_subscription_id))
            
            logger.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ {stripe_subscription_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
    
    @staticmethod
    async def _sync_deleted_subscription(user_id: int, stripe_subscription_id: str):
        """–£–¥–∞–ª—è–µ—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤ Stripe –ø–æ–¥–ø–∏—Å–∫—É –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î"""
        try:
            await execute_query("""
                DELETE FROM user_subscriptions 
                WHERE user_id = ? AND stripe_subscription_id = ?
            """, (user_id, stripe_subscription_id))
            
            logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ {stripe_subscription_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
    
    @staticmethod
    async def purchase_package(user_id: int, package_id: str, payment_method: str = 'stripe'):
        """
        ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è –ø–æ–∫—É–ø–∫–∏ –ø–∞–∫–µ—Ç–∞ - –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨!
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç–∞
            package = await fetch_one("""
                SELECT name, price_usd, documents_included, gpt4o_queries_included, type
                FROM subscription_packages 
                WHERE id = $1 AND is_active = TRUE
            """, (package_id,))
            
            if not package:
                raise ValueError(f"–ü–∞–∫–µ—Ç {package_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
            
            name, price, docs, queries, pkg_type = package
            
            # ‚úÖ –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
            stripe_check = await SubscriptionManager.check_real_stripe_subscription(user_id)
            has_active_subscription = stripe_check["has_active"]
            
            logger.info(f"–ü–æ–∫—É–ø–∫–∞ {package_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: {has_active_subscription}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            current = await fetch_one("""
                SELECT documents_left, gpt4o_queries_left, subscription_type
                FROM user_limits 
                WHERE user_id = ?
            """, (user_id,))
            
            if not current:
                await execute_query("""
                    INSERT INTO user_limits (user_id, documents_left, gpt4o_queries_left)
                    VALUES (?, 0, 0)
                """, (user_id,))
                current_docs, current_queries, current_sub_type = 0, 0, 'free'
            else:
                current_docs, current_queries, current_sub_type = current
            
            # ‚úÖ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π subscription_type
            if pkg_type == 'subscription':
                # –ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ - –≤—Å–µ–≥–¥–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º subscription
                final_subscription_type = 'subscription'
                # –ó–∞–º–µ–Ω—è–µ–º –ª–∏–º–∏—Ç—ã (–Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º)
                new_docs = docs
                new_queries = queries
                logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ {package_id}: –∑–∞–º–µ–Ω—è–µ–º –ª–∏–º–∏—Ç—ã –Ω–∞ {docs}/{queries}")
            elif has_active_subscription:
                # ‚úÖ –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ - –ù–ï –ú–ï–ù–Ø–ï–ú —Ç–∏–ø
                final_subscription_type = 'subscription'  # –û—Å—Ç–∞–≤–ª—è–µ–º subscription!
                # –î–æ–±–∞–≤–ª—è–µ–º –∫ —Ç–µ–∫—É—â–∏–º –ª–∏–º–∏—Ç–∞–º
                new_docs = current_docs + docs
                new_queries = current_queries + queries
                logger.info(f"Extra Pack –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ: –¥–æ–±–∞–≤–ª—è–µ–º {docs}/{queries} –∫ {current_docs}/{current_queries}")
            else:
                # –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ - –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å one_time
                final_subscription_type = 'one_time'
                # –î–æ–±–∞–≤–ª—è–µ–º –∫ —Ç–µ–∫—É—â–∏–º –ª–∏–º–∏—Ç–∞–º
                new_docs = current_docs + docs
                new_queries = current_queries + queries
                logger.info(f"Extra Pack –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º one_time, –¥–æ–±–∞–≤–ª—è–µ–º {docs}/{queries}")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è
            expiry_date = datetime.now() + timedelta(days=30)
            
            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            transaction_id = await execute_query("""
                INSERT INTO transactions 
                (user_id, package_id, amount_usd, package_type, payment_method, 
                 documents_granted, queries_granted, status, completed_at)
                VALUES (?, ?, ?, ?, ?, ?, ?, 'completed', CURRENT_TIMESTAMP)
            """, (user_id, package_id, price, name, payment_method, docs, queries))
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤
            await execute_query("""
                UPDATE user_limits SET 
                    documents_left = ?,
                    gpt4o_queries_left = ?,
                    subscription_type = ?,
                    subscription_expires_at = ?,
                    updated_at = CURRENT_TIMESTAMP
                WHERE user_id = ?
            """, (new_docs, new_queries, final_subscription_type, expiry_date, user_id))
            
            logger.info(f"‚úÖ –ü–∞–∫–µ—Ç {package_id} –∫—É–ø–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}. –¢–∏–ø: {final_subscription_type}, –ù–æ–≤—ã–µ –ª–∏–º–∏—Ç—ã: {new_docs} docs, {new_queries} queries")
            
            return {
                "success": True,
                "transaction_id": transaction_id,
                "new_documents": new_docs,
                "new_queries": new_queries,
                "subscription_type": final_subscription_type,
                "expires_at": expiry_date
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø–∞–∫–µ—Ç–∞ {package_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return {"success": False, "error": str(e)}
    
    # subscription_manager.py - –ó–ê–ú–ï–ù–ò–¢–¨ —Ñ—É–Ω–∫—Ü–∏—é cancel_stripe_subscription

    @staticmethod
    async def cancel_stripe_subscription(user_id: int):
        """
        ‚úÖ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏
        """
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ Stripe
            stripe_check = await SubscriptionManager.check_real_stripe_subscription(user_id)
            
            if not stripe_check["has_active"]:
                # –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∞ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞
                status = stripe_check["status"]
                
                # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–≤–µ—à–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await SubscriptionManager.fix_orphaned_subscription_state(user_id)
                
                if status == "deleted":
                    return True, "–ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ —Ä–∞–Ω–µ–µ (–¥–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã)"
                elif status in ["canceled", "cancelled"]:
                    return True, "–ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞ –≤ Stripe (–¥–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã)"
                else:
                    return True, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ (–¥–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã)"
            
            stripe_subscription_id = stripe_check["subscription_id"]
            
            # –û—Ç–º–µ–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ Stripe
            try:
                import stripe
                subscription = stripe.Subscription.modify(
                    stripe_subscription_id,
                    cancel_at_period_end=True
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
                await execute_query("""
                    UPDATE user_subscriptions 
                    SET status = 'cancelled', cancelled_at = ?
                    WHERE stripe_subscription_id = ?
                """, (datetime.now(), stripe_subscription_id))
                
                # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ò—Å–ø—Ä–∞–≤–ª—è–µ–º subscription_type –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã
                await SubscriptionManager.fix_orphaned_subscription_state(user_id)
                
                logger.info(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ {stripe_subscription_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–º–µ–Ω–µ–Ω–∞")
                
                return True, "–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –õ–∏–º–∏—Ç—ã –æ—Å—Ç–∞–Ω—É—Ç—Å—è –¥–æ –∫–æ–Ω—Ü–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞."
                
            except stripe.error.InvalidRequestError as stripe_error:
                # –ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞ –≤ Stripe
                if "canceled subscription" in str(stripe_error):
                    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î
                    await SubscriptionManager._sync_inactive_subscription(user_id, stripe_subscription_id, "cancelled")
                    await SubscriptionManager.fix_orphaned_subscription_state(user_id)
                    return True, "–ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –≤ Stripe (–¥–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã)"
                else:
                    raise stripe_error
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False, f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏: {e}"
    
    @staticmethod
    async def get_user_limits(user_id: int):
        """
        ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è - –ë–ï–ó –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        """
        try:
            # ‚úÖ –£–ë–ò–†–ê–ï–ú –≠–¢–£ –°–¢–†–û–ö–£:
            # await SubscriptionManager.fix_orphaned_subscription_state(user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å)
            await SubscriptionManager.check_and_reset_expired_limits(user_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã
            result = await fetch_one("""
                SELECT documents_left, gpt4o_queries_left, subscription_type, subscription_expires_at
                FROM user_limits 
                WHERE user_id = ?
            """, (user_id,))
            
            if not result:
                return {
                    "documents_left": 0,
                    "gpt4o_queries_left": 0,
                    "subscription_type": "free",
                    "expires_at": None
                }
            
            docs, queries, sub_type, expires_at = result
            
            return {
                "documents_left": docs,
                "gpt4o_queries_left": queries, 
                "subscription_type": sub_type,
                "expires_at": expires_at
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return None
    
    @staticmethod
    async def spend_limits(user_id: int, documents: int = 0, queries: int = 0):
        """
        –¢—Ä–∞—Ç–∏—Ç –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        """
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –ª–∏–º–∏—Ç—ã
            await SubscriptionManager.check_and_reset_expired_limits(user_id)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã
            current = await fetch_one("""
                SELECT documents_left, gpt4o_queries_left 
                FROM user_limits 
                WHERE user_id = ?
            """, (user_id,))
            
            if not current:
                return {"success": False, "error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            
            current_docs, current_queries = current
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –ª–∏–º–∏—Ç–æ–≤
            if documents > current_docs:
                return {"success": False, "error": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏–º–∏—Ç–æ–≤ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã"}
            
            if queries > current_queries:
                return {"success": False, "error": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏–º–∏—Ç–æ–≤ –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã"}
            
            # –°–ø–∏—Å—ã–≤–∞–µ–º –ª–∏–º–∏—Ç—ã
            new_docs = current_docs - documents
            new_queries = current_queries - queries
            
            await execute_query("""
                UPDATE user_limits SET 
                    documents_left = ?,
                    gpt4o_queries_left = ?,
                    updated_at = CURRENT_TIMESTAMP
                WHERE user_id = ?
            """, (new_docs, new_queries, user_id))
            
            logger.info(f"–°–ø–∏—Å–∞–Ω—ã –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: -{documents} docs, -{queries} queries")
            
            return {
                "success": True,
                "remaining_documents": new_docs,
                "remaining_queries": new_queries
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return {"success": False, "error": str(e)}
    
    @staticmethod
    async def check_and_reset_expired_limits(user_id: int):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ –ª–∏–º–∏—Ç—ã (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)"""
        try:
            user_data = await fetch_one("""
                SELECT documents_left, gpt4o_queries_left, subscription_expires_at, subscription_type
                FROM user_limits 
                WHERE user_id = ?
            """, (user_id,))
            
            if not user_data:
                return
            
            documents_left, queries_left, expires_at, sub_type = user_data
            
            if not expires_at:
                return
            
            if isinstance(expires_at, str):
                expiry_date = datetime.fromisoformat(expires_at.replace('Z', '+00:00'))
            else:
                expiry_date = expires_at
            now = datetime.now()
            
            if now >= expiry_date:
                logger.info(f"–õ–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏—Å—Ç–µ–∫–ª–∏. –¢–∏–ø: {sub_type}")
                
                if sub_type == 'subscription':
                    await SubscriptionManager._auto_renew_subscription(user_id)
                else:
                    await SubscriptionManager._reset_to_zero(user_id)
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    @staticmethod
    async def _auto_renew_subscription(user_id: int):
        """–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)"""
        try:
            transaction = await fetch_one("""
                SELECT package_id, documents_granted, queries_granted
                FROM transactions 
                WHERE user_id = ? AND status = 'completed' AND package_id LIKE '%_sub'
                ORDER BY completed_at DESC LIMIT 1
            """, (user_id,))
            
            if not transaction:
                logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                await SubscriptionManager._reset_to_zero(user_id)
                return
            
            package_id, docs, queries = transaction
            new_expiry = datetime.now() + timedelta(days=30)
            
            await execute_query("""
                UPDATE user_limits SET 
                    documents_left = ?,
                    gpt4o_queries_left = ?,
                    subscription_expires_at = ?,
                    updated_at = CURRENT_TIMESTAMP
                WHERE user_id = ?
            """, (docs, queries, new_expiry, user_id))
            
            logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∞ –¥–æ {new_expiry.date()}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await SubscriptionManager._reset_to_zero(user_id)
    
    @staticmethod
    async def _reset_to_zero(user_id: int):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ª–∏–º–∏—Ç—ã –¥–æ –Ω—É–ª—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)"""
        try:
            await execute_query("""
                UPDATE user_limits SET 
                    documents_left = 0,
                    gpt4o_queries_left = 0,
                    subscription_expires_at = NULL,
                    subscription_type = 'free',
                    updated_at = CURRENT_TIMESTAMP
                WHERE user_id = ?
            """, (user_id,))
            
            logger.info(f"–õ–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–±—Ä–æ—à–µ–Ω—ã –¥–æ –Ω—É–ª—è")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥
async def check_document_limit(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"""
    limits = await SubscriptionManager.get_user_limits(user_id)
    return limits and limits["documents_left"] > 0

async def check_gpt4o_limit(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GPT-4o"""
    limits = await SubscriptionManager.get_user_limits(user_id)
    return limits and limits["gpt4o_queries_left"] > 0

async def spend_document_limit(user_id: int) -> bool:
    """–°–ø–∏—Å—ã–≤–∞–µ—Ç 1 –¥–æ–∫—É–º–µ–Ω—Ç"""
    result = await SubscriptionManager.spend_limits(user_id, documents=1)
    return result["success"]

async def spend_gpt4o_limit(user_id: int) -> bool:
    """–°–ø–∏—Å—ã–≤–∞–µ—Ç 1 GPT-4o –∑–∞–ø—Ä–æ—Å"""
    result = await SubscriptionManager.spend_limits(user_id, queries=1)
    return result["success"]