# subscription_manager.py - –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –§–ê–ô–õ —Å PostgreSQL —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º

import stripe
import logging
from datetime import datetime, timedelta
from db_postgresql import fetch_one, execute_query

logger = logging.getLogger(__name__)

class SubscriptionManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –ª–∏–º–∏—Ç–æ–≤"""
    
    @staticmethod
    async def fix_orphaned_subscription_state(user_id: int):
        """
        ‚úÖ –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç "–ø–æ–¥–≤–µ—à–µ–Ω–Ω–æ–µ" —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        –ö–æ–≥–¥–∞ –≤ –ë–î –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –æ –ø–æ–¥–ø–∏—Å–∫–µ, –Ω–æ –≤ Stripe –µ—ë –Ω–µ—Ç
        """
        try:
            logger.info("üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ Stripe
            stripe_check = await SubscriptionManager.check_real_stripe_subscription(user_id)
            
            if not stripe_check["has_active"]:
                # –í Stripe –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ - –ø—Ä–∏–≤–æ–¥–∏–º –ë–î –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
                
                # 1. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–æ–∫ –≤ user_subscriptions
                await execute_query("""
                    UPDATE user_subscriptions 
                    SET status = 'cancelled', cancelled_at = $1
                    WHERE user_id = $2 AND status = 'active'
                """, (datetime.now(), user_id))
                
                # 2. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã
                limits = await fetch_one("""
                    SELECT documents_left, gpt4o_queries_left 
                    FROM user_limits 
                    WHERE user_id = $1
                """, (user_id,))
                
                if limits:
                    docs, queries = limits
                    
                    # 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π subscription_type
                    if docs > 0 or queries > 0:
                        new_type = 'one_time'
                    else:
                        new_type = 'free'
                    
                    # 4. –û–±–Ω–æ–≤–ª—è–µ–º subscription_type
                    await execute_query("""
                        UPDATE user_limits 
                        SET subscription_type = $1, updated_at = CURRENT_TIMESTAMP
                        WHERE user_id = $2
                    """, (new_type, user_id))
                    
                    logger.info("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ")
                    return True
            else:
                logger.info("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –≤ Stripe")
                return True
                
        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏")
            return False

    @staticmethod
    async def check_real_stripe_subscription(user_id: int):
        """‚úÖ –ù–ê–¢–ò–í–ù–´–ô PostgreSQL —Å–∏–Ω—Ç–∞–∫—Å–∏—Å"""
        try:
            subscription_data = await fetch_one("""
                SELECT stripe_subscription_id, package_id, status 
                FROM user_subscriptions 
                WHERE user_id = $1 AND stripe_subscription_id IS NOT NULL
                ORDER BY created_at DESC LIMIT 1
            """, (user_id,))
            
            logger.info(f"üîç –ü–æ–∏—Å–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –ë–î: –Ω–∞–π–¥–µ–Ω–æ {len(subscription_data) if subscription_data else 0} –∑–∞–ø–∏—Å–µ–π")
            
            if not subscription_data:
                logger.info("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î")
                return {"has_active": False, "subscription_id": None, "status": "none"}
            
            stripe_subscription_id = subscription_data[0]
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –≤ –ë–î: {stripe_subscription_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ Stripe
            try:
                import stripe
                subscription = stripe.Subscription.retrieve(stripe_subscription_id)
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏–∑ Stripe: status={subscription.status}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É –≤ –∫–æ–Ω—Ü–µ –ø–µ—Ä–∏–æ–¥–∞
                is_cancelled_at_period_end = getattr(subscription, 'cancel_at_period_end', False)
                logger.info(f"üîç cancel_at_period_end: {is_cancelled_at_period_end}")
                
                if subscription.status in ['active', 'trialing'] and not is_cancelled_at_period_end:
                    logger.info("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –≤ Stripe")
                    return {
                        "has_active": True, 
                        "subscription_id": stripe_subscription_id,
                        "status": subscription.status
                    }
                elif subscription.status in ['active', 'trialing'] and is_cancelled_at_period_end:
                    logger.info("‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, –Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞ –≤ –∫–æ–Ω—Ü–µ –ø–µ—Ä–∏–æ–¥–∞")
                    return {
                        "has_active": False, 
                        "subscription_id": stripe_subscription_id,
                        "status": "cancelled_at_period_end"
                    }
                else:
                    logger.info(f"‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –≤ Stripe: {subscription.status}")
                    return {
                        "has_active": False, 
                        "subscription_id": stripe_subscription_id,
                        "status": subscription.status
                    }
                    
            except stripe.error.InvalidRequestError as e:
                logger.warning(f"‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Stripe: {e}")
                return {"has_active": False, "subscription_id": None, "status": "deleted"}
            except Exception as stripe_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Stripe: {stripe_error}")
                return {"has_active": False, "subscription_id": None, "status": "error"}
                
        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Stripe –ø–æ–¥–ø–∏—Å–∫–∏")
            return {"has_active": False, "subscription_id": None, "status": "error"}
    
    @staticmethod
    async def _sync_inactive_subscription(user_id: int, stripe_subscription_id: str, stripe_status: str):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î"""
        try:
            await execute_query("""
                UPDATE user_subscriptions 
                SET status = 'cancelled', cancelled_at = $1
                WHERE user_id = $2 AND stripe_subscription_id = $3
            """, (datetime.now(), user_id, stripe_subscription_id))
            
            logger.info("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞")
            
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏")
    
    @staticmethod
    async def _sync_deleted_subscription(user_id: int, stripe_subscription_id: str):
        """–£–¥–∞–ª—è–µ—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤ Stripe –ø–æ–¥–ø–∏—Å–∫—É –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î"""
        try:
            await execute_query("""
                DELETE FROM user_subscriptions 
                WHERE user_id = $1 AND stripe_subscription_id = $2
            """, (user_id, stripe_subscription_id))
            
            logger.info("‚úÖ –£–¥–∞–ª–µ–Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞")
            
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏")
    
    @staticmethod
    async def purchase_package(user_id: int, package_id: str, payment_method: str = 'stripe'):
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è –ø–æ–∫—É–ø–∫–∏ –ø–∞–∫–µ—Ç–∞ —Å PostgreSQL —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º"""
        try:
            from db_postgresql import get_user_language, t
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç–∞
            package = await fetch_one("""
                SELECT name, price_usd, documents_included, gpt4o_queries_included, type
                FROM subscription_packages 
                WHERE id = $1 AND is_active = TRUE
            """, (package_id,))
            
            if not package:
                lang = await get_user_language(user_id)
                raise ValueError(t("package_not_found", lang, package_id=package_id))
            
            name, price, docs, queries, pkg_type = package
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
            stripe_check = await SubscriptionManager.check_real_stripe_subscription(user_id)
            has_active_subscription = stripe_check["has_active"]
            
            logger.info("–ü–æ–∫—É–ø–∫–∞ –ø–∞–∫–µ—Ç–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            current = await fetch_one("""
                SELECT documents_left, gpt4o_queries_left, subscription_type
                FROM user_limits 
                WHERE user_id = $1
            """, (user_id,))
            
            if not current:
                await execute_query("""
                    INSERT INTO user_limits (user_id, documents_left, gpt4o_queries_left)
                    VALUES ($1, 0, 0)
                """, (user_id,))
                current_docs, current_queries, current_sub_type = 0, 0, 'free'
            else:
                current_docs, current_queries, current_sub_type = current
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π subscription_type
            if pkg_type == 'subscription':
                final_subscription_type = 'subscription'
                new_docs = docs
                new_queries = queries
                logger.info("–ü–æ–¥–ø–∏—Å–∫–∞: –∑–∞–º–µ–Ω—è–µ–º –ª–∏–º–∏—Ç—ã")
            elif has_active_subscription:
                final_subscription_type = 'subscription'  # –û—Å—Ç–∞–≤–ª—è–µ–º subscription!
                new_docs = current_docs + docs
                new_queries = current_queries + queries
            else:
                final_subscription_type = 'one_time'
                new_docs = current_docs + docs
                new_queries = current_queries + queries
                logger.info("Extra Pack –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º one_time")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è
            expiry_date = datetime.now() + timedelta(days=30)
            
            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            transaction_id = await execute_query("""
                INSERT INTO transactions 
                (user_id, package_id, amount_usd, package_type, payment_method, 
                 documents_granted, queries_granted, status, completed_at)
                VALUES ($1, $2, $3, $4, $5, $6, $7, 'completed', CURRENT_TIMESTAMP)
            """, (user_id, package_id, price, name, payment_method, docs, queries))
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤
            await execute_query("""
                UPDATE user_limits SET 
                    documents_left = $1,
                    gpt4o_queries_left = $2,
                    subscription_type = $3,
                    subscription_expires_at = $4,
                    updated_at = CURRENT_TIMESTAMP
                WHERE user_id = $5
            """, (new_docs, new_queries, final_subscription_type, expiry_date, user_id))

            return {
                "success": True,
                "transaction_id": transaction_id,
                "new_documents": new_docs,
                "new_queries": new_queries,
                "subscription_type": final_subscription_type,
                "expires_at": expiry_date
            }
            
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø–∞–∫–µ—Ç–∞")
            return {"success": False, "error": str(e)}
    
    @staticmethod
    async def cancel_stripe_subscription(user_id: int):
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ —Å PostgreSQL —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º"""
        try:
            from db_postgresql import get_user_language, t
            lang = await get_user_language(user_id)
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ Stripe
            stripe_check = await SubscriptionManager.check_real_stripe_subscription(user_id)
            
            if not stripe_check["has_active"]:
                # –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∞ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞
                status = stripe_check["status"]
                
                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–≤–µ—à–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await SubscriptionManager.fix_orphaned_subscription_state(user_id)
                
                if status == "deleted":
                    return True, t("subscription_already_cancelled_synced", lang)
                elif status in ["canceled", "cancelled", "cancelled_at_period_end"]:
                    return True, t("subscription_already_cancelled_stripe", lang)
                else:
                    return True, t("subscription_no_active", lang)
            
            stripe_subscription_id = stripe_check["subscription_id"]
            
            # –û—Ç–º–µ–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ Stripe
            try:
                import stripe
                subscription = stripe.Subscription.modify(
                    stripe_subscription_id,
                    cancel_at_period_end=True
                )
                
                # –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î –∫–∞–∫ "–æ—Ç–º–µ–Ω–µ–Ω–∞"
                await execute_query("""
                    UPDATE user_subscriptions 
                    SET status = 'cancelled', cancelled_at = $1
                    WHERE stripe_subscription_id = $2
                """, (datetime.now(), stripe_subscription_id))
                
                # –°—Ä–∞–∑—É –º–µ–Ω—è–µ–º subscription_type –Ω–∞ free
                await execute_query("""
                    UPDATE user_limits 
                    SET subscription_type = 'free'
                    WHERE user_id = $1
                """, (user_id,))
                
                logger.info("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                
                return True, t("subscription_cancelled_success", lang)
                
            except stripe.error.InvalidRequestError as stripe_error:
                # –ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞ –≤ Stripe
                if "canceled subscription" in str(stripe_error):
                    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î
                    await SubscriptionManager._sync_inactive_subscription(user_id, stripe_subscription_id, "cancelled")
                    await SubscriptionManager.fix_orphaned_subscription_state(user_id)
                    return True, t("subscription_already_cancelled_stripe", lang)
                else:
                    raise stripe_error
                
        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏")
            try:
                from db_postgresql import get_user_language, t
                lang = await get_user_language(user_id)
                return False, t("subscription_cancel_error", lang, error=str(e))
            except:
                return False, f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏: {e}"
    
    @staticmethod
    async def get_user_limits(user_id: int):
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Å PostgreSQL —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
            await SubscriptionManager.check_and_reset_expired_limits(user_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã
            result = await fetch_one("""
                SELECT documents_left, gpt4o_queries_left, subscription_type, subscription_expires_at
                FROM user_limits 
                WHERE user_id = $1
            """, (user_id,))
            
            if not result:
                return {
                    "documents_left": 0,
                    "gpt4o_queries_left": 0,
                    "subscription_type": "free",
                    "expires_at": None
                }
            
            docs, queries, sub_type, expires_at = result
            
            return {
                "documents_left": docs,
                "gpt4o_queries_left": queries, 
                "subscription_type": sub_type,
                "expires_at": expires_at
            }
            
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤")
            return None
    
    @staticmethod
    async def spend_limits(user_id: int, documents: int = 0, queries: int = 0):
        """‚úÖ PostgreSQL —Å–∏–Ω—Ç–∞–∫—Å–∏—Å"""
        try:
            from db_postgresql import get_user_language, t
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –ª–∏–º–∏—Ç—ã
            await SubscriptionManager.check_and_reset_expired_limits(user_id)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã
            current = await fetch_one("""
                SELECT documents_left, gpt4o_queries_left 
                FROM user_limits 
                WHERE user_id = $1
            """, (user_id,))
            
            if not current:
                lang = await get_user_language(user_id)
                return {"success": False, "error": t("user_not_found", lang)}
            
            current_docs, current_queries = current
            lang = await get_user_language(user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –ª–∏–º–∏—Ç–æ–≤
            if documents > current_docs:
                return {"success": False, "error": t("insufficient_document_limits", lang)}
            
            if queries > current_queries:
                return {"success": False, "error": t("insufficient_query_limits", lang)}
            
            # –°–ø–∏—Å—ã–≤–∞–µ–º –ª–∏–º–∏—Ç—ã
            new_docs = current_docs - documents
            new_queries = current_queries - queries
            
            await execute_query("""
                UPDATE user_limits SET 
                    documents_left = $1,
                    gpt4o_queries_left = $2,
                    updated_at = CURRENT_TIMESTAMP
                WHERE user_id = $3
            """, (new_docs, new_queries, user_id))
          
            return {
                "success": True,
                "remaining_documents": new_docs,
                "remaining_queries": new_queries
            }
            
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤")
            return {"success": False, "error": str(e)}
    
    @staticmethod
    async def check_and_reset_expired_limits(user_id: int):
        """‚úÖ PostgreSQL —Å–∏–Ω—Ç–∞–∫—Å–∏—Å"""
        try:
            user_data = await fetch_one("""
                SELECT documents_left, gpt4o_queries_left, subscription_expires_at, subscription_type
                FROM user_limits 
                WHERE user_id = $1
            """, (user_id,))
            
            if not user_data:
                return
            
            documents_left, queries_left, expires_at, sub_type = user_data
            
            if not expires_at:
                return
            
            if isinstance(expires_at, str):
                expiry_date = datetime.fromisoformat(expires_at.replace('Z', '+00:00'))
            else:
                expiry_date = expires_at
            now = datetime.now()
            
            if now >= expiry_date:
                logger.info("–õ–∏–º–∏—Ç—ã –∏—Å—Ç–µ–∫–ª–∏")
                
                if sub_type == 'subscription':
                    await SubscriptionManager._auto_renew_subscription(user_id)
                else:
                    await SubscriptionManager._reset_to_zero(user_id)
                    
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤")
    
    @staticmethod
    async def _auto_renew_subscription(user_id: int):
        """‚úÖ PostgreSQL —Å–∏–Ω—Ç–∞–∫—Å–∏—Å"""
        try:
            transaction = await fetch_one("""
                SELECT package_id, documents_granted, queries_granted
                FROM transactions 
                WHERE user_id = $1 AND status = 'completed' AND package_id LIKE '%_sub'
                ORDER BY completed_at DESC LIMIT 1
            """, (user_id,))
            
            if not transaction:
                logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞")
                await SubscriptionManager._reset_to_zero(user_id)
                return
            
            package_id, docs, queries = transaction
            new_expiry = datetime.now() + timedelta(days=30)
            
            await execute_query("""
                UPDATE user_limits SET 
                    documents_left = $1,
                    gpt4o_queries_left = $2,
                    subscription_expires_at = $3,
                    updated_at = CURRENT_TIMESTAMP
                WHERE user_id = $4
            """, (docs, queries, new_expiry, user_id))
            
            logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∞ –¥–æ {new_expiry.date()}")
            
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏")
            await SubscriptionManager._reset_to_zero(user_id)
    
    @staticmethod
    async def _reset_to_zero(user_id: int):
        """‚úÖ PostgreSQL —Å–∏–Ω—Ç–∞–∫—Å–∏—Å"""
        try:
            await execute_query("""
                UPDATE user_limits SET 
                    documents_left = 0,
                    gpt4o_queries_left = 0,
                    subscription_expires_at = NULL,
                    subscription_type = 'free',
                    updated_at = CURRENT_TIMESTAMP
                WHERE user_id = $1
            """, (user_id,))
            
            logger.info("–õ–∏–º–∏—Ç—ã —Å–±—Ä–æ—à–µ–Ω—ã –¥–æ –Ω—É–ª—è")
            
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–æ–≤")

    @staticmethod
    async def force_sync_with_stripe(user_id: int) -> dict:
        """‚úÖ –ù–ê–¢–ò–í–ù–´–ô PostgreSQL —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        try:
            logger.info("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞")
            
            # 1. –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ Stripe
            stripe_check = await SubscriptionManager.check_real_stripe_subscription(user_id)
            logger.info(f"Stripe check result: {stripe_check}")
            
            # 2. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î
            all_subscriptions = await fetch_one("""
                SELECT status, package_id, stripe_subscription_id 
                FROM user_subscriptions 
                WHERE user_id = $1
                ORDER BY created_at DESC LIMIT 1
            """, (user_id,))
            
            active_subscription = await fetch_one("""
                SELECT status, package_id, stripe_subscription_id 
                FROM user_subscriptions 
                WHERE user_id = $1 AND status = 'active'
                ORDER BY created_at DESC LIMIT 1
            """, (user_id,))
            
            db_limits = await fetch_one("""
                SELECT subscription_type, documents_left, gpt4o_queries_left
                FROM user_limits WHERE user_id = $1
            """, (user_id,))
            
            logger.info(f"DB state - all_subs: {all_subscriptions}, active: {active_subscription}, limits: {db_limits}")
            
            # 3. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è
            stripe_active = stripe_check.get("has_active", False)
            db_active = active_subscription is not None
            
            logger.info(f"Comparison - Stripe active: {stripe_active}, DB active: {db_active}")
            
            sync_actions = []
            
            if stripe_active and not db_active:
                logger.info("Case: Stripe active, DB inactive - activating in DB")
                
                if all_subscriptions and stripe_check.get("subscription_id") == all_subscriptions[2]:
                    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
                    await execute_query("""
                        UPDATE user_subscriptions 
                        SET status = 'active', cancelled_at = NULL
                        WHERE user_id = $1 AND stripe_subscription_id = $2
                    """, (user_id, stripe_check["subscription_id"]))
                    sync_actions.append("‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏")
                    
                else:
                    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –ø–æ–¥–ø–∏—Å–∫–∏
                    package_id = await SubscriptionManager._detect_package_from_stripe(
                        stripe_check["subscription_id"]
                    )
                    
                    await execute_query("""
                        INSERT INTO user_subscriptions 
                        (user_id, stripe_subscription_id, package_id, status, created_at, cancelled_at)
                        VALUES ($1, $2, $3, $4, $5, $6)
                        ON CONFLICT (user_id) 
                        DO UPDATE SET 
                            stripe_subscription_id = EXCLUDED.stripe_subscription_id,
                            package_id = EXCLUDED.package_id,
                            status = EXCLUDED.status,
                            created_at = EXCLUDED.created_at,
                            cancelled_at = EXCLUDED.cancelled_at
                    """, (user_id, stripe_check["subscription_id"], package_id, 'active', datetime.now(), None))
                    sync_actions.append("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏")
                
            elif not stripe_active and db_active:
                logger.info("Case: Stripe inactive, DB active - deactivating in DB")
                await execute_query("""
                    UPDATE user_subscriptions 
                    SET status = 'cancelled', cancelled_at = $1
                    WHERE user_id = $2 AND status = 'active'
                """, (datetime.now(), user_id))
                sync_actions.append("‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏")
                
            elif stripe_active and db_active:
                logger.info("Case: Both active - checking details")
                stripe_sub_id = stripe_check["subscription_id"]
                db_sub_id = active_subscription[2]
                
                if stripe_sub_id != db_sub_id:
                    await execute_query("""
                        UPDATE user_subscriptions 
                        SET stripe_subscription_id = $1
                        WHERE user_id = $2 AND status = 'active'
                    """, (stripe_sub_id, user_id))
                    sync_actions.append("üîÑ –û–±–Ω–æ–≤–ª—ë–Ω Stripe subscription ID")
            
            # 4. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ subscription_type
            if db_limits:
                current_type = db_limits[0]
                expected_type = 'subscription' if stripe_active else 'free'
                
                logger.info(f"Subscription type - current: {current_type}, expected: {expected_type}")
                
                if current_type != expected_type:
                    await execute_query("""
                        UPDATE user_limits 
                        SET subscription_type = $1
                        WHERE user_id = $2
                    """, (expected_type, user_id))
                    sync_actions.append(f"üîÑ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω subscription_type –Ω–∞ {expected_type}")
            
            if sync_actions:
                logger.info(f"Sync completed: {len(sync_actions)} actions performed")
                for action in sync_actions:
                    logger.info(f"  - {action}")
            else:
                logger.info("No sync actions needed")
            
            return {
                "synced": True,
                "stripe_active": stripe_active,
                "db_active": db_active,
                "actions": sync_actions
            }
            
        except Exception as e:
            logger.error(f"‚ùå Subscription sync failed: {e}")
            import traceback
            logger.error(f"‚ùå Full traceback: {traceback.format_exc()}")
            return {"synced": False, "error": f"Sync failed: {e}", "actions": []}

    @staticmethod
    async def _detect_package_from_stripe(stripe_subscription_id: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç package_id –ø–æ Stripe –ø–æ–¥–ø–∏—Å–∫–µ"""
        try:
            import stripe
            subscription = stripe.Subscription.retrieve(stripe_subscription_id)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∏–∑ Stripe
            amount_cents = subscription.plan.amount
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–∫–µ—Ç –ø–æ —Å—É–º–º–µ (—É—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥—ã)
            if amount_cents in [399, 99]:  # $3.99 –∏–ª–∏ $0.99 (–ø—Ä–æ–º–æ–∫–æ–¥)
                return "basic_sub"
            elif amount_cents in [999, 199]:  # $9.99 –∏–ª–∏ $1.99 (–ø—Ä–æ–º–æ–∫–æ–¥)
                return "premium_sub"
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—É–º–º–∞ –≤ Stripe: ${amount_cents/100}")
                return "basic_sub"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                
        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–∞–∫–µ—Ç–∞ –∏–∑ Stripe")
            return "basic_sub"

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥
async def check_document_limit(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"""
    limits = await SubscriptionManager.get_user_limits(user_id)
    return limits and limits["documents_left"] > 0

async def check_gpt4o_limit(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GPT-4o"""
    limits = await SubscriptionManager.get_user_limits(user_id)
    return limits and limits["gpt4o_queries_left"] > 0

async def spend_document_limit(user_id: int) -> bool:
    """–°–ø–∏—Å—ã–≤–∞–µ—Ç 1 –¥–æ–∫—É–º–µ–Ω—Ç"""
    result = await SubscriptionManager.spend_limits(user_id, documents=1)
    return result["success"]

async def spend_gpt4o_limit(user_id: int, message=None, bot=None) -> bool:
    """
    –°–ø–∏—Å—ã–≤–∞–µ—Ç 1 GPT-4o –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –ª–∏–º–∏—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã –î–û —Ç—Ä–∞—Ç—ã (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ 1‚Üí0)
        should_notify = False
        subscription_type = 'free'
        
        if message and bot:
            current_limits = await SubscriptionManager.get_user_limits(user_id)
            current_gpt4o = current_limits.get('gpt4o_queries_left', 0)
            subscription_type = current_limits.get('subscription_type', 'free')
            
            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            should_notify = (current_gpt4o == 1)
        
        # –¢—Ä–∞—Ç–∏–º –ª–∏–º–∏—Ç —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–∏—Å—Ç–µ–º—É
        result = await SubscriptionManager.spend_limits(user_id, queries=1)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
        if result["success"] and should_notify:
            await _show_limits_exhausted_notification(user_id, message, bot, subscription_type)
        
        return result["success"]
        
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ —Ç—Ä–∞—Ç—ã –ª–∏–º–∏—Ç–∞")
        return False


async def _show_limits_exhausted_notification(user_id: int, message, bot, subscription_type: str):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    –†–∞–∑–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏
    """
    try:
        from db_postgresql import get_user_language, t
        
        lang = await get_user_language(user_id)
        
        # –†–∞–∑–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
        if subscription_type in ['free', 'one_time']:
            # –î–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏ —Ä–∞–∑–æ–≤—ã—Ö –ø–æ–∫—É–ø–æ–∫ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            text = t("limits_exhausted_free_message", lang)
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
            button_text = t("limits_exhausted_subscription_button", lang)
            show_subscription_button = True
            
        else:  # subscription - –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
            # –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–æ–π - –ø—Ä–æ—Å—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º
            text = t("limits_exhausted_subscription_message", lang)
            show_subscription_button = False
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        keyboard = None
        if show_subscription_button:
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=button_text,
                    callback_data="subscription_menu"
                )]
            ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await bot.send_message(
            chat_id=user_id,
            text=text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
        logger.info("Limit notification sent to user")
        
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")