# notification_system.py - –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–æ–¥–ø–∏—Å–∫–µ

import logging
from datetime import datetime
from subscription_manager import SubscriptionManager, check_document_limit, check_gpt4o_limit
from subscription_handlers import SubscriptionHandlers, upsell_tracker
from db import get_user_language

logger = logging.getLogger(__name__)

class NotificationSystem:
    """–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–æ–¥–ø–∏—Å–∫–µ –∏ –ª–∏–º–∏—Ç–∞—Ö"""
    
    @staticmethod
    async def check_and_notify_limits(message, user_id: int, action_type: str = "message") -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        
        Args:
            message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            action_type: –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è ("message", "document", "image")
            
        Returns:
            bool: True –µ—Å–ª–∏ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ, False –µ—Å–ª–∏ –ª–∏–º–∏—Ç—ã –∏—Å—á–µ—Ä–ø–∞–Ω—ã
        """
        try:
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—á–µ—Ç—á–∏–∫ upsell
            if action_type == "message":
                return await NotificationSystem._handle_message_upsell(message, user_id)
            
            # –î–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
            elif action_type in ["document", "image"]:
                return await NotificationSystem._handle_document_limits(message, user_id, action_type)
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return True  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    
    @staticmethod
    async def _handle_message_upsell(message, user_id: int) -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∫–∞–∑ upsell –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        
        Args:
            message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            bool: True (—Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–≥–¥–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã)
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ GPT-4o –ª–∏–º–∏—Ç—ã
            has_gpt4o_limits = await check_gpt4o_limit(user_id)
            
            if not has_gpt4o_limits:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
                upsell_tracker.increment_message_count(user_id)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å upsell (–∫–∞–∂–¥—ã–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π)
                if upsell_tracker.should_show_upsell(user_id):
                    await SubscriptionHandlers.show_subscription_upsell(
                        message, user_id, reason="better_response"
                    )
            
            return True  # –°–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–≥–¥–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ message upsell –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return True
    
    @staticmethod
    async def _handle_document_limits(message, user_id: int, action_type: str) -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        
        Args:
            message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  
            action_type: –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è ("document" –∏–ª–∏ "image")
            
        Returns:
            bool: True –µ—Å–ª–∏ –ª–∏–º–∏—Ç—ã –µ—Å—Ç—å, False –µ—Å–ª–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã
            has_document_limits = await check_document_limit(user_id)
            
            if not has_document_limits:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ—Ö–≤–∞—Ç–∫–µ –ª–∏–º–∏—Ç–æ–≤
                await NotificationSystem._show_limits_exceeded_notification(
                    message, user_id, action_type
                )
                return False
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return True  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    
    @staticmethod
    async def _show_limits_exceeded_notification(message, user_id: int, action_type: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤"""
        try:
            lang = await get_user_language(user_id)
            limits = await SubscriptionManager.get_user_limits(user_id)
            
            # –ù–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è GPT-4o
            if action_type == "document":
                limit_messages = {
                    "ru": f"üìÑ **–õ–∏–º–∏—Ç –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏—Å—á–µ—Ä–ø–∞–Ω**\n\nüìä **–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã:**\n‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã: {limits['documents_left']}\n‚Ä¢ –ì–ª—É–±–æ–∫–∏–µ –æ—Ç–≤–µ—Ç—ã: {limits['gpt4o_queries_left']}\n\nüíé –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∞–Ω–∞–ª–∏–∑–æ–≤!",
                    "uk": f"üìÑ **–õ—ñ–º—ñ—Ç –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –≤–∏—á–µ—Ä–ø–∞–Ω–æ**\n\nüìä **–í–∞—à—ñ –ø–æ—Ç–æ—á–Ω—ñ –ª—ñ–º—ñ—Ç–∏:**\n‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç–∏: {limits['documents_left']}\n‚Ä¢ –ì–ª–∏–±–æ–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {limits['gpt4o_queries_left']}\n\nüíé –û—Ñ–æ—Ä–º—ñ—Ç—å –ø—ñ–¥–ø–∏—Å–∫—É –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±—ñ–ª—å—à–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ —Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–∏—Ö –º–µ–¥–∏—á–Ω–∏—Ö –∞–Ω–∞–ª—ñ–∑—ñ–≤!",
                    "en": f"üìÑ **Document limit exceeded**\n\nüìä **Your current limits:**\n‚Ä¢ Documents: {limits['documents_left']}\n‚Ä¢ Deep responses: {limits['gpt4o_queries_left']}\n\nüíé Get a subscription to upload more documents and receive detailed medical analysis!"
                }
            else:  # image
                limit_messages = {
                    "ru": f"üì∏ **–õ–∏–º–∏—Ç –Ω–∞ –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω**\n\nüìä **–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã:**\n‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã: {limits['documents_left']}\n‚Ä¢ –ì–ª—É–±–æ–∫–∏–µ –æ—Ç–≤–µ—Ç—ã: {limits['gpt4o_queries_left']}\n\nüíé –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Å–Ω–∏–º–∫–æ–≤ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –∑–∞–∫–ª—é—á–µ–Ω–∏—è–º–∏!",
                    "uk": f"üì∏ **–õ—ñ–º—ñ—Ç –Ω–∞ –∞–Ω–∞–ª—ñ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω—å –≤–∏—á–µ—Ä–ø–∞–Ω–æ**\n\nüìä **–í–∞—à—ñ –ø–æ—Ç–æ—á–Ω—ñ –ª—ñ–º—ñ—Ç–∏:**\n‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç–∏: {limits['documents_left']}\n‚Ä¢ –ì–ª–∏–±–æ–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {limits['gpt4o_queries_left']}\n\nüíé –û—Ñ–æ—Ä–º—ñ—Ç—å –ø—ñ–¥–ø–∏—Å–∫—É –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –±—ñ–ª—å—à–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –º–µ–¥–∏—á–Ω–∏—Ö –∑–Ω—ñ–º–∫—ñ–≤ –∑ –¥–µ—Ç–∞–ª—å–Ω–∏–º–∏ –≤–∏—Å–Ω–æ–≤–∫–∞–º–∏!",
                    "en": f"üì∏ **Image analysis limit exceeded**\n\nüìä **Your current limits:**\n‚Ä¢ Documents: {limits['documents_left']}\n‚Ä¢ Deep responses: {limits['gpt4o_queries_left']}\n\nüíé Get a subscription to analyze more medical scans with detailed conclusions!"
                }
            
            await SubscriptionHandlers.show_subscription_upsell(
                message, user_id, reason="limits_exceeded"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ª–∏–º–∏—Ç–∞—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    @staticmethod
    async def notify_successful_purchase(user_id: int, package_id: str):
        """
        –£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–µ (—Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫–∏ upsell)
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            package_id: ID –∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞
        """
        try:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ upsell —Å–æ–æ–±—â–µ–Ω–∏–π
            upsell_tracker.reset_count(user_id)
            
            logger.info(f"–°—á–µ—Ç—á–∏–∫ upsell —Å–±—Ä–æ—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ {package_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–∞ upsell –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    @staticmethod
    async def check_subscription_expiry_warnings():
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏–µ—Å—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        (–§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á–∞—Ö)
        """
        try:
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –∑–∞ 3 –¥–Ω—è –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
            # –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–≥–æ—Ç–æ–≤–∫—É –¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
            pass
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫: {e}")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥

async def should_show_document_upload(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    return await check_document_limit(user_id)

async def should_show_image_upload(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    return await check_document_limit(user_id)

async def handle_limits_exceeded_for_upload(message, user_id: int, upload_type: str):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        upload_type: –¢–∏–ø –∑–∞–≥—Ä—É–∑–∫–∏ ("document" –∏–ª–∏ "image")
    """
    await NotificationSystem._show_limits_exceeded_notification(
        message, user_id, upload_type
    )

async def increment_message_counter_for_upsell(user_id: int):
    """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è upsell (–µ—Å–ª–∏ –Ω–µ—Ç GPT-4o –ª–∏–º–∏—Ç–æ–≤)"""
    try:
        has_gpt4o_limits = await check_gpt4o_limit(user_id)
        if not has_gpt4o_limits:
            upsell_tracker.increment_message_count(user_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ upsell –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

async def should_show_upsell_for_message(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å upsell –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        has_gpt4o_limits = await check_gpt4o_limit(user_id)
        if not has_gpt4o_limits:
            return upsell_tracker.should_show_upsell(user_id)
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ upsell –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False