# garmin_analyzer.py - AI –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–¥–æ—Ä–æ–≤—å—è –æ—Ç Garmin

import logging
import json
from datetime import datetime, date, timedelta
from typing import Dict, Optional, List, Any

from garmin_connector import garmin_connector
from db_postgresql import get_db_connection, release_db_connection, get_user_language
from gpt import ask_doctor_gemini
from save_utils import format_user_profile

logger = logging.getLogger(__name__)

# ================================
# –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê
# ================================

class GarminAnalyzer:
    """–ö–ª–∞—Å—Å –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–¥–æ—Ä–æ–≤—å—è –æ—Ç Garmin"""
    
    def __init__(self):
        pass
    
    async def create_health_analysis(self, user_id: int, daily_data: Dict) -> Optional[Dict]:
        """–°–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–¥–æ—Ä–æ–≤—å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö Garmin"""
        try:
            logger.info(f"üß† –ù–∞—á–∏–Ω–∞—é AI –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            lang = await get_user_language(user_id)
            
            # –®–∞–≥ 1: –°–æ–±–∏—Ä–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é
            historical_data = await self._get_historical_data(user_id, days=7)
            
            # –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_profile = await self._get_user_medical_profile(user_id)
            
            # –®–∞–≥ 3: –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            analysis_context = await self._prepare_analysis_context(
                daily_data, historical_data, user_profile, lang
            )
            
            # –®–∞–≥ 4: –°–æ–∑–¥–∞–µ–º AI –∞–Ω–∞–ª–∏–∑ —Å –ø–æ–º–æ—â—å—é GPT-5
            ai_response = await self._generate_ai_analysis(analysis_context, lang)
            
            if not ai_response:
                logger.error(f"‚ùå AI –Ω–µ —Å–º–æ–≥ —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –¥–ª—è {user_id}")
                return None
            
            # –®–∞–≥ 5: –ü–∞—Ä—Å–∏–º –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            analysis_result = await self._parse_ai_response(ai_response, daily_data)
            
            # –®–∞–≥ 6: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –ë–î
            saved = await self._save_analysis_to_db(user_id, analysis_result)
            
            if saved:
                logger.info(f"‚úÖ AI –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
                return analysis_result
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –¥–ª—è {user_id}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {user_id}: {e}")
            return None

    async def _get_historical_data(self, user_id: int, days: int = 7) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ò–°–ö–õ–Æ–ß–ê–Ø –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1 –¥–µ–Ω—å
       
       
        """
        try:
            conn = await get_db_connection()
            
           
            end_date = date.today() - timedelta(days=1)      
            start_date = date.today() - timedelta(days=days)  
            
            rows = await conn.fetch("""
                SELECT * FROM garmin_daily_data 
                WHERE user_id = $1 
                AND data_date >= $2
                AND data_date <= $3
                ORDER BY data_date DESC
            """, user_id, start_date, end_date)
            
            await release_db_connection(conn)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
            historical_data = []
            for row in rows:
                row_dict = dict(row)
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ –°–¢–†–û–ö–£ (–¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã –æ–∂–∏–¥–∞—é—Ç —Å—Ç—Ä–æ–∫—É)
                if isinstance(row_dict['data_date'], date):
                    row_dict['data_date'] = row_dict['data_date'].strftime('%Y-%m-%d')
                historical_data.append(row_dict)
            
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(historical_data)} –¥–Ω–µ–π –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
            return historical_data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            if 'conn' in locals():
                await release_db_connection(conn)
            return []

    async def _get_user_medical_profile(self, user_id: int) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            profile_text = await format_user_profile(user_id)
            
            # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncpg –ø–æ–¥—Ö–æ–¥
            conn = await get_db_connection()
            
            result = await conn.fetchrow("""
                SELECT medications FROM users WHERE user_id = $1
            """, user_id)
            
            await release_db_connection(conn)
            
            medications = result['medications'] if result and result['medications'] else "–ù–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ª–µ–∫–∞—Ä—Å—Ç–≤–∞"
            
            return {
                'profile_text': profile_text,
                'medications': medications
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            if 'conn' in locals():
                await release_db_connection(conn)
            return {'profile_text': '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω', 'medications': '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}
        
    async def _get_last_analysis(self, user_id: int) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        try:
            conn = await get_db_connection()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–Ω–∞–ª–∏–∑ (–Ω–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π)
            last_analysis = await conn.fetchrow("""
                SELECT analysis_date, analysis_text, recommendations
                FROM garmin_analysis_history
                WHERE user_id = $1 
                AND analysis_date < CURRENT_DATE
                ORDER BY analysis_date DESC
                LIMIT 1
            """, user_id)
            
            await release_db_connection(conn)
            
            if not last_analysis:
                return None
                
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
            date_str = last_analysis['analysis_date'].strftime('%Y-%m-%d')
            text = last_analysis['analysis_text']
            
            # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –û–ë–†–ï–ó–ö–ò: –ø–µ—Ä–≤—ã–µ 1000 + –ø–æ—Å–ª–µ–¥–Ω–∏–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
            if len(text) > 1500:
                # –ë–µ—Ä–µ–º –Ω–∞—á–∞–ª–æ (–æ–±—â–∞—è –æ—Ü–µ–Ω–∫–∞, –∫–ª—é—á–µ–≤—ã–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è)
                beginning = text[:1000]
                
                # –ë–µ—Ä–µ–º –∫–æ–Ω–µ—Ü (—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏)
                ending = text[-500:]
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º
                text = f"{beginning}\n\n[...]\n\n{ending}"
            
            formatted = f"""üìÖ –î–∞—Ç–∞: {date_str}

    {text}"""
            
            return formatted
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return None

    async def _prepare_analysis_context(self, daily_data: Dict, historical_data: List[Dict], 
                                  user_profile: Dict, lang: str) -> Dict:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞"""
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
        current_day_summary = self._format_current_day_data(daily_data)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ü–û–î–†–û–ë–ù–û (–¥–µ–Ω—å –∑–∞ –¥–Ω–µ–º)
        historical_summary = self._format_historical_data(historical_data)
        
        # –ù–û–í–û–ï: –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–Ω–∞–ª–∏–∑
        user_id = daily_data.get('user_id')
        last_analysis = await self._get_last_analysis(user_id) if user_id else None
        
        return {
            'language': lang,
            'analysis_date': daily_data.get('data_date', date.today() - timedelta(days=1)),
            'user_profile': user_profile,
            'current_day': current_day_summary,
            'historical_data': historical_summary,
            'last_analysis': last_analysis  # –ù–û–í–û–ï –ü–û–õ–ï
        }

    def _calculate_trends(self, current: Dict, historical: List[Dict]) -> Dict:
        """–í—ã—á–∏—Å–ª–∏—Ç—å —Ç—Ä–µ–Ω–¥—ã –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∑–¥–æ—Ä–æ–≤—å—è"""
        trends = {}
        
        try:
            if len(historical) < 2:
                return {
                    'sleep_trend': 'insufficient_data',
                    'activity_trend': 'insufficient_data', 
                    'stress_trend': 'insufficient_data',
                    'recovery_trend': 'insufficient_data'
                }
            
            # –¢—Ä–µ–Ω–¥ —Å–Ω–∞ (—Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ 3)
            recent_sleep = []
            older_sleep = []
            
            for i, day in enumerate(historical):
                if day.get('sleep_duration_minutes'):
                    if i < 3:
                        recent_sleep.append(day['sleep_duration_minutes'])
                    elif i < 6:
                        older_sleep.append(day['sleep_duration_minutes'])
            
            if recent_sleep and older_sleep:
                recent_avg = sum(recent_sleep) / len(recent_sleep)
                older_avg = sum(older_sleep) / len(older_sleep)
                
                if recent_avg > older_avg + 30:  # –ë–æ–ª—å—à–µ –Ω–∞ 30 –º–∏–Ω—É—Ç
                    trends['sleep_trend'] = 'improving'
                elif recent_avg < older_avg - 30:
                    trends['sleep_trend'] = 'declining'
                else:
                    trends['sleep_trend'] = 'stable'
            
            # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
            trends.update(self._calculate_activity_trend(historical))
            trends.update(self._calculate_stress_trend(historical))
            trends.update(self._calculate_recovery_trend(historical))
            
            return trends
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
            return {'sleep_trend': 'unknown', 'activity_trend': 'unknown', 
                   'stress_trend': 'unknown', 'recovery_trend': 'unknown'}

    def _calculate_activity_trend(self, historical: List[Dict]) -> Dict:
        """–í—ã—á–∏—Å–ª–∏—Ç—å —Ç—Ä–µ–Ω–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        recent_steps = []
        older_steps = []
        
        for i, day in enumerate(historical):
            if day.get('steps'):
                if i < 3:
                    recent_steps.append(day['steps'])
                elif i < 6:
                    older_steps.append(day['steps'])
        
        if recent_steps and older_steps:
            recent_avg = sum(recent_steps) / len(recent_steps)
            older_avg = sum(older_steps) / len(older_steps)
            
            if recent_avg > older_avg * 1.1:  # –ë–æ–ª—å—à–µ –Ω–∞ 10%
                return {'activity_trend': 'improving'}
            elif recent_avg < older_avg * 0.9:
                return {'activity_trend': 'declining'}
            else:
                return {'activity_trend': 'stable'}
        
        return {'activity_trend': 'insufficient_data'}

    def _calculate_stress_trend(self, historical: List[Dict]) -> Dict:
        """–í—ã—á–∏—Å–ª–∏—Ç—å —Ç—Ä–µ–Ω–¥ —Å—Ç—Ä–µ—Å—Å–∞"""
        recent_stress = []
        older_stress = []
        
        for i, day in enumerate(historical):
            if day.get('stress_avg'):
                if i < 3:
                    recent_stress.append(day['stress_avg'])
                elif i < 6:
                    older_stress.append(day['stress_avg'])
        
        if recent_stress and older_stress:
            recent_avg = sum(recent_stress) / len(recent_stress)
            older_avg = sum(older_stress) / len(older_stress)
            
            if recent_avg < older_avg - 10:  # –°—Ç—Ä–µ—Å—Å —Å–Ω–∏–∑–∏–ª—Å—è
                return {'stress_trend': 'improving'}
            elif recent_avg > older_avg + 10:
                return {'stress_trend': 'declining'}
            else:
                return {'stress_trend': 'stable'}
        
        return {'stress_trend': 'insufficient_data'}

    def _calculate_recovery_trend(self, historical: List[Dict]) -> Dict:
        """–í—ã—á–∏—Å–ª–∏—Ç—å —Ç—Ä–µ–Ω–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (Body Battery)"""
        recent_recovery = []
        older_recovery = []
        
        for i, day in enumerate(historical):
            if day.get('body_battery_max'):
                if i < 3:
                    recent_recovery.append(day['body_battery_max'])
                elif i < 6:
                    older_recovery.append(day['body_battery_max'])
        
        if recent_recovery and older_recovery:
            recent_avg = sum(recent_recovery) / len(recent_recovery)
            older_avg = sum(older_recovery) / len(older_recovery)
            
            if recent_avg > older_avg + 5:  # Body Battery —É–ª—É—á—à–∞–µ—Ç—Å—è
                return {'recovery_trend': 'improving'}
            elif recent_avg < older_avg - 5:
                return {'recovery_trend': 'declining'}
            else:
                return {'recovery_trend': 'stable'}
        
        return {'recovery_trend': 'insufficient_data'}

    def _format_current_day_data(self, daily_data: Dict) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –¥–ª—è AI –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
        
        –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê:
        - –ü–µ—Ä–µ–¥–∞—ë–º –í–°–ï –Ω–µ–ø—É—Å—Ç—ã–µ –ø–æ–ª—è (–Ω–µ null)
        - –ò—Å–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è (id, user_id, sync_timestamp, idx)
        - –§–æ—Ä–º–∞—Ç: —á–∏—Å—Ç—ã–π JSON –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ AI
        """
        try:
            # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω—É–∂–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            exclude_fields = {
                'id', 'idx', 'user_id', 'sync_timestamp', 
                'data_quality', 'activities_data'  # JSON –ø–æ–ª—è –∏—Å–∫–ª—é—á–∞–µ–º
            }
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º: —É–±–∏—Ä–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è –∏ null –∑–Ω–∞—á–µ–Ω–∏—è
            filtered_data = {}
            for key, value in daily_data.items():
                if key not in exclude_fields and value is not None:
                    filtered_data[key] = value
            
            if not filtered_data:
                return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ –∫—Ä–∞—Å–∏–≤—ã–π JSON
            json_str = json.dumps(filtered_data, ensure_ascii=False, indent=2)
            
            return f"```json\n{json_str}\n```"
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è: {e}")
            return "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"

    def _format_historical_data(self, historical: List[Dict]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è AI –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
        
        –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê:
        - –ü–µ—Ä–µ–¥–∞—ë–º –∏—Å—Ç–æ—Ä–∏—é –î–ï–ù–¨ –ó–ê –î–ù–Å–ú –≤ –≤–∏–¥–µ –º–∞—Å—Å–∏–≤–∞ JSON –æ–±—ä–µ–∫—Ç–æ–≤
        - –ö–∞–∂–¥—ã–π –¥–µ–Ω—å —Å–æ–¥–µ—Ä–∂–∏—Ç –í–°–ï –Ω–µ–ø—É—Å—Ç—ã–µ –ø–æ–ª—è
        - –ò—Å–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è
        - –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç —Å—Ç–∞—Ä—ã—Ö –¥–∞—Ç –∫ –Ω–æ–≤—ã–º (—Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫)
        """
        try:
            if not historical:
                return "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç"
            
            # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω—É–∂–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            exclude_fields = {
                'id', 'idx', 'user_id', 'sync_timestamp',
                'data_quality', 'activities_data'
            }
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º (–¥–ª—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏)
            sorted_history = sorted(
                historical, 
                key=lambda x: x.get('data_date', '1970-01-01')
            )
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
            filtered_days = []
            for day in sorted_history:
                filtered_day = {}
                for key, value in day.items():
                    if key not in exclude_fields and value is not None:
                        filtered_day[key] = value
                
                if filtered_day:  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
                    filtered_days.append(filtered_day)
            
            if not filtered_days:
                return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ –∫—Ä–∞—Å–∏–≤—ã–π JSON –º–∞—Å—Å–∏–≤
            json_str = json.dumps(filtered_days, ensure_ascii=False, indent=2)
            
            return f"```json\n{json_str}\n```"
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"

    def _assess_data_quality(self, daily_data: Dict, historical: List[Dict]) -> str:
        """–û—Ü–µ–Ω–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö"""
        quality_scores = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
        if daily_data.get('sleep_duration_minutes'):
            quality_scores.append(1)
        if daily_data.get('steps'):
            quality_scores.append(1) 
        if daily_data.get('resting_heart_rate'):
            quality_scores.append(1)
        if daily_data.get('stress_avg'):
            quality_scores.append(1)
        if daily_data.get('body_battery_max'):
            quality_scores.append(1)
        
        quality_percent = (sum(quality_scores) / 5) * 100
        
        if quality_percent >= 80:
            return "excellent"
        elif quality_percent >= 60:
            return "good"
        elif quality_percent >= 40:
            return "fair"
        else:
            return "poor"

    async def _generate_ai_analysis(self, context: Dict, lang: str) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å AI –∞–Ω–∞–ª–∏–∑ —Å –ø–æ–º–æ—â—å—é GPT-5"""
        try:
            system_prompt = self._build_system_prompt(lang)
            user_prompt = self._build_user_prompt(context)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é ask_doctor_gemini (GPT-5) –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            ai_response = await ask_doctor_gemini(
                system_prompt=system_prompt,
                full_prompt=user_prompt,
                lang=lang
            )
            
            return ai_response
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return None

    def _build_system_prompt(self, lang: str) -> str:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å system prompt –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        
        # –Ø–∑—ã–∫–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        lang_instructions = {
            'ru': '–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.',
            'uk': '–ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–õ–ò–í–û: –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –¢–Ü–õ–¨–ö–ò —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.',
            'en': 'CRITICAL: Respond ONLY in English.',
            'de': 'KRITISCH WICHTIG: Antworten Sie NUR auf Deutsch.'
        }
        
        lang_instruction = lang_instructions.get(lang, lang_instructions['ru'])
        
        return f"""{lang_instruction}

    –¢—ã –æ–ø—ã—Ç–Ω—ã–π –≤—Ä–∞—á-—Ç–µ—Ä–∞–ø–µ–≤—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–µ–¥–µ—Ç –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞–º–∏ —á–µ—Ä–µ–∑ –¥–∞–Ω–Ω—ã–µ —Å —É–º–Ω—ã—Ö —á–∞—Å–æ–≤.

    üéØ –¢–í–û–Ø –†–û–õ–¨:
    ‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å –¥–∞–Ω–Ω—ã–µ –∑–¥–æ—Ä–æ–≤—å—è (—Å–æ–Ω, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, —Å—Ç—Ä–µ—Å—Å, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ)
    ‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—à—å –¥–∏–Ω–∞–º–∏–∫—É –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –¥–µ–Ω—å –∑–∞ –¥–Ω–µ–º
    ‚Ä¢ –î–∞–µ—à—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å –º–æ—Ç–∏–≤–∞—Ü–∏—é –ø–∞—Ü–∏–µ–Ω—Ç–∞

    ‚ö†Ô∏è –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ü–†–ò–ù–¶–ò–ü–´:
    ‚Ä¢ –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ú–ê–ö–°–ò–ú–£–ú 3000 —Å–∏–º–≤–æ–ª–æ–≤ (–≤–∫–ª—é—á–∞—è —ç–º–æ–¥–∑–∏)
    ‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ö–û–ú–ü–õ–ï–ö–°–ù–û - –∏—â–∏ —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Å–Ω–æ–º, —Å—Ç—Ä–µ—Å—Å–æ–º, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
    ‚Ä¢ –£—á–∏—Ç—ã–≤–∞–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
    ‚Ä¢ –°—Ä–∞–≤–Ω–∏–≤–∞–π —Å –Ω–æ—Ä–º–∞–º–∏ –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏ –ø–æ–ª–∞
    ‚Ä¢ –ë—É–¥—å –ö–û–ù–ö–†–ï–¢–ù–´–ú: –Ω–µ "–±–æ–ª—å—à–µ —Å–ø–∞—Ç—å", –∞ "–ª–æ–∂–∏—Ç—å—Å—è –≤ 22:30"
    ‚Ä¢ –•–í–ê–õ–ò –ø—Ä–æ–≥—Ä–µ—Å—Å - —ç—Ç–æ –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞
    ‚Ä¢ –ü—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è—Ö –æ—Ç –Ω–æ—Ä–º—ã - —Ä–µ–∫–æ–º–µ–Ω–¥—É–π –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É

    üìã –°–¢–†–£–ö–¢–£–†–ê –¢–í–û–ï–ì–û –û–¢–í–ï–¢–ê:
    1. –û—Ü–µ–Ω–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π (–µ—Å–ª–∏ –±—ã–ª–∏) - 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    2. –î–∏–Ω–∞–º–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é - –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã - 3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    3. –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è - —á—Ç–æ —Ö–æ—Ä–æ—à–æ, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è - 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    4. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é - 4-5 –ø—É–Ω–∫—Ç–æ–≤

    üí° –°–¢–ò–õ–¨ –û–ë–©–ï–ù–ò–Ø:
    –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π. –ö–∞–∫ –≤—Ä–∞—á, –∫–æ—Ç–æ—Ä—ã–π –∑–Ω–∞–µ—Ç —Å–≤–æ–µ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏ –∏—Å–∫—Ä–µ–Ω–Ω–µ –∑–∞–±–æ—Ç–∏—Ç—Å—è –æ –µ–≥–æ –∑–¥–æ—Ä–æ–≤—å–µ."""

    def _build_user_prompt(self, context: Dict) -> str:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å user prompt —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–ù–û–í–ê–Ø –í–ï–†–°–ò–Ø)"""
        
        analysis_date = context['analysis_date']
        if isinstance(analysis_date, date):
            date_str = analysis_date.strftime('%Y-%m-%d')
        else:
            date_str = str(analysis_date)
        
        # –ë–∞–∑–æ–≤—ã–µ –±–ª–æ–∫–∏
        prompt_parts = [
            "–ú–ï–î–ò–¶–ò–ù–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• –ó–î–û–†–û–í–¨–Ø",
            f"\nüìÖ –î–ê–¢–ê –ê–ù–ê–õ–ò–ó–ê: {date_str}",
            f"\nüë§ –ú–ï–î–ò–¶–ò–ù–°–ö–ò–ô –ü–†–û–§–ò–õ–¨ –ü–ê–¶–ò–ï–ù–¢–ê:\n{context['user_profile']['profile_text']}",
            f"\nüíä –ü–†–ò–ù–ò–ú–ê–ï–ú–´–ï –õ–ï–ö–ê–†–°–¢–í–ê:\n{context['user_profile']['medications']}",
            f"\nüìä –î–ê–ù–ù–´–ï –ó–ê –¢–ï–ö–£–©–ò–ô –î–ï–ù–¨:\n{context['current_day']}",
            f"\nüìà –î–ê–ù–ù–´–ï –ó–ê –ü–†–ï–î–´–î–£–©–ò–ï 7 –î–ù–ï–ô:\n{context['historical_data']}"
        ]
        
        # –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ –µ—Å—Ç—å
        if context.get('last_analysis'):
            prompt_parts.append(f"\nüìã –ü–†–ï–î–´–î–£–©–ò–ô –ê–ù–ê–õ–ò–ó –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n{context['last_analysis']}")
        
        # –ó–∞–¥–∞–Ω–∏–µ –¥–ª—è AI
        if context.get('last_analysis'):
            task = """
    –ó–ê–î–ê–ù–ò–ï:
    –¢—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ—à—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–º. 

    1. –ü–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ –ü–†–ï–î–´–î–£–©–ò–ô –ê–ù–ê–õ–ò–ó - –∫–∞–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ç—ã –¥–∞–≤–∞–ª
    2. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –î–ê–ù–ù–´–ï –ó–ê 7 –î–ù–ï–ô - –∫–∞–∫ –º–µ–Ω—è–ª–∏—Å—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏, –µ—Å—Ç—å –ª–∏ —Ç—Ä–µ–Ω–¥—ã
    3. –û—Ü–µ–Ω–∏ –¢–ï–ö–£–©–ò–ô –î–ï–ù–¨ - –≤—ã–ø–æ–ª–Ω–∏–ª –ª–∏ –ø–∞—Ü–∏–µ–Ω—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, —É–ª—É—á—à–∏–ª–∏—Å—å –ª–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    4. –î–∞–π –ù–û–í–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò —Å —É—á–µ—Ç–æ–º –¥–∏–Ω–∞–º–∏–∫–∏

    –í–ê–ñ–ù–û: 
    - –û—Ç–º–µ—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ/–Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    - –ü–æ—Ö–≤–∞–ª–∏ –∑–∞ —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
    - –ï—Å–ª–∏ —Ç—Ä–µ–Ω–¥ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π - –º—è–≥–∫–æ —É–∫–∞–∂–∏ –Ω–∞ —ç—Ç–æ –∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    - –£—á–∏—Ç—ã–≤–∞–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞

    –û—Ç–≤–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π —Å —ç–º–æ–¥–∑–∏, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ."""
        else:
            task = """
    –ó–ê–î–ê–ù–ò–ï:
    –≠—Ç–æ –ø–µ—Ä–≤—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞.

    1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –∑–∞ 7 –¥–Ω–µ–π - –≤—ã—è–≤–∏ —Ç—Ä–µ–Ω–¥—ã –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    2. –û—Ü–µ–Ω–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è
    3. –î–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è

    –û—Ç–≤–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π —Å —ç–º–æ–¥–∑–∏, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ."""
        
        prompt_parts.append(task)
        
        return "\n".join(prompt_parts)

    async def _parse_ai_response(self, ai_response: str, daily_data: Dict) -> Dict:
        """–ü–∞—Ä—Å–∏—Ç—å –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI"""
        try:
            # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–ª –∑–¥–æ—Ä–æ–≤—å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
            health_score = self._calculate_health_score(daily_data)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç—Ä–µ–Ω–¥—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö (–±–∞–∑–æ–≤–∞—è –ª–æ–≥–∏–∫–∞)
            trends = self._extract_basic_trends(daily_data)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            analysis_result = {
                'analysis_date': daily_data.get('data_date', date.today() - timedelta(days=1)),
                'analysis_text': ai_response,
                'health_score': health_score,
                'recommendations': self._extract_recommendations(ai_response),
                'sleep_trend': trends.get('sleep_trend', 'stable'),
                'activity_trend': trends.get('activity_trend', 'stable'),
                'stress_trend': trends.get('stress_trend', 'stable'),
                'recovery_trend': trends.get('recovery_trend', 'stable'),
                'gpt_model_used': 'gpt-5-chat-latest',
                'created_at': datetime.now()
            }
            
            return analysis_result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ AI –æ—Ç–≤–µ—Ç–∞: {e}")
            return {
                'analysis_date': daily_data.get('data_date', date.today() - timedelta(days=1)),
                'analysis_text': ai_response,
                'health_score': 50.0,
                'recommendations': "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∑–¥–æ—Ä–æ–≤—å–µ–º",
                'created_at': datetime.now()
            }

    def _calculate_health_score(self, daily_data: Dict) -> float:
        """–í—ã—á–∏—Å–ª–∏—Ç—å –æ–±—â–∏–π –±–∞–ª–ª –∑–¥–æ—Ä–æ–≤—å—è (0-100)"""
        try:
            score_components = []
            
            # –°–æ–Ω (30% –æ—Ç –æ–±—â–µ–≥–æ –±–∞–ª–ª–∞)
            if daily_data.get('sleep_duration_minutes'):
                sleep_hours = daily_data['sleep_duration_minutes'] / 60
                if 7 <= sleep_hours <= 9:
                    sleep_score = 100
                elif 6 <= sleep_hours <= 10:
                    sleep_score = 80
                elif 5 <= sleep_hours <= 11:
                    sleep_score = 60
                else:
                    sleep_score = 40
                score_components.append(sleep_score * 0.3)
            
            # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (25% –æ—Ç –æ–±—â–µ–≥–æ –±–∞–ª–ª–∞)
            if daily_data.get('steps'):
                steps = daily_data['steps']
                if steps >= 10000:
                    activity_score = 100
                elif steps >= 7500:
                    activity_score = 80
                elif steps >= 5000:
                    activity_score = 60
                else:
                    activity_score = 40
                score_components.append(activity_score * 0.25)
            
            # –°—Ç—Ä–µ—Å—Å (20% –æ—Ç –æ–±—â–µ–≥–æ –±–∞–ª–ª–∞)
            if daily_data.get('stress_avg'):
                stress = daily_data['stress_avg']
                if stress <= 25:
                    stress_score = 100
                elif stress <= 50:
                    stress_score = 80
                elif stress <= 75:
                    stress_score = 60
                else:
                    stress_score = 40
                score_components.append(stress_score * 0.2)
            
            # Body Battery (15% –æ—Ç –æ–±—â–µ–≥–æ –±–∞–ª–ª–∞)
            if daily_data.get('body_battery_max'):
                battery = daily_data['body_battery_max']
                if battery >= 80:
                    battery_score = 100
                elif battery >= 60:
                    battery_score = 80
                elif battery >= 40:
                    battery_score = 60
                else:
                    battery_score = 40
                score_components.append(battery_score * 0.15)
            
            # –ü—É–ª—å—Å –ø–æ–∫–æ—è (10% –æ—Ç –æ–±—â–µ–≥–æ –±–∞–ª–ª–∞)
            if daily_data.get('resting_heart_rate'):
                rhr = daily_data['resting_heart_rate']
                if 50 <= rhr <= 70:
                    rhr_score = 100
                elif 40 <= rhr <= 80:
                    rhr_score = 80
                elif 35 <= rhr <= 90:
                    rhr_score = 60
                else:
                    rhr_score = 40
                score_components.append(rhr_score * 0.1)
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª
            if not score_components:
                return 50.0
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            total_weight = sum([0.3, 0.25, 0.2, 0.15, 0.1][:len(score_components)])
            final_score = sum(score_components) / total_weight * 100
            
            return round(min(max(final_score, 0), 100), 1)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –±–∞–ª–ª–∞ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
            return 50.0

    def _extract_basic_trends(self, daily_data: Dict) -> Dict:
        """–ò–∑–≤–ª–µ—á—å –±–∞–∑–æ–≤—ã–µ —Ç—Ä–µ–Ω–¥—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö"""
        # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–Ω–¥—ã –≤—ã—á–∏—Å–ª—è—é—Ç—Å—è –≤ _calculate_trends
        return {
            'sleep_trend': 'stable',
            'activity_trend': 'stable', 
            'stress_trend': 'stable',
            'recovery_trend': 'stable'
        }

    def _extract_recommendations(self, ai_response: str) -> str:
        """–ò–∑–≤–ª–µ—á—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ AI"""
        # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ - –∏—â–µ–º —Å–µ–∫—Ü–∏—é —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        try:
            lines = ai_response.split('\n')
            recommendations = []
            
            in_recommendations_section = False
            for line in lines:
                line = line.strip()
                
                # –ò—â–µ–º —Å–µ–∫—Ü–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
                if any(keyword in line.lower() for keyword in ['—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü', '—Å–æ–≤–µ—Ç—ã', '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω', 'recommendation']):
                    in_recommendations_section = True
                    continue
                
                if in_recommendations_section:
                    # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –µ—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π —Å–µ–∫—Ü–∏–∏
                    if line.startswith('##') or line.startswith('**') or line.startswith('---'):
                        break
                    
                    if line and not line.startswith('#'):
                        recommendations.append(line)
            
            if recommendations:
                return '\n'.join(recommendations[:5])  # –ú–∞–∫—Å–∏–º—É–º 5 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            else:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–µ–∫—Ü–∏—é, –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
                return '\n'.join([line for line in lines[-5:] if line.strip()])
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
            return "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∑–¥–æ—Ä–æ–≤—å–µ–º!"

    async def _save_analysis_to_db(self, user_id: int, analysis_result: Dict) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncpg –ø–æ–¥—Ö–æ–¥
            conn = await get_db_connection()
            
            await conn.execute("""
                INSERT INTO garmin_analysis_history 
                (user_id, analysis_date, analysis_text, health_score, 
                recommendations, sleep_trend, activity_trend, stress_trend, 
                recovery_trend, gpt_model_used)
                VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
                ON CONFLICT (user_id, analysis_date)
                DO UPDATE SET 
                    analysis_text = EXCLUDED.analysis_text,
                    health_score = EXCLUDED.health_score,
                    recommendations = EXCLUDED.recommendations,
                    sleep_trend = EXCLUDED.sleep_trend,
                    activity_trend = EXCLUDED.activity_trend,
                    stress_trend = EXCLUDED.stress_trend,
                    recovery_trend = EXCLUDED.recovery_trend,
                    gpt_model_used = EXCLUDED.gpt_model_used
            """, 
            user_id,
            analysis_result['analysis_date'],
            analysis_result['analysis_text'],
            analysis_result['health_score'],
            analysis_result.get('recommendations', ''),
            analysis_result.get('sleep_trend', 'stable'),
            analysis_result.get('activity_trend', 'stable'),
            analysis_result.get('stress_trend', 'stable'),
            analysis_result.get('recovery_trend', 'stable'),
            analysis_result.get('gpt_model_used', 'gpt-4o'))
            
            await release_db_connection(conn)
            
            logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –≤ –ë–î: {e}")
            if 'conn' in locals():
                await release_db_connection(conn)
            return False

    async def get_analysis_history(self, user_id: int, days: int = 7) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∞–Ω–∞–ª–∏–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = await get_db_connection()
            cursor = conn
            
            cursor.execute("""
                SELECT * FROM garmin_analysis_history
                WHERE user_id = %s
                ORDER BY analysis_date DESC
                LIMIT %s
            """, (user_id, days))
            
            rows = cursor.fetchall()
            conn.close()
            await release_db_connection(conn)
            
            return [dict(row) for row in rows]
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–æ–≤: {e}")
            return []

# ================================
# –ì–õ–û–ë–ê–õ–¨–ù–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–†
# ================================

garmin_analyzer = GarminAnalyzer()