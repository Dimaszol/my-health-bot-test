# garmin_analyzer.py - AI –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–¥–æ—Ä–æ–≤—å—è –æ—Ç Garmin

import logging
import json
from datetime import datetime, date, timedelta
from typing import Dict, Optional, List, Any

from garmin_connector import garmin_connector
from db_postgresql import get_db_connection, release_db_connection, get_user_language
from gpt import ask_doctor_gemini
from save_utils import format_user_profile

logger = logging.getLogger(__name__)

# ================================
# –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê
# ================================

class GarminAnalyzer:
    """–ö–ª–∞—Å—Å –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–¥–æ—Ä–æ–≤—å—è –æ—Ç Garmin"""
    
    def __init__(self):
        pass
    
    async def create_health_analysis(self, user_id: int, daily_data: Dict) -> Optional[Dict]:
        """–°–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–¥–æ—Ä–æ–≤—å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö Garmin"""
        try:
            logger.info(f"üß† –ù–∞—á–∏–Ω–∞—é AI –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            lang = await get_user_language(user_id)
            
            # –®–∞–≥ 1: –°–æ–±–∏—Ä–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é
            historical_data = await self._get_historical_data(user_id, days=7)
            
            # –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_profile = await self._get_user_medical_profile(user_id)
            
            # –®–∞–≥ 3: –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            analysis_context = await self._prepare_analysis_context(
                daily_data, historical_data, user_profile, lang
            )
            
            # –®–∞–≥ 4: –°–æ–∑–¥–∞–µ–º AI –∞–Ω–∞–ª–∏–∑ —Å –ø–æ–º–æ—â—å—é GPT-5
            ai_response = await self._generate_ai_analysis(analysis_context, lang)
            
            if not ai_response:
                logger.error(f"‚ùå AI –Ω–µ —Å–º–æ–≥ —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –¥–ª—è {user_id}")
                return None
            
            # –®–∞–≥ 5: –ü–∞—Ä—Å–∏–º –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            analysis_result = await self._parse_ai_response(ai_response, daily_data)
            
            # –®–∞–≥ 6: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –ë–î
            saved = await self._save_analysis_to_db(user_id, analysis_result)
            
            if saved:
                logger.info(f"‚úÖ AI –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
                return analysis_result
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –¥–ª—è {user_id}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {user_id}: {e}")
            return None

    async def _get_historical_data(self, user_id: int, days: int = 7) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π"""
        try:
            conn = await get_db_connection()
            
            start_date = date.today() - timedelta(days=days)
            
            rows = await conn.fetch("""
                SELECT * FROM garmin_daily_data 
                WHERE user_id = $1 
                AND data_date >= $2
                ORDER BY data_date DESC
            """, user_id, start_date)
            
            await release_db_connection(conn)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
            historical_data = []
            for row in rows:
                row_dict = dict(row)
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è JSON
                row_dict['data_date'] = row_dict['data_date'].strftime('%Y-%m-%d')
                historical_data.append(row_dict)
            
            return historical_data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            if 'conn' in locals():
                await release_db_connection(conn)
            return []

    async def _get_user_medical_profile(self, user_id: int) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            profile_text = await format_user_profile(user_id)
            
            # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncpg –ø–æ–¥—Ö–æ–¥
            conn = await get_db_connection()
            
            result = await conn.fetchrow("""
                SELECT medications FROM users WHERE user_id = $1
            """, user_id)
            
            await release_db_connection(conn)
            
            medications = result['medications'] if result and result['medications'] else "–ù–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ª–µ–∫–∞—Ä—Å—Ç–≤–∞"
            
            return {
                'profile_text': profile_text,
                'medications': medications
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            if 'conn' in locals():
                await release_db_connection(conn)
            return {'profile_text': '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω', 'medications': '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}

    async def _prepare_analysis_context(self, daily_data: Dict, historical_data: List[Dict], 
                                      user_profile: Dict, lang: str) -> Dict:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞"""
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥—ã
        trends = self._calculate_trends(daily_data, historical_data)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
        current_day_summary = self._format_current_day_data(daily_data)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        historical_summary = self._format_historical_data(historical_data)
        
        return {
            'language': lang,
            'analysis_date': daily_data.get('data_date', date.today() - timedelta(days=1)),
            'user_profile': user_profile,
            'current_day': current_day_summary,
            'historical_data': historical_summary,
            'trends': trends,
            'data_quality': self._assess_data_quality(daily_data, historical_data)
        }

    def _calculate_trends(self, current: Dict, historical: List[Dict]) -> Dict:
        """–í—ã—á–∏—Å–ª–∏—Ç—å —Ç—Ä–µ–Ω–¥—ã –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∑–¥–æ—Ä–æ–≤—å—è"""
        trends = {}
        
        try:
            if len(historical) < 2:
                return {
                    'sleep_trend': 'insufficient_data',
                    'activity_trend': 'insufficient_data', 
                    'stress_trend': 'insufficient_data',
                    'recovery_trend': 'insufficient_data'
                }
            
            # –¢—Ä–µ–Ω–¥ —Å–Ω–∞ (—Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ 3)
            recent_sleep = []
            older_sleep = []
            
            for i, day in enumerate(historical):
                if day.get('sleep_duration_minutes'):
                    if i < 3:
                        recent_sleep.append(day['sleep_duration_minutes'])
                    elif i < 6:
                        older_sleep.append(day['sleep_duration_minutes'])
            
            if recent_sleep and older_sleep:
                recent_avg = sum(recent_sleep) / len(recent_sleep)
                older_avg = sum(older_sleep) / len(older_sleep)
                
                if recent_avg > older_avg + 30:  # –ë–æ–ª—å—à–µ –Ω–∞ 30 –º–∏–Ω—É—Ç
                    trends['sleep_trend'] = 'improving'
                elif recent_avg < older_avg - 30:
                    trends['sleep_trend'] = 'declining'
                else:
                    trends['sleep_trend'] = 'stable'
            
            # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
            trends.update(self._calculate_activity_trend(historical))
            trends.update(self._calculate_stress_trend(historical))
            trends.update(self._calculate_recovery_trend(historical))
            
            return trends
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
            return {'sleep_trend': 'unknown', 'activity_trend': 'unknown', 
                   'stress_trend': 'unknown', 'recovery_trend': 'unknown'}

    def _calculate_activity_trend(self, historical: List[Dict]) -> Dict:
        """–í—ã—á–∏—Å–ª–∏—Ç—å —Ç—Ä–µ–Ω–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        recent_steps = []
        older_steps = []
        
        for i, day in enumerate(historical):
            if day.get('steps'):
                if i < 3:
                    recent_steps.append(day['steps'])
                elif i < 6:
                    older_steps.append(day['steps'])
        
        if recent_steps and older_steps:
            recent_avg = sum(recent_steps) / len(recent_steps)
            older_avg = sum(older_steps) / len(older_steps)
            
            if recent_avg > older_avg * 1.1:  # –ë–æ–ª—å—à–µ –Ω–∞ 10%
                return {'activity_trend': 'improving'}
            elif recent_avg < older_avg * 0.9:
                return {'activity_trend': 'declining'}
            else:
                return {'activity_trend': 'stable'}
        
        return {'activity_trend': 'insufficient_data'}

    def _calculate_stress_trend(self, historical: List[Dict]) -> Dict:
        """–í—ã—á–∏—Å–ª–∏—Ç—å —Ç—Ä–µ–Ω–¥ —Å—Ç—Ä–µ—Å—Å–∞"""
        recent_stress = []
        older_stress = []
        
        for i, day in enumerate(historical):
            if day.get('stress_avg'):
                if i < 3:
                    recent_stress.append(day['stress_avg'])
                elif i < 6:
                    older_stress.append(day['stress_avg'])
        
        if recent_stress and older_stress:
            recent_avg = sum(recent_stress) / len(recent_stress)
            older_avg = sum(older_stress) / len(older_stress)
            
            if recent_avg < older_avg - 10:  # –°—Ç—Ä–µ—Å—Å —Å–Ω–∏–∑–∏–ª—Å—è
                return {'stress_trend': 'improving'}
            elif recent_avg > older_avg + 10:
                return {'stress_trend': 'declining'}
            else:
                return {'stress_trend': 'stable'}
        
        return {'stress_trend': 'insufficient_data'}

    def _calculate_recovery_trend(self, historical: List[Dict]) -> Dict:
        """–í—ã—á–∏—Å–ª–∏—Ç—å —Ç—Ä–µ–Ω–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (Body Battery)"""
        recent_recovery = []
        older_recovery = []
        
        for i, day in enumerate(historical):
            if day.get('body_battery_max'):
                if i < 3:
                    recent_recovery.append(day['body_battery_max'])
                elif i < 6:
                    older_recovery.append(day['body_battery_max'])
        
        if recent_recovery and older_recovery:
            recent_avg = sum(recent_recovery) / len(recent_recovery)
            older_avg = sum(older_recovery) / len(older_recovery)
            
            if recent_avg > older_avg + 5:  # Body Battery —É–ª—É—á—à–∞–µ—Ç—Å—è
                return {'recovery_trend': 'improving'}
            elif recent_avg < older_avg - 5:
                return {'recovery_trend': 'declining'}
            else:
                return {'recovery_trend': 'stable'}
        
        return {'recovery_trend': 'insufficient_data'}

    def _format_current_day_data(self, daily_data: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –¥–ª—è AI"""
        data_parts = []
        
        # –°–æ–Ω
        if daily_data.get('sleep_duration_minutes'):
            hours = daily_data['sleep_duration_minutes'] // 60
            minutes = daily_data['sleep_duration_minutes'] % 60
            data_parts.append(f"–°–æ–Ω: {hours}—á {minutes}–º–∏–Ω")
            
            if daily_data.get('sleep_deep_minutes'):
                deep_hours = daily_data['sleep_deep_minutes'] // 60
                deep_mins = daily_data['sleep_deep_minutes'] % 60
                data_parts.append(f"–ì–ª—É–±–æ–∫–∏–π —Å–æ–Ω: {deep_hours}—á {deep_mins}–º–∏–Ω")
        
        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        if daily_data.get('steps'):
            data_parts.append(f"–®–∞–≥–∏: {daily_data['steps']:,}")
        
        if daily_data.get('calories'):
            data_parts.append(f"–ö–∞–ª–æ—Ä–∏–∏: {daily_data['calories']}")
        
        # –ü—É–ª—å—Å
        if daily_data.get('resting_heart_rate'):
            data_parts.append(f"–ü—É–ª—å—Å –ø–æ–∫–æ—è: {daily_data['resting_heart_rate']} —É–¥/–º–∏–Ω")
        
        # –°—Ç—Ä–µ—Å—Å –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        if daily_data.get('stress_avg'):
            data_parts.append(f"–°—Ä–µ–¥–Ω–∏–π —Å—Ç—Ä–µ—Å—Å: {daily_data['stress_avg']}/100")
        
        if daily_data.get('body_battery_max') and daily_data.get('body_battery_min'):
            data_parts.append(f"Body Battery: {daily_data['body_battery_max']}% ‚Üí {daily_data['body_battery_min']}%")
        
        # SpO2 –∏ –¥—ã—Ö–∞–Ω–∏–µ
        if daily_data.get('spo2_avg'):
            data_parts.append(f"SpO2: {daily_data['spo2_avg']:.1f}%")
        
        if daily_data.get('respiration_avg'):
            data_parts.append(f"–î—ã—Ö–∞–Ω–∏–µ: {daily_data['respiration_avg']:.1f} –≤–¥–æ—Ö–æ–≤/–º–∏–Ω")
        
        # –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º
        if daily_data.get('training_readiness'):
            data_parts.append(f"–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º: {daily_data['training_readiness']}/100")
        
        return "; ".join(data_parts) if data_parts else "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"

    def _format_historical_data(self, historical: List[Dict]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è AI"""
        if not historical:
            return "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç"
        
        summary_parts = []
        
        # –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞ –Ω–µ–¥–µ–ª—é
        avg_sleep = self._calculate_average(historical, 'sleep_duration_minutes')
        if avg_sleep:
            hours = int(avg_sleep) // 60
            minutes = int(avg_sleep) % 60
            summary_parts.append(f"–°—Ä–µ–¥–Ω–∏–π —Å–æ–Ω –∑–∞ –Ω–µ–¥–µ–ª—é: {hours}—á {minutes}–º–∏–Ω")
        
        avg_steps = self._calculate_average(historical, 'steps')
        if avg_steps:
            summary_parts.append(f"–°—Ä–µ–¥–Ω–∏–µ —à–∞–≥–∏: {int(avg_steps):,}")
        
        avg_stress = self._calculate_average(historical, 'stress_avg')
        if avg_stress:
            summary_parts.append(f"–°—Ä–µ–¥–Ω–∏–π —Å—Ç—Ä–µ—Å—Å: {int(avg_stress)}/100")
        
        avg_rhr = self._calculate_average(historical, 'resting_heart_rate')
        if avg_rhr:
            summary_parts.append(f"–°—Ä–µ–¥–Ω–∏–π –ø—É–ª—å—Å –ø–æ–∫–æ—è: {int(avg_rhr)} —É–¥/–º–∏–Ω")
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏
        summary_parts.append(f"–î–∞–Ω–Ω—ã—Ö –∑–∞ {len(historical)} –¥–Ω–µ–π")
        
        return "; ".join(summary_parts)

    def _calculate_average(self, data: List[Dict], field: str) -> Optional[float]:
        """–í—ã—á–∏—Å–ª–∏—Ç—å —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è"""
        values = [item[field] for item in data if item.get(field) is not None]
        return sum(values) / len(values) if values else None

    def _assess_data_quality(self, daily_data: Dict, historical: List[Dict]) -> str:
        """–û—Ü–µ–Ω–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö"""
        quality_scores = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
        if daily_data.get('sleep_duration_minutes'):
            quality_scores.append(1)
        if daily_data.get('steps'):
            quality_scores.append(1) 
        if daily_data.get('resting_heart_rate'):
            quality_scores.append(1)
        if daily_data.get('stress_avg'):
            quality_scores.append(1)
        if daily_data.get('body_battery_max'):
            quality_scores.append(1)
        
        quality_percent = (sum(quality_scores) / 5) * 100
        
        if quality_percent >= 80:
            return "excellent"
        elif quality_percent >= 60:
            return "good"
        elif quality_percent >= 40:
            return "fair"
        else:
            return "poor"

    async def _generate_ai_analysis(self, context: Dict, lang: str) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å AI –∞–Ω–∞–ª–∏–∑ —Å –ø–æ–º–æ—â—å—é GPT-5"""
        try:
            system_prompt = self._build_system_prompt(lang)
            user_prompt = self._build_user_prompt(context)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é ask_doctor_gemini (GPT-5) –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            ai_response = await ask_doctor_gemini(
                system_prompt=system_prompt,
                full_prompt=user_prompt,
                lang=lang
            )
            
            return ai_response
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return None

    def _build_system_prompt(self, lang: str) -> str:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å system prompt –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞"""
        
        if lang == "ru":
            return """–¢—ã –æ–ø—ã—Ç–Ω—ã–π –≤—Ä–∞—á-—Ç–µ—Ä–∞–ø–µ–≤—Ç –∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –ø—Ä–µ–≤–µ–Ω—Ç–∏–≤–Ω–æ–π –º–µ–¥–∏—Ü–∏–Ω–µ. 
            
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –∑–¥–æ—Ä–æ–≤—å—è –æ—Ç —É–º–Ω—ã—Ö —á–∞—Å–æ–≤ –∏ –¥–∞–≤–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ü–†–ò–ù–¶–ò–ü–´:
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ - –∏—â–∏ —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Å–Ω–æ–º, —Å—Ç—Ä–µ—Å—Å–æ–º, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
‚Ä¢ –£—á–∏—Ç—ã–≤–∞–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
‚Ä¢ –°—Ä–∞–≤–Ω–∏–≤–∞–π —Å –Ω–æ—Ä–º–∞–º–∏ –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏ –ø–æ–ª–∞
‚Ä¢ –í—ã—è–≤–ª—è–π —Ç—Ä–µ–Ω–¥—ã - —É–ª—É—á—à–µ–Ω–∏–µ/—É—Ö—É–¥—à–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
‚Ä¢ –î–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, –≤—ã–ø–æ–ª–Ω–∏–º—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚Ä¢ –ü—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è—Ö –æ—Ç –Ω–æ—Ä–º—ã - –ø—Ä–µ–¥–ª–∞–≥–∞–π –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É

–°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê:
1. –ö—Ä–∞—Ç–∫–∞—è –æ—Ü–µ–Ω–∫–∞ –æ–±—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
2. –ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π (—Å–æ–Ω, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ, —Å—Ç—Ä–µ—Å—Å)
3. –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ —Ä–∏—Å–∫–∏
4. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
5. –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –¥–Ω—è–º–∏

–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –Ω–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ."""

        elif lang == "uk":
            return """–¢–∏ –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π –ª—ñ–∫–∞—Ä-—Ç–µ—Ä–∞–ø–µ–≤—Ç —Ç–∞ —Ñ–∞—Ö—ñ–≤–µ—Ü—å –∑ –ø—Ä–µ–≤–µ–Ω—Ç–∏–≤–Ω–æ—ó –º–µ–¥–∏—Ü–∏–Ω–∏.

–ê–Ω–∞–ª—ñ–∑—É–π –¥–∞–Ω—ñ –∑–¥–æ—Ä–æ–≤'—è –≤—ñ–¥ —Ä–æ–∑—É–º–Ω–æ–≥–æ –≥–æ–¥–∏–Ω–Ω–∏–∫–∞ —Ç–∞ –¥–∞–≤–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó.

–û–ë–û–í'–Ø–ó–ö–û–í–Ü –ü–†–ò–ù–¶–ò–ü–ò:
‚Ä¢ –ê–Ω–∞–ª—ñ–∑—É–π –≤—Å—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ - —à—É–∫–∞–π –∑–≤'—è–∑–∫–∏ –º—ñ–∂ —Å–Ω–æ–º, —Å—Ç—Ä–µ—Å–æ–º, –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—é
‚Ä¢ –í—Ä–∞—Ö–æ–≤—É–π –º–µ–¥–∏—á–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å –ø–∞—Ü—ñ—î–Ω—Ç–∞ —Ç–∞ –ª—ñ–∫–∏, —â–æ –ø—Ä–∏–π–º–∞—î
‚Ä¢ –ü–æ—Ä—ñ–≤–Ω—é–π –∑ –Ω–æ—Ä–º–∞–º–∏ –¥–ª—è –≤—ñ–∫—É —Ç–∞ —Å—Ç–∞—Ç—ñ  
‚Ä¢ –í–∏—è–≤–ª—è–π —Ç—Ä–µ–Ω–¥–∏ - –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è/–ø–æ–≥—ñ—Ä—à–µ–Ω–Ω—è –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤
‚Ä¢ –î–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ, –≤–∏–∫–æ–Ω—É–≤–∞–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
‚Ä¢ –ü—Ä–∏ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è—Ö –≤—ñ–¥ –Ω–æ—Ä–º–∏ - –ø—Ä–æ–ø–æ–Ω—É–π –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ª—ñ–∫–∞—Ä—è

–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é, –¥–æ–±—Ä–æ–∑–∏—á–ª–∏–≤–æ, –∞–ª–µ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ."""

        else:  # English
            return """You are an experienced physician and preventive medicine specialist.

Analyze health data from smartwatch and provide personalized recommendations.

MANDATORY PRINCIPLES:
‚Ä¢ Analyze all indicators comprehensively - look for connections between sleep, stress, activity
‚Ä¢ Consider patient's medical profile and medications
‚Ä¢ Compare with age and gender norms
‚Ä¢ Identify trends - improvement/deterioration of indicators  
‚Ä¢ Give specific, actionable recommendations
‚Ä¢ For deviations from norm - suggest consulting a doctor

Respond in English, friendly but professionally."""

    def _build_user_prompt(self, context: Dict) -> str:
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å user prompt —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        
        analysis_date = context['analysis_date']
        if isinstance(analysis_date, date):
            date_str = analysis_date.strftime('%Y-%m-%d')
        else:
            date_str = str(analysis_date)
        
        prompt = f"""–ú–ï–î–ò–¶–ò–ù–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• –ó–î–û–†–û–í–¨–Ø

üìÖ –î–ê–¢–ê –ê–ù–ê–õ–ò–ó–ê: {date_str}

üë§ –ú–ï–î–ò–¶–ò–ù–°–ö–ò–ô –ü–†–û–§–ò–õ–¨ –ü–ê–¶–ò–ï–ù–¢–ê:
{context['user_profile']['profile_text']}

üíä –ü–†–ò–ù–ò–ú–ê–ï–ú–´–ï –õ–ï–ö–ê–†–°–¢–í–ê:
{context['user_profile']['medications']}

üìä –î–ê–ù–ù–´–ï –ó–ê –¢–ï–ö–£–©–ò–ô –î–ï–ù–¨:
{context['current_day']}

üìà –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–ï –î–ê–ù–ù–´–ï (–∑–∞ –Ω–µ–¥–µ–ª—é):
{context['historical_data']}

üîç –í–´–Ø–í–õ–ï–ù–ù–´–ï –¢–†–ï–ù–î–´:
‚Ä¢ –°–æ–Ω: {context['trends'].get('sleep_trend', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {context['trends'].get('activity_trend', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
‚Ä¢ –°—Ç—Ä–µ—Å—Å: {context['trends'].get('stress_trend', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}  
‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: {context['trends'].get('recovery_trend', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}

üìã –ö–ê–ß–ï–°–¢–í–û –î–ê–ù–ù–´–•: {context['data_quality']}

–ó–ê–î–ê–ù–ò–ï:
–ü—Ä–æ–≤–µ–¥–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π. –î–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è –∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∂–∏–∑–Ω–∏. –£—á—Ç–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞.

–û—Ç–≤–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–µ —Å —ç–º–æ–¥–∑–∏."""
        
        return prompt

    async def _parse_ai_response(self, ai_response: str, daily_data: Dict) -> Dict:
        """–ü–∞—Ä—Å–∏—Ç—å –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI"""
        try:
            # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–ª –∑–¥–æ—Ä–æ–≤—å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
            health_score = self._calculate_health_score(daily_data)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç—Ä–µ–Ω–¥—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö (–±–∞–∑–æ–≤–∞—è –ª–æ–≥–∏–∫–∞)
            trends = self._extract_basic_trends(daily_data)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            analysis_result = {
                'analysis_date': daily_data.get('data_date', date.today() - timedelta(days=1)),
                'analysis_text': ai_response,
                'health_score': health_score,
                'recommendations': self._extract_recommendations(ai_response),
                'sleep_trend': trends.get('sleep_trend', 'stable'),
                'activity_trend': trends.get('activity_trend', 'stable'),
                'stress_trend': trends.get('stress_trend', 'stable'),
                'recovery_trend': trends.get('recovery_trend', 'stable'),
                'gpt_model_used': 'gpt-5-chat-latest',
                'created_at': datetime.now()
            }
            
            return analysis_result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ AI –æ—Ç–≤–µ—Ç–∞: {e}")
            return {
                'analysis_date': daily_data.get('data_date', date.today() - timedelta(days=1)),
                'analysis_text': ai_response,
                'health_score': 50.0,
                'recommendations': "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∑–¥–æ—Ä–æ–≤—å–µ–º",
                'created_at': datetime.now()
            }

    def _calculate_health_score(self, daily_data: Dict) -> float:
        """–í—ã—á–∏—Å–ª–∏—Ç—å –æ–±—â–∏–π –±–∞–ª–ª –∑–¥–æ—Ä–æ–≤—å—è (0-100)"""
        try:
            score_components = []
            
            # –°–æ–Ω (30% –æ—Ç –æ–±—â–µ–≥–æ –±–∞–ª–ª–∞)
            if daily_data.get('sleep_duration_minutes'):
                sleep_hours = daily_data['sleep_duration_minutes'] / 60
                if 7 <= sleep_hours <= 9:
                    sleep_score = 100
                elif 6 <= sleep_hours <= 10:
                    sleep_score = 80
                elif 5 <= sleep_hours <= 11:
                    sleep_score = 60
                else:
                    sleep_score = 40
                score_components.append(sleep_score * 0.3)
            
            # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (25% –æ—Ç –æ–±—â–µ–≥–æ –±–∞–ª–ª–∞)
            if daily_data.get('steps'):
                steps = daily_data['steps']
                if steps >= 10000:
                    activity_score = 100
                elif steps >= 7500:
                    activity_score = 80
                elif steps >= 5000:
                    activity_score = 60
                else:
                    activity_score = 40
                score_components.append(activity_score * 0.25)
            
            # –°—Ç—Ä–µ—Å—Å (20% –æ—Ç –æ–±—â–µ–≥–æ –±–∞–ª–ª–∞)
            if daily_data.get('stress_avg'):
                stress = daily_data['stress_avg']
                if stress <= 25:
                    stress_score = 100
                elif stress <= 50:
                    stress_score = 80
                elif stress <= 75:
                    stress_score = 60
                else:
                    stress_score = 40
                score_components.append(stress_score * 0.2)
            
            # Body Battery (15% –æ—Ç –æ–±—â–µ–≥–æ –±–∞–ª–ª–∞)
            if daily_data.get('body_battery_max'):
                battery = daily_data['body_battery_max']
                if battery >= 80:
                    battery_score = 100
                elif battery >= 60:
                    battery_score = 80
                elif battery >= 40:
                    battery_score = 60
                else:
                    battery_score = 40
                score_components.append(battery_score * 0.15)
            
            # –ü—É–ª—å—Å –ø–æ–∫–æ—è (10% –æ—Ç –æ–±—â–µ–≥–æ –±–∞–ª–ª–∞)
            if daily_data.get('resting_heart_rate'):
                rhr = daily_data['resting_heart_rate']
                if 50 <= rhr <= 70:
                    rhr_score = 100
                elif 40 <= rhr <= 80:
                    rhr_score = 80
                elif 35 <= rhr <= 90:
                    rhr_score = 60
                else:
                    rhr_score = 40
                score_components.append(rhr_score * 0.1)
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª
            if not score_components:
                return 50.0
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            total_weight = sum([0.3, 0.25, 0.2, 0.15, 0.1][:len(score_components)])
            final_score = sum(score_components) / total_weight * 100
            
            return round(min(max(final_score, 0), 100), 1)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –±–∞–ª–ª–∞ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
            return 50.0

    def _extract_basic_trends(self, daily_data: Dict) -> Dict:
        """–ò–∑–≤–ª–µ—á—å –±–∞–∑–æ–≤—ã–µ —Ç—Ä–µ–Ω–¥—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö"""
        # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–Ω–¥—ã –≤—ã—á–∏—Å–ª—è—é—Ç—Å—è –≤ _calculate_trends
        return {
            'sleep_trend': 'stable',
            'activity_trend': 'stable', 
            'stress_trend': 'stable',
            'recovery_trend': 'stable'
        }

    def _extract_recommendations(self, ai_response: str) -> str:
        """–ò–∑–≤–ª–µ—á—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ AI"""
        # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ - –∏—â–µ–º —Å–µ–∫—Ü–∏—é —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        try:
            lines = ai_response.split('\n')
            recommendations = []
            
            in_recommendations_section = False
            for line in lines:
                line = line.strip()
                
                # –ò—â–µ–º —Å–µ–∫—Ü–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
                if any(keyword in line.lower() for keyword in ['—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü', '—Å–æ–≤–µ—Ç—ã', '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω', 'recommendation']):
                    in_recommendations_section = True
                    continue
                
                if in_recommendations_section:
                    # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –µ—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π —Å–µ–∫—Ü–∏–∏
                    if line.startswith('##') or line.startswith('**') or line.startswith('---'):
                        break
                    
                    if line and not line.startswith('#'):
                        recommendations.append(line)
            
            if recommendations:
                return '\n'.join(recommendations[:5])  # –ú–∞–∫—Å–∏–º—É–º 5 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            else:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–µ–∫—Ü–∏—é, –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
                return '\n'.join([line for line in lines[-5:] if line.strip()])
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
            return "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∑–¥–æ—Ä–æ–≤—å–µ–º!"

    async def _save_analysis_to_db(self, user_id: int, analysis_result: Dict) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncpg –ø–æ–¥—Ö–æ–¥
            conn = await get_db_connection()
            
            await conn.execute("""
                INSERT INTO garmin_analysis_history 
                (user_id, analysis_date, analysis_text, health_score, 
                recommendations, sleep_trend, activity_trend, stress_trend, 
                recovery_trend, gpt_model_used)
                VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
                ON CONFLICT (user_id, analysis_date)
                DO UPDATE SET 
                    analysis_text = EXCLUDED.analysis_text,
                    health_score = EXCLUDED.health_score,
                    recommendations = EXCLUDED.recommendations,
                    sleep_trend = EXCLUDED.sleep_trend,
                    activity_trend = EXCLUDED.activity_trend,
                    stress_trend = EXCLUDED.stress_trend,
                    recovery_trend = EXCLUDED.recovery_trend,
                    gpt_model_used = EXCLUDED.gpt_model_used
            """, 
            user_id,
            analysis_result['analysis_date'],
            analysis_result['analysis_text'],
            analysis_result['health_score'],
            analysis_result.get('recommendations', ''),
            analysis_result.get('sleep_trend', 'stable'),
            analysis_result.get('activity_trend', 'stable'),
            analysis_result.get('stress_trend', 'stable'),
            analysis_result.get('recovery_trend', 'stable'),
            analysis_result.get('gpt_model_used', 'gpt-4o'))
            
            await release_db_connection(conn)
            
            logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –≤ –ë–î: {e}")
            if 'conn' in locals():
                await release_db_connection(conn)
            return False

    async def get_analysis_history(self, user_id: int, days: int = 7) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∞–Ω–∞–ª–∏–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = await get_db_connection()
            cursor = conn
            
            cursor.execute("""
                SELECT * FROM garmin_analysis_history
                WHERE user_id = %s
                ORDER BY analysis_date DESC
                LIMIT %s
            """, (user_id, days))
            
            rows = cursor.fetchall()
            conn.close()
            await release_db_connection(conn)
            
            return [dict(row) for row in rows]
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–æ–≤: {e}")
            return []

# ================================
# –ì–õ–û–ë–ê–õ–¨–ù–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–†
# ================================

garmin_analyzer = GarminAnalyzer()