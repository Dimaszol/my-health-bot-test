# main_debug.py - –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã

import asyncio
import os
import sys
import traceback
from datetime import datetime
from aiogram import Bot, Dispatcher
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def print_step(step_name, status="start"):
    """–ü–µ—á–∞—Ç–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∞–≥–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    timestamp = datetime.now().strftime("%H:%M:%S")
    if status == "start":
        print(f"üîÑ [{timestamp}] –ù–∞—á–∏–Ω–∞–µ–º: {step_name}")
    elif status == "success":
        print(f"‚úÖ [{timestamp}] –£—Å–ø–µ—à–Ω–æ: {step_name}")
    elif status == "error":
        print(f"‚ùå [{timestamp}] –û—à–∏–±–∫–∞: {step_name}")
    elif status == "warning":
        print(f"‚ö†Ô∏è [{timestamp}] –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {step_name}")

async def check_basic_setup():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    print_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º BOT_TOKEN
    bot_token = os.getenv("BOT_TOKEN")
    if not bot_token:
        print_step("BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ .env", "error")
        return False
    print_step("BOT_TOKEN –Ω–∞–π–¥–µ–Ω", "success")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º OPENAI_API_KEY
    openai_key = os.getenv("OPENAI_API_KEY")
    if not openai_key:
        print_step("OPENAI_API_KEY –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", "warning")
    else:
        print_step("OPENAI_API_KEY –Ω–∞–π–¥–µ–Ω", "success")
    
    return True

async def check_bot_connection():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram"""
    print_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram")
    
    try:
        bot_token = os.getenv("BOT_TOKEN")
        bot = Bot(token=bot_token)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        me = await bot.get_me()
        print_step(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å–ø–µ—à–Ω–æ - @{me.username}", "success")
        
        await bot.session.close()
        return True
        
    except Exception as e:
        print_step(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram: {e}", "error")
        return False

async def check_stripe_setup():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Stripe"""
    print_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Stripe")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ Stripe
        from main import check_stripe_setup
        
        if check_stripe_setup():
            print_step("Stripe –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", "success")
        else:
            print_step("Stripe –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω", "warning")
        return True
        
    except ImportError as e:
        print_step(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é check_stripe_setup: {e}", "error")
        return False
    except Exception as e:
        print_step(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Stripe: {e}", "error")
        return False

async def check_webhook_server():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞ webhook —Å–µ—Ä–≤–µ—Ä–∞"""
    print_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ webhook —Å–µ—Ä–≤–µ—Ä–∞")
    
    try:
        # –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å
        from webhook_subscription_handler import start_webhook_server
        print_step("–ú–æ–¥—É–ª—å webhook_subscription_handler –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω", "success")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–∞
        bot_token = os.getenv("BOT_TOKEN")
        bot = Bot(token=bot_token)
        
        # –ù–ï –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä, —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è
        print_step("Webhook —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É", "success")
        
        await bot.session.close()
        return True
        
    except ImportError as e:
        print_step(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å webhook_subscription_handler: {e}", "error")
        return False
    except Exception as e:
        print_step(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook: {e}", "error")
        return False

async def check_user_state_manager():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º user state manager"""
    print_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ user state manager")
    
    try:
        from user_state_manager import user_state_manager
        print_step("User state manager –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω", "success")
        return True
        
    except ImportError as e:
        print_step(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å user_state_manager: {e}", "error")
        return False
    except Exception as e:
        print_step(f"–û—à–∏–±–∫–∞ user_state_manager: {e}", "error")
        return False

async def check_database():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    print_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    
    try:
        # –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –ë–î
        from db_pool import initialize_db_pool, close_db_pool
        print_step("–ú–æ–¥—É–ª–∏ –ë–î –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã", "success")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if os.path.exists("users.db"):
            print_step("–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω", "success")
        else:
            print_step("–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω", "warning")
        
        # –ù–ï –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É–ª, —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç
        return True
        
    except ImportError as e:
        print_step(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª–∏ –ë–î: {e}", "error")
        return False
    except Exception as e:
        print_step(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}", "error")
        return False

async def check_openai_api():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º OpenAI API"""
    print_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ OpenAI API")
    
    try:
        from gpt import check_openai_status
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å API
        is_available = await check_openai_status()
        
        if is_available:
            print_step("OpenAI API –¥–æ—Å—Ç—É–ø–µ–Ω", "success")
        else:
            print_step("OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", "warning")
        
        return True
        
    except ImportError as e:
        print_step(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å gpt: {e}", "error")
        return False
    except Exception as e:
        print_step(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ OpenAI: {e}", "error")
        return False

async def check_handlers():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    print_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    try:
        # –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
        modules_to_check = [
            "registration",
            "documents", 
            "keyboards",
            "locales",
            "error_handler"
        ]
        
        for module in modules_to_check:
            try:
                __import__(module)
                print_step(f"–ú–æ–¥—É–ª—å {module} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω", "success")
            except ImportError as e:
                print_step(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å {module}: {e}", "error")
                return False
        
        return True
        
    except Exception as e:
        print_step(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}", "error")
        return False

async def run_full_diagnosis():
    """–ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É"""
    print("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –±–æ—Ç–∞...")
    print("=" * 60)
    
    checks = [
        ("–ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", check_basic_setup),
        ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram", check_bot_connection),
        ("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Stripe", check_stripe_setup),
        ("Webhook —Å–µ—Ä–≤–µ—Ä", check_webhook_server),
        ("User State Manager", check_user_state_manager),
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", check_database),
        ("OpenAI API", check_openai_api),
        ("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏", check_handlers)
    ]
    
    results = {}
    
    for check_name, check_func in checks:
        print("\n" + "-" * 40)
        try:
            result = await check_func()
            results[check_name] = result
        except Exception as e:
            print_step(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {check_name}: {e}", "error")
            print(f"–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:\n{traceback.format_exc()}")
            results[check_name] = False
    
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:")
    print("=" * 60)
    
    all_passed = True
    for check_name, result in results.items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù–û" if result else "‚ùå –û–®–ò–ë–ö–ê"
        print(f"{status} - {check_name}")
        if not result:
            all_passed = False
    
    print("\n" + "=" * 60)
    if all_passed:
        print("üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´!")
        print("üí° –ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ª–æ–≥–∏–∫–µ main.py")
        print("üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º")
    else:
        print("‚ö†Ô∏è –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´!")
        print("üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞")
    
    return all_passed

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    try:
        await run_full_diagnosis()
    except KeyboardInterrupt:
        print("\nüõë –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        print(f"–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:\n{traceback.format_exc()}")

if __name__ == "__main__":
    asyncio.run(main())