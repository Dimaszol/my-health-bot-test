# gpt.py - –ú–û–î–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
# –í—Å–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –æ—Å—Ç–∞—é—Ç—Å—è —Ç–µ–º–∏ –∂–µ, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º async/await

import os
import base64
import asyncio
import logging
import re
from openai import AsyncOpenAI  # üîÑ –ò–ó–ú–ï–ù–ï–ù–ò–ï: AsyncOpenAI –≤–º–µ—Å—Ç–æ OpenAI
from datetime import datetime
from dotenv import load_dotenv
from error_handler import OpenAIError, log_error_with_context, FileProcessingError
from subscription_manager import check_gpt4o_limit, spend_gpt4o_limit
from gemini_analyzer import send_to_gemini_vision

load_dotenv()
logger = logging.getLogger(__name__)
# üîÑ –ò–ó–ú–ï–ù–ï–ù–ò–ï: AsyncOpenAI –∫–ª–∏–µ–Ω—Ç
client = AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# üìä –°–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
OPENAI_SEMAPHORE = asyncio.Semaphore(5)

def safe_telegram_text(text: str) -> str:
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è: –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç Markdown –≤ HTML –¥–ª—è Telegram
    """
    if not text:
        return ""
    
    # 1. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Markdown –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
    # ## –ó–∞–≥–æ–ª–æ–≤–æ–∫ -> <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫</b>
    text = re.sub(r'^### (.+)$', r'<b>\1</b>', text, flags=re.MULTILINE)
    text = re.sub(r'^## (.+)$', r'<b>\1</b>', text, flags=re.MULTILINE)
    text = re.sub(r'^# (.+)$', r'<b>\1</b>', text, flags=re.MULTILINE)
    
    # 2. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç: **—Ç–µ–∫—Å—Ç** -> <b>—Ç–µ–∫—Å—Ç</b>
    text = re.sub(r'\*\*(.+?)\*\*', r'<b>\1</b>', text)
    
    # 3. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫—É—Ä—Å–∏–≤: *—Ç–µ–∫—Å—Ç* -> <i>—Ç–µ–∫—Å—Ç</i>
    text = re.sub(r'\*(.+?)\*', r'<i>\1</i>', text)
    
    # 4. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ: _—Ç–µ–∫—Å—Ç_ -> <u>—Ç–µ–∫—Å—Ç</u>
    text = re.sub(r'_(.+?)_', r'<u>\1</u>', text)
    
    # 5. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–¥: `–∫–æ–¥` -> <code>–∫–æ–¥</code>
    text = re.sub(r'`(.+?)`', r'<code>\1</code>', text)
    
    # 6. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–∫–∏: - –ø—É–Ω–∫—Ç -> ‚Ä¢ –ø—É–Ω–∫—Ç
    text = re.sub(r'^- (.+)$', r'‚Ä¢ \1', text, flags=re.MULTILINE)
    text = re.sub(r'^\* (.+)$', r'‚Ä¢ \1', text, flags=re.MULTILINE)
    
    # 7. –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã (–Ω–æ –Ω–µ –Ω–∞—à–∏ —Ç–µ–≥–∏)
    # –°–Ω–∞—á–∞–ª–∞ –∑–∞–º–µ–Ω—è–µ–º –Ω–∞—à–∏ —Ç–µ–≥–∏ –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
    temp_markers = {}
    html_tags = ['<b>', '</b>', '<i>', '</i>', '<u>', '</u>', '<code>', '</code>']
    
    for i, tag in enumerate(html_tags):
        marker = f"__TEMP_TAG_{i}__"
        temp_markers[marker] = tag
        text = text.replace(tag, marker)
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ HTML —Å–∏–º–≤–æ–ª—ã
    text = text.replace('&', '&amp;')
    text = text.replace('<', '&lt;')
    text = text.replace('>', '&gt;')
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—à–∏ —Ç–µ–≥–∏ –æ–±—Ä–∞—Ç–Ω–æ
    for marker, tag in temp_markers.items():
        text = text.replace(marker, tag)
    
    # 8. –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ (–±–æ–ª—å—à–µ 2 –ø–æ–¥—Ä—è–¥)
    while '\n\n\n' in text:
        text = text.replace('\n\n\n', '\n\n')
    
    return text.strip()


def split_long_message(text: str, max_length: int = 4000) -> list:
    """
    –†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è Telegram (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π HTML)
    """
    if len(text) <= max_length:
        return [text]
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∞–±–∑–∞—Ü–∞–º (–¥–≤–æ–π–Ω–æ–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏)
    paragraphs = text.split('\n\n')
    messages = []
    current_message = ""
    
    for paragraph in paragraphs:
        # –ï—Å–ª–∏ –∞–±–∑–∞—Ü –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if len(current_message + paragraph + '\n\n') <= max_length:
            current_message += paragraph + '\n\n'
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ
            if current_message:
                messages.append(current_message.strip())
            
            # –ï—Å–ª–∏ —Å–∞–º –∞–±–∑–∞—Ü —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–≥–æ
            if len(paragraph) > max_length:
                # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
                sentences = paragraph.split('. ')
                temp_paragraph = ""
                
                for sentence in sentences:
                    if len(temp_paragraph + sentence + '. ') <= max_length:
                        temp_paragraph += sentence + '. '
                    else:
                        if temp_paragraph:
                            messages.append(temp_paragraph.strip())
                        temp_paragraph = sentence + '. '
                
                if temp_paragraph:
                    current_message = temp_paragraph
            else:
                current_message = paragraph + '\n\n'
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if current_message:
        messages.append(current_message.strip())
    
    return messages

def async_safe_openai_call(max_retries: int = 3, delay: float = 2.0):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ OpenAI API"""
    def decorator(func):
        async def wrapper(*args, **kwargs):
            last_error = None
            
            async with OPENAI_SEMAPHORE:
                for attempt in range(max_retries):
                    try:
                        return await func(*args, **kwargs)
                        
                    except Exception as e:
                        last_error = e
                        log_error_with_context(e, {
                            "function": func.__name__, 
                            "attempt": attempt + 1
                        })
                        
                        if attempt < max_retries - 1:
                            await asyncio.sleep(delay * (attempt + 1))
                        
                raise OpenAIError(f"OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {last_error}")
        
        return wrapper
    return decorator

# üîÑ –í–°–ï –§–£–ù–ö–¶–ò–ò –û–°–¢–ê–Æ–¢–°–Ø –° –¢–ï–ú–ò –ñ–ï –ù–ê–ó–í–ê–ù–ò–Ø–ú–ò, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º async

@async_safe_openai_call(max_retries=2, delay=1.0)
async def summarize_note_text(note: str, lang: str = "ru") -> str:  # üîÑ async
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ –∑–∞–º–µ—Ç–∫–∏"""
    lang_instruction = {
        "ru": "–û—Ç–≤–µ—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.",
        "uk": "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.",
        "en": "Respond in English language."
    }

    today_str = datetime.now().strftime("%d.%m.%Y")

    system_prompt = (
        "Summarize the input briefly and medically, suitable for an AI health assistant. "
        "Do not include phrases like 'the patient says' or 'patient reports'. "
        "Focus only on clinical content and key observations. "
        f"Begin the summary with the current date in this format: [{today_str}] "
        + lang_instruction.get(lang, "Respond in English language.")
    )

    response = await client.chat.completions.create(  # üîÑ await
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": note}
        ],
        max_tokens=300,
        temperature=0.3
    )
    return response.choices[0].message.content.strip()

@async_safe_openai_call(max_retries=2, delay=1.5)
async def generate_title_for_note(note: str) -> str:  # üîÑ async
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏"""
    today_str = datetime.now().strftime("%Y-%m-%d")
    
    system_prompt = (
        "You are an AI medical assistant. Create a short title for this health-related note.\n"
        "Requirements:\n"
        "- Use the same language as the input note.\n"
        "- Keep the title concise (2 to 5 words).\n"
        f"- Begin the title with today's date: {today_str}:\n"
        "Examples:\n"
        f"{today_str}: Chest Pain After Jogging\n"
        f"{today_str}: Mild Cough and Fatigue\n"
    )
    
    response = await client.chat.completions.create(  # üîÑ await
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": note}
        ],
        max_tokens=25,
        temperature=0.6
    )
    
    title = response.choices[0].message.content.strip().strip('"\'')
    return title

@async_safe_openai_call(max_retries=2, delay=3.0)
async def extract_text_from_image(image_path: str) -> str:  # üîÑ async
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        with open(image_path, "rb") as f:
            image_bytes = f.read()
    except FileNotFoundError:
        raise FileProcessingError(f"–§–∞–π–ª {image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω", "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")

    image_base64 = base64.b64encode(image_bytes).decode("utf-8")

    system_prompt = (
        "You are a medical assistant specialized in extracting text from scanned documents and images. "
        "‚ö†Ô∏è Your task is to accurately extract all readable medical text **in the original language** of the document. "
        "‚ö†Ô∏è However, you must remove all personal and identifying information ‚Äî including full names of patients or doctors, age, gender, addresses, card numbers, clinic or hospital names. "
        "Do not summarize, skip, or interpret the content. Do not add explanations. Just extract the pure medical content."
    )

    user_prompt = (
        "This is a scanned medical document (e.g., discharge summary, lab report, consultation, prescription, or form). "
        "Extract the entire readable text **in the same language as in the image**, but remove all of the following:\n"
        "- Full names of any individuals (patients, doctors, lab staff)\n"
        "- Age, gender\n"
        "- Addresses, contact details, ID or card numbers\n"
        "- Clinic, hospital, laboratory names or logos\n\n"
        "Do NOT explain your actions or mention what was removed. Do NOT translate the content. Just return the clean medical text."
    )

    response = await client.chat.completions.create(  # üîÑ await
        model="gpt-4o",
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": [
                {"type": "text", "text": user_prompt},
                {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{image_base64}"}}
            ]}
        ],
        max_tokens=1500,
        temperature=0
    )
    return response.choices[0].message.content.strip()

@async_safe_openai_call(max_retries=2, delay=3.0)
async def send_to_gpt_vision(image_path: str, lang: str, prompt: str = None):
    return await send_to_gemini_vision(image_path, lang, prompt)

@async_safe_openai_call(max_retries=2, delay=1.0)
async def update_medications_via_gpt(user_input: str, current_list: list) -> list:  # üîÑ async
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤"""
    prompt = (
        "–¢—ã ‚Äî –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–Ω–∏–º–∞–µ–º—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, "
        "–∏ –æ–Ω –≤–≤–æ–¥–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—ã—á–Ω—ã–º —è–∑—ã–∫–æ–º: –¥–æ–±–∞–≤—å, —É–¥–∞–ª–∏, –∏–∑–º–µ–Ω–∏ –≤—Ä–µ–º—è. "
        "–í–µ—Ä–Ω–∏ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏:\n"
        "- name (–Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞)\n"
        "- time (–≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM)\n"
        "- label (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ñ—Ä–∞–∑–∞ –≤—Ä–µ–º–µ–Ω–∏, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª)\n\n"
        "–°–æ–ø–æ—Å—Ç–∞–≤—å —Ñ—Ä–∞–∑—ã —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –ø—Ä–∏—ë–º–∞. –ü—Ä–∏–º–µ—Ä—ã:\n"
        "- —É—Ç—Ä–æ–º ‚Üí 08:00\n"
        "- –¥–Ω—ë–º ‚Üí 13:00\n"
        "- –≤–µ—á–µ—Ä–æ–º ‚Üí 20:00\n"
        "- –ø–µ—Ä–µ–¥ —Å–Ω–æ–º ‚Üí 22:00\n"
        f"üìã –¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤:\n{current_list}\n\n"
        f"üì® –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{user_input}\n\n"
        "–í–µ—Ä–Ω–∏ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞–∫ JSON-–º–∞—Å—Å–∏–≤ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –ø–æ—è—Å–Ω–µ–Ω–∏–π. "
        "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–º–∏ —Å–∫–æ–±–∫–∞–º–∏, —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã —Å –∫–ª—é—á–∞–º–∏ name, time, label. "
        "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´—É–¥–∞–ª–∏ –≤—Å–µ¬ª, ¬´–±–æ–ª—å—à–µ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é¬ª, ¬´–æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫¬ª), "
        "–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:\n\n"
        "[{\"name\": \"–ê–Ω–∞–ª—å–≥–∏–Ω\", \"time\": \"18:00\", \"label\": \"–≤–µ—á–µ—Ä–æ–º\"}, {\"name\": \"–û–º–µ–ø—Ä–∞–∑–æ–ª\", \"time\": \"22:00\", \"label\": \"–ø–µ—Ä–µ–¥ —Å–Ω–æ–º\"}]"
    )

    response = await client.chat.completions.create(  # üîÑ await
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."},
            {"role": "user", "content": prompt}
        ],
        max_tokens=500,
        temperature=0.2
    )
    
    raw_text = response.choices[0].message.content.strip()
    print("\n[üß™ GPT –æ—Ç–≤–µ—Ç ‚Äî update_medications_via_gpt]:")
    print(raw_text)

    import json
    try:
        return json.loads(raw_text)
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:", e)
        log_error_with_context(e, {"function": "update_medications_via_gpt", "raw_response": raw_text[:200]})
        return []

@async_safe_openai_call(max_retries=2, delay=1.0)
async def ask_structured(text: str, lang: str = "ru", max_tokens: int = 2500) -> str:  # üîÑ async
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    system_prompt = (
        "You are a medical information designer who creates clear, beautiful, and patient-friendly "
        "medical document summaries. Your goal is to make medical information easily readable and "
        "well-organized for patients while preserving all important clinical details. "
        f"‚ö†Ô∏è Always respond strictly in '{lang}' language, regardless of input language."
    )

    user_prompt = (
        "‚ö†Ô∏è DOCUMENT FORMATTING TASK:\n"
        "Transform this medical information into a beautiful, clear summary that a patient can easily read and reference.\n\n"
        
        "üîí PRIVACY & CONTENT RULES:\n"
        "‚Ä¢ REMOVE ALL personal identifiers: patient names, doctor names, medical record numbers, addresses, phone numbers\n"
        "‚Ä¢ REMOVE phrases like 'the patient', 'patient reports', 'patient was advised' - focus on medical content only\n"
        "‚Ä¢ REMOVE administrative text, disclaimers, legal notices, and non-medical formal phrases\n"
        "‚Ä¢ KEEP all medical data: diagnoses, test results, measurements, medications, recommendations\n\n"
        
        "üìã STRUCTURE & FORMATTING:\n"
        "‚ö†Ô∏è DO NOT include a document title at the beginning - the title will be added separately.\n"
        "‚ö†Ô∏è Start directly with the content sections using **bold headers** for main sections.\n"
        "‚Ä¢ Use bullet points (‚Ä¢) for lists of findings, medications, or recommendations\n"
        "‚Ä¢ Group related information logically (lab results by system, imaging by organ, etc.)\n"
        "‚Ä¢ Highlight abnormal values with üîç emoji when values are outside normal ranges\n"
        "‚Ä¢ Use clear, scannable formatting that's easy to read on mobile devices\n\n"
        
        "üè• MEDICAL CONTENT GUIDELINES:\n"
        "‚Ä¢ Include ALL numerical values with units and reference ranges when available\n"
        "‚Ä¢ Clearly indicate when values are elevated, decreased, or normal\n"
        "‚Ä¢ Preserve exact medical terminology but add brief explanations in parentheses when helpful\n"
        "‚Ä¢ Maintain diagnostic codes (ICD, medical classifications) when present\n"
        "‚Ä¢ Group medications with dosages and frequencies clearly\n"
        "‚Ä¢ Make recommendations actionable and specific\n\n"
        
        "‚ú® READABILITY OPTIMIZATION:\n"
        "‚Ä¢ Use short paragraphs and clear sections\n"
        "‚Ä¢ Make key findings easy to spot and understand\n"
        "‚Ä¢ Organize information from most important to supporting details\n"
        "‚Ä¢ Use consistent formatting throughout\n"
        "‚Ä¢ Ensure the summary serves as a complete reference the patient can save and review\n\n"
        
        "üö´ AVOID:\n"
        "‚Ä¢ Complex medical tables (convert to readable lists)\n"
        "‚Ä¢ Redundant information or unnecessary repetition\n"
        "‚Ä¢ Overly technical explanations without context\n"
        "‚Ä¢ Poor formatting that's hard to read on small screens\n\n"
        
        "GOAL: Create a document that patients will want to save, reference, and easily understand while preserving complete medical accuracy.\n\n"
        
        f"MEDICAL DOCUMENT TO FORMAT:\n{text}"
    )

    response = await client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_prompt}
        ],
        max_tokens=max_tokens,
        temperature=0.2  # –ù–∏–∑–∫–∞—è –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    )
    return response.choices[0].message.content.strip()

@async_safe_openai_call(max_retries=2, delay=1.0)
async def enrich_query_for_vector_search(user_question: str) -> str:
    """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    
    prompt = f"""
User asked a medical question: "{user_question}"

Task: Create a CONCISE medical search query for vector database.

RULES:
‚Ä¢ Remove filler words ("what can you tell me", "please explain", "help me")
‚Ä¢ Add relevant medical terminology
‚Ä¢ DO NOT explain, DO NOT say "we can rephrase this"
‚Ä¢ Respond ONLY with the expanded query, no commentary
‚Ä¢ Respond in the SAME LANGUAGE as the user's question

EXAMPLES:
Question: "—á—Ç–æ –ø–æ —É–∑–∏?" ‚Üí Answer: "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –£–ó–ò –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä –æ—Ä–≥–∞–Ω–æ–≤, —Ä–∞–∑–º–µ—Ä–æ–≤, —ç—Ö–æ–≥–µ–Ω–Ω–æ—Å—Ç–∏"
Question: "blood test results?" ‚Üí Answer: "Blood test results: hemoglobin, leukocytes, ESR, glucose, biochemical parameters"
Question: "—â–æ –∑ –ú–†–¢?" ‚Üí Answer: "–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ú–†–¢ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è –∑ –æ–ø–∏—Å–æ–º –∑–º—ñ–Ω —É —Ç–∫–∞–Ω–∏–Ω–∞—Ö, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ö, –º–æ–∂–ª–∏–≤—ñ –ø–∞—Ç–æ–ª–æ–≥—ñ—ó"

Your answer for "{user_question}":
"""
    
    # üéØ –ü–†–Ø–ú–û–ô –í–´–ó–û–í —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏
    response = await client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {
                "role": "system", 
                "content": "You are a medical query processor. Create concise search queries without explanations."
            },
            {"role": "user", "content": prompt}
        ],
        max_tokens=150,      # ‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        temperature=0.2      # ‚úÖ –ù–∏–∑–∫–∞—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏
    )
    
    # –ü—Ä–æ—Å—Ç–∞—è –æ—á–∏—Å—Ç–∫–∞
    cleaned_response = response.choices[0].message.content.strip().strip('"\'')
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    if len(cleaned_response) > 300:
        cleaned_response = cleaned_response[:300].strip()
    
    # Fallback
    if len(cleaned_response) < 10:
        cleaned_response = user_question
    
    return cleaned_response

@async_safe_openai_call(max_retries=2, delay=1.0)
async def ask_gpt_keywords(prompt: str) -> str:  # üîÑ async
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
    response = await client.chat.completions.create(  # üîÑ await
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": "You are a medical keyword extractor."},
            {"role": "user", "content": prompt}
        ],
        max_tokens=300,
        temperature=0.2
    )
    return response.choices[0].message.content.strip()

@async_safe_openai_call(max_retries=2, delay=1.0)
async def extract_keywords(text: str) -> list[str]:
    """‚úÖ –ö–†–ê–¢–ö–ê–Ø –≤–µ—Ä—Å–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
    
    prompt = f"""
        You are a medical expert. Extract **core medical terms** from the following text that best represent its clinical meaning and can be used for semantic search. Include only the most essential:

        ‚Äì disease names  
        ‚Äì histological diagnoses  
        ‚Äì medical procedures  
        ‚Äì anatomical structures  
        ‚Äì classification systems (e.g., Gleason, Grade Group, ICD)

        Then, add **2 additional terms** that are common synonyms or broader medical concepts related to the content ‚Äî terms that could help retrieve this text in a keyword-based search.

        üîπ Do not include:
        ‚Äì general language (e.g., color, size, shape)  
        ‚Äì administrative or technical terms (e.g., code, document, date)  
        ‚Äì numbers or measurement values  
        ‚Äì repeated or irrelevant words

        ‚ö†Ô∏è Return exactly **5‚Äì7 terms total**:
        ‚Äì up to 5 essential terms  
        ‚Äì plus 2 synonym or related terms

        All terms must be:
        ‚Äì in **dictionary form**  
        ‚Äì in **English only**, even if the original text is in another language
        ‚Äì **comma-separated**, with no explanations.

        "{text}"
        """
    
    try:
        raw = await ask_gpt_keywords(prompt)
        keywords_list = [w.strip().lower() for w in raw.split(",") if len(w.strip()) > 1]
        
        print(f"   üîé –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keywords_list}")
        return keywords_list
        
    except Exception as e:
        print(f"   üîé –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: –û—à–∏–±–∫–∞ - {e}")
        log_error_with_context(e, {"function": "extract_keywords", "text_length": len(text)})
        return []

@async_safe_openai_call(max_retries=3, delay=2.0)
async def ask_doctor(context_text: str, user_question: str, 
                    lang: str, user_id: int = None, use_gemini: bool = False) -> str:
    """
    ‚úÖ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è ‚Äî —É—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–µ–¥–∞–≤–Ω–µ–µ –æ–±—â–µ–Ω–∏–µ, –Ω–µ –∑–¥–æ—Ä–æ–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —Ä–∞–∑
    –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Gemini 2.5 Flash
    """
    
    # ‚úÖ –ê–ù–ê–õ–ò–ó–ò–†–£–ï–ú –ù–ï–î–ê–í–ù–Æ–Æ –ò–°–¢–û–†–ò–Æ
    recent_interaction = False
    if context_text and len(context_text.strip()) > 0:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–¥–∞–≤–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∑–Ω–∞—á–∏—Ç –æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è
        recent_interaction = True
    
    # ‚úÖ –û–ü–†–ï–î–ï–õ–Ø–ï–ú –¢–ò–ü –û–ë–©–ï–ù–ò–Ø
    greeting_words = ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', '–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å', 'hello', 'hi', '–≤—ñ—Ç–∞—é', '–¥–æ–±—Ä–∏–π –¥–µ–Ω—å']
    is_greeting = any(word in user_question.lower() for word in greeting_words)
    
    system_prompt = (
        "You are a compassionate and knowledgeable virtual physician who guides the user through their medical journey. "
        "You speak in a friendly, human tone and provide explanations when needed. "
        f"Always respond in the '{lang}' language."
    )

    # ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –ò–ù–°–¢–†–£–ö–¶–ò–ò —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –æ–±—â–µ–Ω–∏—è
    if recent_interaction and not is_greeting:
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä ‚Äî –ù–ï –∑–¥–æ—Ä–æ–≤–∞–µ–º—Å—è
        instruction_prompt = (
            "Continue the ongoing medical conversation naturally. Do NOT greet the patient again if you've already been talking. "
            "You have access to the user's health profile, medical documents, imaging reports, conversation history, and memory notes. "
            "Answer only questions related to the user's health ‚Äî symptoms, diagnostics, treatment, risks, interpretation of reports, etc. "
            "If the question is not directly related to medical symptoms, diagnostics, treatment, or documented findings ‚Äî but still relevant to health (e.g., vitamins, lifestyle, prevention) ‚Äî you may give helpful information. "
            "Only decline if the question is clearly off-topic (e.g., movies, politics). "
            "Do not repeat that you're an AI. Do not ask follow-up questions unless critical. "
            "Use the document summaries and analysis results as clinical findings. Do not say you can't see images. "
            "If information is missing, offer a preliminary suggestion and explain what's lacking. "
            "‚ö†Ô∏è IMPORTANT: Since you've been talking recently, go straight to answering the question without greeting."
        )
    else:
        # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —è–≤–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ‚Äî –º–æ–∂–Ω–æ –ø–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è
        instruction_prompt = (
            "You have access to the user's health profile, medical documents, imaging reports, conversation history, and memory notes. "
            "Answer only questions related to the user's health ‚Äî symptoms, diagnostics, treatment, risks, interpretation of reports, etc. "
            "If the question is not directly related to medical symptoms, diagnostics, treatment, or documented findings ‚Äî but still relevant to health (e.g., vitamins, lifestyle, prevention) ‚Äî you may give helpful information. "
            "Only decline if the question is clearly off-topic (e.g., movies, politics). "
            "Do not repeat that you're an AI. Do not ask follow-up questions unless critical. "
            "Use the document summaries and analysis results as clinical findings. Do not say you can't see images. "
            "If information is missing, offer a preliminary suggestion and explain what's lacking."
        )

    full_prompt = f"{instruction_prompt}\n\n{context_text}"

    try:
        import datetime
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∞—è –º–æ–¥–µ–ª—å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è
        model_info = "Gemini 2.5 Flash" if use_gemini else "GPT-4o/GPT-4o-mini"
        
        with open("prompts_log.txt", "a", encoding="utf-8") as f:
            f.write(f"\n{'='*80}\n")
            f.write(f"üïê {timestamp} | User {user_id} | {model_info}\n")
            f.write(f"üåê –Ø–∑—ã–∫: {lang} | –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ: {'–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ' if recent_interaction and not is_greeting else '–ù–æ–≤–æ–µ/–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ'}\n")
            f.write(f"‚ùì –í–æ–ø—Ä–æ—Å: {user_question}\n")
            f.write(f"üìä –î–ª–∏–Ω–∞ system: {len(system_prompt)} —Å–∏–º–≤. | user: {len(full_prompt)} —Å–∏–º–≤. | ~{(len(system_prompt) + len(full_prompt)) // 4} —Ç–æ–∫–µ–Ω–æ–≤\n")
            f.write(f"{'='*80}\n")
            f.write("üîß SYSTEM PROMPT:\n")
            f.write(system_prompt)
            f.write("\n\nüë§ USER PROMPT:\n")
            f.write(full_prompt)
            f.write(f"\n{'='*80}\n\n")
        
        print(f"üíæ –ü—Ä–æ–º–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ prompts_log.txt (User {user_id})")
        
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç –≤ —Ñ–∞–π–ª: {e}")

    # ‚úÖ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: Gemini –∏–ª–∏ GPT
    if use_gemini:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º
        if user_id and await check_gpt4o_limit(user_id):
            try:
                # –í—ã–∑—ã–≤–∞–µ–º Gemini
                response = await ask_doctor_gemini(system_prompt, full_prompt, lang)
                
                # ‚úÖ –í–ê–ñ–ù–û: –¢—Ä–∞—Ç–∏–º –ª–∏–º–∏—Ç –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                
                print(f"üíé –õ–∏–º–∏—Ç –ø–æ—Ç—Ä–∞—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (Gemini)")
                
                return response
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Gemini –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, fallback –Ω–∞ GPT-4o-mini: {e}")
                # –ü—Ä–∏ –æ—à–∏–±–∫–µ Gemini –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ GPT-4o-mini (–±–µ–∑ —Ç—Ä–∞—Ç –ª–∏–º–∏—Ç–æ–≤)
                print(f"üîÑ Fallback –Ω–∞ GPT-4o-mini –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        else:
            # –ù–µ—Ç –ª–∏–º–∏—Ç–æ–≤ ‚Üí –∏—Å–ø–æ–ª—å–∑—É–µ–º GPT-4o-mini
            print(f"üÜì –ù–µ—Ç –ª–∏–º–∏—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º GPT-4o-mini –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # ‚úÖ –û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê GPT (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        
    interaction_type = "üîÑ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ" if recent_interaction and not is_greeting else "üÜï –ù–æ–≤–æ–µ/–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"
    print(f"üí¨ {interaction_type} | –í–æ–ø—Ä–æ—Å: '{user_question[:50]}{'...' if len(user_question) > 50 else ''}'")
    
    if not use_gemini and user_id and await check_gpt4o_limit(user_id):
        model = "gpt-4o"
        try:
            response = await client.chat.completions.create(
                model=model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": full_prompt}
                ],
                max_tokens=2500,
                temperature=0.5
            )
            
            
            answer = response.choices[0].message.content.strip()
            return safe_telegram_text(answer)
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è GPT-4o –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, fallback –Ω–∞ mini: {e}")
            model = "gpt-4o-mini"
    else:
        model = "gpt-4o-mini"

    # ‚úÖ –í—ã–∑–æ–≤ API (GPT-4o-mini –∏–ª–∏ fallback)
    response = await client.chat.completions.create(
        model=model,
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": full_prompt}
        ],
        max_tokens=2500,
        temperature=0.5
    )
    
    answer = response.choices[0].message.content.strip()
    return safe_telegram_text(answer)


async def ask_doctor_gemini(system_prompt: str, full_prompt: str, lang: str = "ru") -> str:
    """
    –û—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è Gemini 2.5 Flash - –° –ñ–ï–°–¢–ö–û–ô –§–ò–ö–°–ê–¶–ò–ï–ô –Ø–ó–´–ö–ê
    """
    try:
        import google.generativeai as genai
        import os
        
        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ .env
        api_key = os.getenv("GEMINI_API_KEY")
        if not api_key:
            raise Exception("GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Gemini
        genai.configure(api_key=api_key)
        model = genai.GenerativeModel('gemini-2.5-flash')
        
        # üîß –£–°–ò–õ–ï–ù–ù–ê–Ø –Ø–ó–´–ö–û–í–ê–Ø –§–ò–ö–°–ê–¶–ò–Ø –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ lang
        if lang == "ru":
            lang_instruction = "–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–π—Å—è –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π."
        elif lang == "uk":
            lang_instruction = "–ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–õ–ò–í–û: –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –¢–Ü–õ–¨–ö–ò —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é. –ù—ñ–∫–æ–ª–∏ –Ω–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–π—Å—è –Ω–∞ —Ä–æ—Å—ñ–π—Å—å–∫—É —á–∏ –∞–Ω–≥–ª—ñ–π—Å—å–∫—É."
        elif lang == "en":
            lang_instruction = "CRITICAL: Respond ONLY in English. Never switch to Russian or Ukrainian."
        else:
            lang_instruction = "–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
        
        # üîß –ú–û–î–ò–§–ò–¶–ò–†–£–ï–ú –ü–†–û–ú–ü–¢ —Å –∂–µ—Å—Ç–∫–æ–π —è–∑—ã–∫–æ–≤–æ–π —Ñ–∏–∫—Å–∞—Ü–∏–µ–π
        enhanced_system_prompt = f"""
{system_prompt}

üö® LANGUAGE ENFORCEMENT RULES:
{lang_instruction}

If you start responding in the wrong language, immediately stop and restart in the correct language.
The user expects consistency in language throughout the entire response.
Never mix languages within a single response.
"""
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º enhanced system –∏ user –ø—Ä–æ–º–ø—Ç—ã
        combined_prompt = f"{enhanced_system_prompt}\n\n{full_prompt}"
        
        # üîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê
        prompt_length = len(combined_prompt)
        estimated_tokens = prompt_length // 2
        print(f"üìä Gemini –ø—Ä–æ–º–ø—Ç: {prompt_length} —Å–∏–º–≤–æ–ª–æ–≤ ‚âà {estimated_tokens} —Ç–æ–∫–µ–Ω–æ–≤ (—è–∑—ã–∫: {lang})")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = model.generate_content(
            combined_prompt,
            generation_config=genai.types.GenerationConfig(
                max_output_tokens=2500,
                temperature=0.5,  # üîß –ù–µ–º–Ω–æ–≥–æ —Å–Ω–∏–∂–∞–µ–º –¥–ª—è –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —è–∑—ã–∫–∞
                candidate_count=1
            ),
            safety_settings=[
                {
                    "category": "HARM_CATEGORY_HARASSMENT",
                    "threshold": "BLOCK_NONE"
                },
                {
                    "category": "HARM_CATEGORY_HATE_SPEECH", 
                    "threshold": "BLOCK_NONE"
                },
                {
                    "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                    "threshold": "BLOCK_NONE"
                },
                {
                    "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
                    "threshold": "BLOCK_NONE"
                }
            ]
        )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
        if response.candidates and len(response.candidates) > 0:
            candidate = response.candidates[0]
            
            # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ finish_reason
            if hasattr(candidate, 'finish_reason'):
                finish_reason = candidate.finish_reason
                print(f"üîç Gemini finish_reason: {finish_reason}")
                
                if finish_reason == 2:
                    print("‚ö†Ô∏è –û—Ç–≤–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Å–∏—Å—Ç–µ–º–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
                elif finish_reason == 3:
                    print("‚ö†Ô∏è –û—Ç–≤–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –∞–≤—Ç–æ—Ä—Å–∫–∏—Ö –ø—Ä–∞–≤")
                elif finish_reason == 4:
                    print("‚ö†Ô∏è –û—Ç–≤–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ –¥—Ä—É–≥–∏–º –ø—Ä–∏—á–∏–Ω–∞–º")
            
            if hasattr(candidate, 'content') and candidate.content.parts:
                answer = candidate.content.parts[0].text.strip()
                
                # üîß –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –Ø–ó–´–ö–ê
                print(f"‚úÖ Gemini –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {len(answer)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —è–∑—ã–∫—É
                answer_start = answer[:100].lower()
                if lang == "ru" and any(word in answer_start for word in ["—â–æ", "–≤—ñ–¥–ø–æ–≤—ñ–¥—å", "–∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è", "—Ä–µ–∫–æ–º–µ–Ω–¥—É—é"]):
                    print("‚ö†Ô∏è Gemini –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–º –≤–º–µ—Å—Ç–æ —Ä—É—Å—Å–∫–æ–≥–æ!")
                elif lang == "uk" and any(word in answer_start for word in ["—á—Ç–æ", "–æ—Ç–≤–µ—Ç", "–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å", "—Ä–µ–∫–æ–º–µ–Ω–¥—É—é"]):
                    print("‚ö†Ô∏è Gemini –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —Ä—É—Å—Å–∫–æ–º –≤–º–µ—Å—Ç–æ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–≥–æ!")
                
                return safe_telegram_text(answer)
        
        raise Exception("Gemini –Ω–µ –≤–µ—Ä–Ω—É–ª –≤–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Gemini: {e}")
        error_msg = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å."
        return safe_telegram_text(error_msg)

@async_safe_openai_call(max_retries=2, delay=1.0)
async def is_medical_text(text: str) -> bool:  # üîÑ async
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    prompt = (
        "The following text was extracted from an image or document. "
        "Determine if it appears to be part of a medical document (e.g., lab report, diagnosis, discharge summary, prescriptions, imaging results).\n\n"
        "Respond strictly with 'yes' or 'no'.\n\n"
        f"{text[:1500]}"
    )

    response = await client.chat.completions.create(  # üîÑ await
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": "You are a medical classification assistant. Your task is to check if a text is medical in nature."},
            {"role": "user", "content": prompt}
        ],
        max_tokens=10,
        temperature=0
    )

    answer = response.choices[0].message.content.strip().lower()
    return "yes" in answer

@async_safe_openai_call(max_retries=2, delay=1.0)
async def generate_medical_summary(text: str, lang: str, document_date: str = None) -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ —Ä–µ–∑—é–º–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∞—Ç–æ–π"""
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –¥–ª—è fallback
    current_date = datetime.now().strftime("%d.%m.%Y")
    
    # –ï—Å–ª–∏ –¥–∞—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é
    fallback_date = document_date or current_date
    
    system_prompt = (
        "You are a medical assistant creating a structured summary of a medical document. "
        "You do not draw conclusions or add comments. You simply organize important information into paragraphs."
        f"‚ö†Ô∏è Always respond strictly in the '{lang}' language, regardless of the document language."
    )

    user_prompt = (
        "‚ö†Ô∏è STRICT INSTRUCTION:\n"
        "‚ö†Ô∏è Never include any personal or identifying information ‚Äî such as full names, age, gender, addresses, card numbers, clinic names, or hospital departments. Completely remove such data from the summary, even if it appears in the document. Do not begin the paragraph with phrases like 'the patient is a 67-year-old male'.\n"
        
        f"‚ö†Ô∏è DATE RULES:\n"
        f"1. FIRST: Look for dates in the document text (DD.MM.YYYY, DD/MM/YYYY, DD-MM-YYYY formats)\n"
        f"2. SECOND: If NO date found in document, use this fallback date: {fallback_date}\n"
        f"3. CRITICAL: Use the SAME date for ALL paragraphs - either the document date OR the fallback date\n"
        f"4. Each paragraph must start with [dd.mm.yyyy] format\n"
        f"5. Do not mix different dates between paragraphs\n"
        f"6. Do not repeat dates inside paragraphs\n\n"
        
        "‚ö†Ô∏è Include only content that may be clinically relevant or useful for AI-driven medical analysis. Do not include paragraphs that contain only formal phrases, disclaimers, missing data notes, or administrative remarks without medical value.\n"
        "Create a structured summary of a medical document.\n"
        "It can be any type of document: report, discharge summary, examination protocol, consultation, lab result, etc.\n"
        "Divide the text into paragraphs by meaning and size ‚Äî from 100 to 150 words. If a paragraph is too short, merge it with a neighboring one.\n"
        "The first paragraph is the main one: include all key and diagnostically important information from the entire document.\n"
        "The first paragraph must contain all critical clinical data, diagnoses, and observations, even if they are repeated elsewhere in the document.\n"
        "Strive for logically complete fragments; do not break sentences or leave incomplete thoughts.\n"
        
        f"‚ö†Ô∏è CRITICAL: Extract date from document first. If no date found, use {fallback_date}.\n"
        
        "Always preserve all parameters, even if they are contradictory or incomplete.\n"
        "Do not interpret, do not draw conclusions, do not omit ambiguous or conflicting data ‚Äî just keep them as they are.\n"
        "Include all numerical values, reference ranges, signs, diagnoses, scales, dosages, medications, test result descriptions, and technical parameters.\n"
        "Do not add any introductory or concluding sentences.\n"
        "If there is little information, do not create extra paragraphs ‚Äî limit to 1‚Äì2 chunks.\n"
        "This summary is intended for internal AI analysis.\n"
        
        "FORMAT: [DD.MM.YYYY] Medical content of paragraph.\n"
        
        "Before returning the answer, verify that:\n"
        "- No full names are present\n" 
        f"- Each paragraph starts with either document date OR {fallback_date}\n"
        "- No other dates are mentioned inside paragraphs\n"
        "- All text is logically grouped and follows the format\n"
        "The answer must be in the form of such paragraphs, separated by double line breaks.\n\n" + text
    )

    response = await client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_prompt}
        ],
        max_tokens=1500,
        temperature=0.3
    )
    return response.choices[0].message.content.strip()

@async_safe_openai_call(max_retries=2, delay=1.0)
async def generate_title_from_text(text: str, lang: str) -> str:  # üîÑ async
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    system_prompt = (
        "You are a medical assistant generating concise titles for documents. "
        f"‚ö†Ô∏è Always reply strictly in the '{lang}' language."
    )
    
    title_prompt = (
        "Read the medical document and generate a short, accurate title.\n"
        "‚ö†Ô∏è Never include full names of patients, doctors, lab staff, or clinics ‚Äî completely skip them.\n"
        
        "üìÖ DATE RULES:\n"
        "‚Ä¢ ONLY if the document text contains a real date (DD.MM.YYYY, DD/MM/YYYY, etc.) - add it to the title\n"
        "‚Ä¢ If NO date is found in the document - do NOT add any date to the title\n"
        "‚Ä¢ NEVER use example dates or make up dates\n\n"
        
        "üßæ Focus only on the essence: type of exam, organ, diagnosis, etc. No extra words, no quotes, no formal phrases.\n"
        
        "EXAMPLES:\n"
        "‚Ä¢ If document contains date '15.06.2023': ‚Üí 'Liver ultrasound 15.06.2023'\n"
        "‚Ä¢ If document contains NO date: ‚Üí 'Blood test'\n"
        "‚Ä¢ If document contains NO date: ‚Üí 'Lumbar spine MRI'\n\n"
        
        "DOCUMENT TEXT TO ANALYZE:\n"
        f"{text[:1500]}"
    )

    response = await client.chat.completions.create(  # üîÑ await
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": f"{title_prompt}\n\n{text}"}
        ],
        max_tokens=100,
        temperature=0.3
    )
    return response.choices[0].message.content.strip()

# FALLBACK –§–£–ù–ö–¶–ò–ò –æ—Å—Ç–∞—é—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º–∏
def fallback_summarize(text: str, lang: str = "ru") -> str:
    """–ü—Ä–æ—Å—Ç–æ–µ —Ä–µ–∑—é–º–µ –±–µ–∑ –ò–ò –µ—Å–ª–∏ OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
    today_str = datetime.now().strftime("%d.%m.%Y")
    words = text.split()
    if len(words) > 100:
        summary = " ".join(words[:100]) + "..."
    else:
        summary = text
    return f"[{today_str}] {summary}"

async def check_openai_status() -> bool:  # üîÑ async
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ OpenAI API"""
    try:
        response = await client.chat.completions.create(  # üîÑ await
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": "ping"}],
            max_tokens=1
        )
        return True
    except Exception:
        return False