# üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô upload.py - –≤—Å–µ –æ—à–∏–±–∫–∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã

import os
import html
import logging
from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from save_utils import send_to_gpt_vision, convert_pdf_to_images
from gpt import ask_structured, is_medical_text, generate_medical_summary, generate_title_from_text, extract_text_from_image
from db_postgresql import save_document, get_user_language, t
from registration import user_states
from vector_db_postgresql import split_into_chunks, add_chunks_to_vector_db
# ‚ùå –£–î–ê–õ–ò–¢–¨: from subscription_manager import spend_document_limit, SubscriptionManager
from file_utils import validate_file_size, validate_file_extension, create_simple_file_path

logger = logging.getLogger(__name__)

async def handle_document_upload(message: types.Message, bot):
    user_id = message.from_user.id
    user_states[user_id] = None
    lang = await get_user_language(user_id)

    # ‚úÖ –°–ù–ê–ß–ê–õ–ê –±—ã—Å—Ç—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–ï–ó —Ç—Ä–∞—Ç –ª–∏–º–∏—Ç–æ–≤
    if message.content_type not in [types.ContentType.DOCUMENT, types.ContentType.PHOTO]:
        await message.answer(t("unrecognized_document", lang))
        return

    # ‚úÖ –ü–û–¢–û–ú –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
    from rate_limiter import check_rate_limit, record_user_action
    
    allowed, error_msg = await check_rate_limit(user_id, "document")
    if not allowed:
        await message.answer(error_msg)
        return
    
    from keyboards import show_main_menu
    await show_main_menu(message, lang)

    try:
        file = message.document or message.photo[-1]
        file_id = file.file_id
        file_info = await bot.get_file(file_id)
        file_path = file_info.file_path

        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ò–ú–ï–ù–ò –§–ê–ô–õ–ê
        if hasattr(file, "file_name") and file.file_name:
            original_filename = file.file_name
        else:
            # –î–ª—è —Ñ–æ—Ç–æ –±–µ–∑ –∏–º–µ–Ω–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–º—è
            original_filename = f"document_{file_id[:8]}.jpg"

        # ‚úÖ –°–û–ó–î–ê–ù–ò–ï –ë–ï–ó–û–ü–ê–°–ù–û–ì–û –ü–£–¢–ò - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Ñ—É–Ω–∫—Ü–∏—é
        try:
            local_file = create_simple_file_path(user_id, original_filename)
        except ValueError as e:
            # –õ–æ–∫–∞–ª–∏–∑—É–µ–º –æ—à–∏–±–∫–∏ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
            error_key = {
                "Empty filename": "file_empty_name_error",
                "Invalid filename: contains dangerous characters": "file_invalid_name_error", 
                "Filename too long": "file_name_too_long_error",
                "File path outside allowed directory": "file_path_security_error",
            }.get(str(e), "file_creation_error")
            await message.answer(t(error_key, lang))
            return  # ‚Üê –ù–ï –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ª–∏–º–∏—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø—É—Ç–∏
        except Exception as e:
            await message.answer(t("file_creation_error", lang))
            return  # ‚Üê –ù–ï –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ª–∏–º–∏—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ

        # –°–ö–ê–ß–ò–í–ê–ù–ò–ï –§–ê–ô–õ–ê
        await bot.download_file(file_path, destination=local_file)

        # –ü–†–û–í–ï–†–ö–ê –†–ê–ó–ú–ï–†–ê –§–ê–ô–õ–ê –ü–û–°–õ–ï –°–ö–ê–ß–ò–í–ê–ù–ò–Ø
        if not validate_file_size(local_file):
            os.remove(local_file)  # –£–¥–∞–ª—è–µ–º —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª
            await message.answer(t("file_too_large", lang))
            return  # ‚Üê –ù–ï –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        file_ext = os.path.splitext(original_filename.lower())[1]
        if not file_ext:
            file_ext = '.jpg'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        file_type = "pdf" if file_ext == ".pdf" else "image"

        await message.answer(t("document_received", lang))

        # –û–ë–†–ê–ë–û–¢–ö–ê –§–ê–ô–õ–ê
        if file_ext == '.pdf':
            try:
                image_paths = convert_pdf_to_images(local_file, output_dir=f"files/{user_id}/pages")
                if not image_paths:
                    await message.answer(t("pdf_read_failed", lang))
                    return  # ‚Üê –ù–ï –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ª–∏–º–∏—Ç –µ—Å–ª–∏ PDF –Ω–µ—á–∏—Ç–∞–µ–º—ã–π
                if len(image_paths) > 5:
                    await message.answer(t("file_too_many_pages", lang, pages=len(image_paths)))
                    image_paths = image_paths[:5]

                vision_text = ""
                for img_path in image_paths:
                    page_text, _ = await send_to_gpt_vision(img_path)
                    vision_text += page_text + "\n\n"

                vision_text = vision_text.strip()
            except Exception as e:
                await message.answer(t("pdf_processing_error", lang))
                return  # ‚Üê –ù–ï –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ª–∏–º–∏—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ PDF
        else:
            try:
                vision_text, _ = await send_to_gpt_vision(local_file)
            except Exception as e:
                await message.answer(t("image_analysis_error", lang))
                return  # ‚Üê –ù–ï –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ª–∏–º–∏—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

        if not await is_medical_text(vision_text):
            await message.answer(t("not_medical_doc", lang))
            return  # ‚Üê –ù–ï –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –Ω–µ–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        
        # ‚úÖ –ù–û–í–´–ô –ü–û–†–Ø–î–û–ö: –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫!
        auto_title = await generate_title_from_text(text=vision_text[:1500], lang=lang)
        
        # ‚úÖ –ó–∞—Ç–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ë–ï–ó –∑–∞–≥–æ–ª–æ–≤–∫–∞
        raw_text = await ask_structured(vision_text[:8000], lang=lang)
        
        # ‚úÖ –ò —Ä–µ–∑—é–º–µ –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã
        summary = await generate_medical_summary(vision_text[:8000], lang)

        if raw_text:
            # ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–∑–±–∏–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            from gpt import safe_telegram_text, split_long_message
            
            # ‚úÖ –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ 
            formatted_text = safe_telegram_text(raw_text)
            
            # ‚úÖ –ù–û–í–û–ï: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∫–ª—é—á–∞–µ–º –≤ header —Å–æ–æ–±—â–µ–Ω–∏—è
            header = f"{t('vision_read_text', lang)}\n ¬´{auto_title}¬ª"
            full_text = f"{header}\n\n{formatted_text}"
            
            # ‚úÖ –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
            message_parts = split_long_message(full_text, max_length=4000)
            
            # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
            for i, part in enumerate(message_parts):
                try:
                    await message.answer(part, parse_mode="HTML")
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                    if i < len(message_parts) - 1:  # –ù–µ –∂–¥–µ–º –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
                        import asyncio
                        await asyncio.sleep(0.5)
                        
                except Exception as e:
                    # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    try:
                        plain_text = part.replace('<b>', '').replace('</b>', '').replace('<i>', '').replace('</i>', '')
                        await message.answer(plain_text)
                    except Exception as fallback_error:
                        await message.answer(t("display_error", lang))
        else:
            await message.answer(t("vision_failed", lang))
            return  # ‚Üê –ù–ï –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ª–∏–º–∏—Ç –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å

        document_id = await save_document(
            user_id=user_id,
            title=auto_title,
            file_path=local_file,
            file_type=file_type,
            raw_text=raw_text,
            summary=summary
        )
        
        chunks = await split_into_chunks(summary, document_id, user_id)
        await add_chunks_to_vector_db(document_id, user_id, chunks)

        try:
            
            from medical_timeline import update_medical_timeline_on_document_upload
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π
            medical_timeline_success = await update_medical_timeline_on_document_upload(
                user_id=user_id,
                document_id=document_id,
                document_text=raw_text,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
                use_gemini=False  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é GPT, –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            )

        except Exception as e:
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –º–µ–¥–∫–∞—Ä—Ç—ã
            from error_handler import log_error_with_context
            log_error_with_context(e, {
                "function": "medical_timeline_update", 
                "user_id": user_id, 
                "document_id": document_id
            })

        # ‚úÖ –ó–ê–ü–ò–°–´–í–ê–ï–ú –õ–ò–ú–ò–¢ –¢–û–õ–¨–ö–û –ü–û–°–õ–ï –ü–û–õ–ù–û–ô –£–°–ü–ï–®–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–ò
        await record_user_action(user_id, "document")
        logger.info(f"‚úÖ Rate limiter –∑–∞–ø–∏—Å–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

        from subscription_manager import SubscriptionManager
        await SubscriptionManager.spend_limits(user_id, documents=1)
        logger.info(f"‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Å–ø–∏—Å–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

        await message.answer(t("document_saved", lang, title=auto_title), parse_mode="HTML")

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=t("rename_doc_button", lang), callback_data=f"rename_{document_id}")],
            [InlineKeyboardButton(text=t("delete_doc_button", lang), callback_data=f"delete_{document_id}")]
        ])

        await message.answer(
            t("next_steps_info", lang),
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        user_states[user_id] = None


    except Exception as e:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
        from error_handler import log_error_with_context
        log_error_with_context(e, {
            "function": "document_processing",
            "user_id": getattr(message, 'from_user', {}).id if hasattr(message, 'from_user') else None,
            "file_type": "document"  # –±–µ–∑ –¥–µ—Ç–∞–ª–µ–π —Ñ–∞–π–ª–∞
        })
        
        await message.answer(t("processing_error", lang))