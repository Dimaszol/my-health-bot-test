# upload.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –ª—É—á—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ñ–∞–π–ª–æ–≤

import os
import html
from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from save_utils import send_to_gpt_vision, convert_pdf_to_images
from gpt import ask_gpt, ask_structured, is_medical_text, generate_medical_summary, generate_title_from_text, extract_text_from_image
from db import save_document, get_user_language, t
from registration import user_states
from vector_utils import split_into_chunks, add_chunks_to_vector_db

# –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ò–ú–ü–û–†–¢ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
from file_utils import validate_file_size, validate_file_extension, create_simple_file_path

async def handle_document_upload(message: types.Message, bot):
    user_id = message.from_user.id
    user_states[user_id] = None
    lang = await get_user_language(user_id)
    
    try:
        print(f"\nüìÑ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        if message.content_type not in [types.ContentType.DOCUMENT, types.ContentType.PHOTO]:
            await message.answer(t("unrecognized_document", lang))
            return

        file = message.document or message.photo[-1]
        file_id = file.file_id
        file_info = await bot.get_file(file_id)
        file_path = file_info.file_path

        print(f"üìÅ File info: {file_info}")

        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ò–ú–ï–ù–ò –§–ê–ô–õ–ê
        if hasattr(file, "file_name") and file.file_name:
            original_filename = file.file_name
            print(f"üìù –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞: {original_filename}")
        else:
            # –î–ª—è —Ñ–æ—Ç–æ –±–µ–∑ –∏–º–µ–Ω–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–º—è
            original_filename = f"document_{file_id[:8]}.jpg"
            print(f"üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞: {original_filename}")

        # ‚úÖ –°–û–ó–î–ê–ù–ò–ï –ë–ï–ó–û–ü–ê–°–ù–û–ì–û –ü–£–¢–ò - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Ñ—É–Ω–∫—Ü–∏—é
        try:
            local_file = create_simple_file_path(user_id, original_filename)
            print(f"üíæ –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {local_file}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—É—Ç–∏: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞: {str(e)}")
            return

        # –°–ö–ê–ß–ò–í–ê–ù–ò–ï –§–ê–ô–õ–ê
        print("‚¨áÔ∏è –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞...")
        await bot.download_file(file_path, destination=local_file)
        print("‚úÖ –§–∞–π–ª —Å–∫–∞—á–∞–Ω —É—Å–ø–µ—à–Ω–æ")

        # –ü–†–û–í–ï–†–ö–ê –†–ê–ó–ú–ï–†–ê –§–ê–ô–õ–ê –ü–û–°–õ–ï –°–ö–ê–ß–ò–í–ê–ù–ò–Ø
        if not validate_file_size(local_file):
            os.remove(local_file)  # –£–¥–∞–ª—è–µ–º —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª
            await message.answer("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 5 –ú–ë")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        file_ext = os.path.splitext(original_filename.lower())[1]
        if not file_ext:
            file_ext = '.jpg'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        file_type = "pdf" if file_ext == ".pdf" else "image"
        print(f"üìã –¢–∏–ø —Ñ–∞–π–ª–∞: {file_type} (—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ: {file_ext})")

        await message.answer(t("document_received", lang))

        # –û–ë–†–ê–ë–û–¢–ö–ê –§–ê–ô–õ–ê
        if file_ext == '.pdf':
            print("üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é PDF...")
            try:
                image_paths = convert_pdf_to_images(local_file, output_dir=f"files/{user_id}/pages")
                if not image_paths:
                    await message.answer(t("pdf_read_failed", lang))
                    return
                if len(image_paths) > 5:
                    await message.answer(t("file_too_many_pages", lang, pages=len(image_paths)))
                    image_paths = image_paths[:5]

                vision_text = ""
                for img_path in image_paths:
                    page_text, _ = await send_to_gpt_vision(img_path)
                    vision_text += page_text + "\n\n"

                vision_text = vision_text.strip()
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF: {e}")
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF —Ñ–∞–π–ª–∞")
                return
        else:
            print("üñºÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
            try:
                vision_text, _ = await send_to_gpt_vision(local_file)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                return

        print("üîç –ü—Ä–æ–≤–µ—Ä—è—é, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º...")
        if not await is_medical_text(vision_text):
            await message.answer(t("not_medical_doc", lang))
            return

        print("üìù –°–æ–∑–¥–∞—é —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ —Ä–µ–∑—é–º–µ...")
        raw_text = await ask_structured(vision_text[:3000], lang=lang)
        summary = await generate_medical_summary(vision_text[:3000], lang)

        if raw_text:
            clean_text = html.escape(raw_text[:2000])
            await message.answer(t("vision_read_text", lang) + "\n\n" + clean_text, parse_mode="HTML")
        else:
            await message.answer(t("vision_failed", lang))
            return

        print("üè∑Ô∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∑–∞–≥–æ–ª–æ–≤–æ–∫...")
        auto_title = await generate_title_from_text(text=raw_text[:1500], lang=lang)

        print("üíæ –°–æ—Ö—Ä–∞–Ω—è—é –¥–æ–∫—É–º–µ–Ω—Ç –≤ –ë–î...")
        document_id = await save_document(
            user_id=user_id,
            title=auto_title,
            file_path=local_file,
            file_type=file_type,
            raw_text=raw_text,
            summary=summary
        )
        
        print("üß† –î–æ–±–∞–≤–ª—è—é –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É...")
        chunks = await split_into_chunks(summary, document_id, user_id)
        add_chunks_to_vector_db(chunks)

        await message.answer(t("document_saved", lang, title=auto_title), parse_mode="HTML")

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=t("view_full_text_button", lang), callback_data=f"view_{document_id}")],
            [InlineKeyboardButton(text=t("rename_doc_button", lang), callback_data=f"rename_{document_id}")],
            [InlineKeyboardButton(text=t("delete_doc_button", lang), callback_data=f"delete_{document_id}")]
        ])

        await message.answer(
            "‚ÑπÔ∏è –ß—Ç–æ –¥–∞–ª—å—à–µ?\n\n"
            "‚ñ∏ –ù–∞–∂–º–∏ <b>¬´–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–µ—Å—å –¥–æ–∫—É–º–µ–Ω—Ç¬ª</b>, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å—ë, —á—Ç–æ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å\n"
            "‚ñ∏ –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø–æ–ª—É—á–∏–ª—Å—è –Ω–µ—á–∏—Ç–∞–µ–º—ã–º ‚Äî –Ω–∞–∂–º–∏ <b>¬´–£–¥–∞–ª–∏—Ç—å¬ª</b> –∏ –ø–æ–ø—Ä–æ–±—É–π –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –ø–æ–ª—É—á—à–µ\n"
            "‚ñ∏ –ú–æ–∂–Ω–æ <b>–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å</b> –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞",
            reply_markup=keyboard,
            parse_mode="HTML"
        )

        print("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")

    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        import traceback
        print(f"üìä –ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def handle_image_analysis(message: types.Message, bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    user_id = message.from_user.id
    user_states[user_id] = None
    lang = await get_user_language(user_id)

    try:
        print(f"\nüñºÔ∏è –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        if message.content_type not in [types.ContentType.DOCUMENT, types.ContentType.PHOTO]:
            await message.answer(t("unrecognized_document", lang))
            return

        file = message.document or message.photo[-1]
        file_id = file.file_id
        file_info = await bot.get_file(file_id)
        file_path = file_info.file_path

        print(f"üìÅ File info: {file_info}")

        # ‚úÖ –ë–ï–ó–û–ü–ê–°–ù–û–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ò–ú–ï–ù–ò –§–ê–ô–õ–ê
        if hasattr(file, "file_name") and file.file_name:
            original_filename = file.file_name
            print(f"üìù –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞: {original_filename}")
        else:
            original_filename = f"scan_{file_id[:8]}.jpg"
            print(f"üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞: {original_filename}")

        # ‚úÖ –°–û–ó–î–ê–ù–ò–ï –ü–£–¢–ò - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Ñ—É–Ω–∫—Ü–∏—é
        try:
            local_file = create_simple_file_path(user_id, original_filename)
            print(f"üíæ –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {local_file}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—É—Ç–∏: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞: {str(e)}")
            return

        print("‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª...")
        await bot.download_file(file_path, destination=local_file)
        print("‚úÖ –§–∞–π–ª —Å–∫–∞—á–∞–Ω")

        if not validate_file_size(local_file):
            os.remove(local_file)
            await message.answer("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 5 –ú–ë")
            return

        await message.answer(t("image_processing", lang))

        # –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –¢–ò–ü–ê –§–ê–ô–õ–ê –ò –û–ë–†–ê–ë–û–¢–ö–ê
        file_ext = os.path.splitext(original_filename.lower())[1]
        if not file_ext:
            file_ext = '.jpg'
            
        image_path = None
        
        if file_ext == '.pdf':
            print("üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é PDF —Å–Ω–∏–º–æ–∫...")
            try:
                image_paths = convert_pdf_to_images(local_file, output_dir=f"files/{user_id}/pages")
                if not image_paths:
                    await message.answer(t("pdf_read_failed", lang))
                    return
                if len(image_paths) > 1:
                    await message.answer(t("pdf_single_page_only", lang))
                    return
                image_path = image_paths[0]
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF: {e}")
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF —Ñ–∞–π–ª–∞")
                return
        else:
            image_path = local_file

        print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é GPT Vision...")
        from gpt import send_to_gpt_vision
        try:
            vision_text, _ = await send_to_gpt_vision(image_path, lang=lang)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ GPT Vision: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ò–ò")
            return
        
        if not vision_text:
            await message.answer(t("vision_failed_response", lang))
            return

        print("üîç –ü—Ä–æ–≤–µ—Ä—è—é –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç...")
        if not await is_medical_text(vision_text):
            await message.answer(t("not_medical_doc1", lang))
            return
        
        print("üìù –°–æ–∑–¥–∞—é —Ä–µ–∑—é–º–µ –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫...")
        summary = await generate_medical_summary(vision_text[:3000], lang)
        title = await generate_title_from_text(text=vision_text[:1500], lang=lang)

        clean_text = html.escape(vision_text[:2000])
        await message.answer(t("image_vision_text", lang) + "\n\n" + clean_text, parse_mode="HTML")

        print("üíæ –°–æ—Ö—Ä–∞–Ω—è—é –≤ –ë–î...")
        document_id = await save_document(
            user_id=user_id,
            title=title,
            file_path=local_file,
            file_type="image",
            raw_text=vision_text,
            summary=summary,
            confirmed=True
        )

        print("üß† –î–æ–±–∞–≤–ª—è—é –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É...")
        chunks = await split_into_chunks(summary, document_id, user_id)
        add_chunks_to_vector_db(chunks)

        await message.answer(t("image_saved", lang, title=title), parse_mode="HTML")
        
        from documents import send_note_controls
        await send_note_controls(message, document_id)

        print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")

    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        import traceback
        print(f"üìä –ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")