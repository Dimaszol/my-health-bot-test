# supabase_storage.py - –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –Ω–∞ Supabase

import os
import uuid
import logging
from typing import Tuple, Optional
try:
    from supabase import create_client, Client
except ImportError:
    print("‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ supabase –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install supabase==2.8.1")
    raise
from pathlib import Path

logger = logging.getLogger(__name__)

class SupabaseStorage:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Ñ–∞–π–ª–æ–≤ –Ω–∞ Supabase Storage –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –±–æ—Ç–∞"""
    
    def __init__(self):
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        supabase_url = os.getenv("SUPABASE_URL")
        supabase_key = os.getenv("SUPABASE_SERVICE_KEY")
        
        if not supabase_url or not supabase_key:
            raise Exception("‚ùå SUPABASE_URL –∏ SUPABASE_SERVICE_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ .env —Ñ–∞–π–ª–µ")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase
        self.supabase: Client = create_client(supabase_url, supabase_key)
        self.bucket_name = "medical-documents"
        
        logger.info(f"‚úÖ Supabase Storage –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {self.bucket_name}")
    
    def _generate_file_path(self, user_id: int, filename: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        –§–æ—Ä–º–∞—Ç: users/{user_id}/{uuid}_{filename}
        """
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Ñ–∞–π–ª–∞
        file_uuid = str(uuid.uuid4())[:8]
        
        # –û—á–∏—â–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        safe_filename = "".join(c for c in filename if c.isalnum() or c in ".-_").strip()
        if not safe_filename:
            safe_filename = "document"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å: users/123456/abc12345_document.pdf
        return f"users/{user_id}/{file_uuid}_{safe_filename}"
    
    async def upload_file(self, user_id: int, file_path: str, filename: str) -> Tuple[bool, str]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –≤ Supabase Storage
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            file_path: –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            filename: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            
        Returns:
            Tuple[bool, str]: (—É—Å–ø–µ—Ö, –ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É_–∏–ª–∏_–æ—à–∏–±–∫–∞)
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not os.path.exists(file_path):
                return False, f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}"
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—É—Ç—å –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            storage_path = self._generate_file_path(user_id, filename)
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–Ø–ï–ú –ß–¢–ï–ù–ò–ï –§–ê–ô–õ–ê
            with open(file_path, 'rb') as file:
                file_data = file.read()
            
            # ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú –ß–¢–û file_data —ç—Ç–æ bytes
            if not isinstance(file_data, bytes):
                return False, f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö"
            
            logger.info(f"üîç [DEBUG] –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª: {len(file_data)} bytes")
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–Ø–ï–ú –ó–ê–ì–†–£–ó–ö–£ –í SUPABASE - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            try:
                # –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–µ–∑ file_options
                response = self.supabase.storage.from_(self.bucket_name).upload(
                    path=storage_path,
                    file=file_data
                )
                
                logger.info(f"üîç [DEBUG] Supabase response type: {type(response)}")
                logger.info(f"üîç [DEBUG] Supabase response: {response}")
                
                # ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢
                if response is None:
                    return False, "Supabase –≤–µ—Ä–Ω—É–ª None"
                
                # Supabase –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å —Å–ª–æ–≤–∞—Ä—å —Å –ø—É—Ç–µ–º –∫ —Ñ–∞–π–ª—É
                if isinstance(response, dict):
                    if 'error' in response and response['error']:
                        return False, f"Supabase error: {response['error']}"
                    
                    logger.info(f"‚úÖ [SUPABASE] –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {storage_path}")
                    return True, storage_path
                else:
                    logger.info(f"‚úÖ [SUPABASE] –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω (–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞): {storage_path}")
                    return True, storage_path
                
            except Exception as upload_error:
                logger.error(f"‚ùå [SUPABASE] –û—à–∏–±–∫–∞ API: {upload_error}")
                
                # –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏
                    import io
                    file_like = io.BytesIO(file_data)
                    
                    response2 = self.supabase.storage.from_(self.bucket_name).upload(
                        path=storage_path,
                        file=file_like
                    )
                    
                    logger.info(f"‚úÖ [SUPABASE] –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω (—Å–ø–æ—Å–æ–± 2): {storage_path}")
                    return True, storage_path
                    
                except Exception as e2:
                    logger.error(f"‚ùå [SUPABASE] –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —Ç–æ–∂–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e2}")
                    return False, f"Both upload methods failed: {str(upload_error)}, {str(e2)}"
            
        except Exception as e:
            logger.error(f"‚ùå [SUPABASE] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            return False, str(e)
    
    async def download_file(self, storage_path: str, local_path: str) -> bool:
        """
        –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ Supabase Storage
        
        Args:
            storage_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            local_path: –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            
        Returns:
            bool: –£—Å–ø–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            response = self.supabase.storage.from_(self.bucket_name).download(storage_path)
            
            # ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú –ß–¢–û –ü–û–õ–£–ß–ò–õ–ò BYTES
            if not isinstance(response, bytes):
                logger.error(f"‚ùå [SUPABASE] –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞: {type(response)}")
                return False
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
            os.makedirs(os.path.dirname(local_path), exist_ok=True)
            
            with open(local_path, 'wb') as file:
                file.write(response)
            
            logger.info(f"‚úÖ [SUPABASE] –§–∞–π–ª —Å–∫–∞—á–∞–Ω: {storage_path} ‚Üí {local_path}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå [SUPABASE] –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            return False
    
    async def delete_file(self, storage_path: str) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª –∏–∑ Supabase Storage
        
        Args:
            storage_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            
        Returns:
            bool: –£—Å–ø–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            self.supabase.storage.from_(self.bucket_name).remove([storage_path])
            
            logger.info(f"‚úÖ [SUPABASE] –§–∞–π–ª —É–¥–∞–ª–µ–Ω: {storage_path}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå [SUPABASE] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            return False
    
    def get_public_url(self, storage_path: str) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª (–µ—Å–ª–∏ bucket –ø—É–±–ª–∏—á–Ω—ã–π)
        
        Args:
            storage_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            
        Returns:
            str: –ü—É–±–ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞
        """
        try:
            response = self.supabase.storage.from_(self.bucket_name).get_public_url(storage_path)
            return response
        except Exception as e:
            logger.error(f"‚ùå [SUPABASE] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è URL: {e}")
            return ""
    
    def _get_content_type(self, filename: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç MIME-—Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é"""
        ext = Path(filename).suffix.lower()
        content_types = {
            '.pdf': 'application/pdf',
            '.jpg': 'image/jpeg',
            '.jpeg': 'image/jpeg',
            '.png': 'image/png',
            '.webp': 'image/webp',
            '.txt': 'text/plain',
            '.docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
        }
        return content_types.get(ext, 'application/octet-stream')

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
storage_manager = None

def get_storage_manager() -> SupabaseStorage:
    """–ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (Singleton)"""
    global storage_manager
    if storage_manager is None:
        storage_manager = SupabaseStorage()
    return storage_manager