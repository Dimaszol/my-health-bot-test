# db_pool.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ async –≤—ã–∑–æ–≤–∞–º–∏

import asyncio
import aiosqlite
import logging
from typing import Any, Optional, List, Dict, AsyncGenerator
from contextlib import asynccontextmanager
from datetime import datetime
import threading
from pathlib import Path

logger = logging.getLogger(__name__)

class DatabasePool:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å SQLite
    """
    
    def __init__(self, db_path: str = "users.db", max_connections: int = 10):
        self.db_path = db_path
        self.max_connections = max_connections
        self._pool: List[aiosqlite.Connection] = []
        self._in_use: set = set()
        self._lock = asyncio.Lock()
        self._connection_count = 0
        self._stats = {
            "total_requests": 0,
            "active_connections": 0,
            "max_connections_used": 0
        }
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞"""
        logger.info(f"üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ –ë–î: {self.max_connections} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        initial_connections = min(3, self.max_connections)
        for _ in range(initial_connections):
            conn = await self._create_connection()
            self._pool.append(conn)
            
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(self._pool)} –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
    
    async def _create_connection(self) -> aiosqlite.Connection:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
        conn = await aiosqlite.connect(
            self.db_path,
            timeout=30.0,
            isolation_level=None  # autocommit mode –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        )
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è SQLite –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        await conn.execute("PRAGMA journal_mode=WAL")  # Write-Ahead Logging
        await conn.execute("PRAGMA synchronous=NORMAL")  # –ë–∞–ª–∞–Ω—Å —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏  
        await conn.execute("PRAGMA cache_size=10000")    # –ë–æ–ª—å—à–µ –∫—ç—à–∞
        await conn.execute("PRAGMA temp_store=MEMORY")   # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏
        await conn.execute("PRAGMA foreign_keys=ON")     # –í–∫–ª—é—á–∞–µ–º foreign keys
        
        self._connection_count += 1
        logger.debug(f"üì° –°–æ–∑–¥–∞–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ #{self._connection_count}")
        return conn
    
    @asynccontextmanager
    async def get_connection(self) -> AsyncGenerator[aiosqlite.Connection, None]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑ –ø—É–ª–∞
        
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
        async with pool.get_connection() as conn:
            cursor = await conn.execute("SELECT * FROM users")
            result = await cursor.fetchall()
        """
        conn = None
        try:
            conn = await self._acquire_connection()
            self._stats["total_requests"] += 1
            self._stats["active_connections"] = len(self._in_use)
            self._stats["max_connections_used"] = max(
                self._stats["max_connections_used"], 
                len(self._in_use)
            )
            
            yield conn
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î: {e}")
            # –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–ª–æ–º–∞–ª–æ—Å—å, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –µ–≥–æ
            if conn and conn in self._in_use:
                self._in_use.remove(conn)
                try:
                    await conn.close()
                except:
                    pass
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–∞ –∑–∞–º–µ–Ω—É
                asyncio.create_task(self._replace_connection())
            raise
            
        finally:
            if conn:
                await self._release_connection(conn)
    
    async def _acquire_connection(self) -> aiosqlite.Connection:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑ –ø—É–ª–∞"""
        async with self._lock:
            # –ü—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å –≥–æ—Ç–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            if self._pool:
                conn = self._pool.pop()
                self._in_use.add(conn)
                logger.debug(f"üì° –í–∑—è—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ –ø—É–ª–∞ ({len(self._pool)} –æ—Å—Ç–∞–ª–æ—Å—å)")
                return conn
            
            # –ï—Å–ª–∏ –ø—É–ª –ø—É—Å—Ç, –Ω–æ –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            if len(self._in_use) < self.max_connections:
                conn = await self._create_connection()
                self._in_use.add(conn)
                logger.debug(f"üì° –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ ({len(self._in_use)} –∞–∫—Ç–∏–≤–Ω—ã—Ö)")
                return conn
            
            # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞, –∂–¥–µ–º –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è
            logger.warning(f"‚è≥ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π ({self.max_connections}), –æ–∂–∏–¥–∞–Ω–∏–µ...")
        
        # –ñ–¥–µ–º –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        while True:
            await asyncio.sleep(0.01)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            async with self._lock:
                if self._pool:
                    conn = self._pool.pop()
                    self._in_use.add(conn)
                    return conn
    
    async def _release_connection(self, conn: aiosqlite.Connection):
        """–í–æ–∑–≤—Ä–∞—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ –ø—É–ª"""
        async with self._lock:
            if conn in self._in_use:
                self._in_use.remove(conn)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–µ
                try:
                    await conn.execute("SELECT 1")
                    self._pool.append(conn)
                    logger.debug(f"üì° –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –≤ –ø—É–ª ({len(self._pool)} –¥–æ—Å—Ç—É–ø–Ω–æ)")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: {e}")
                    try:
                        await conn.close()
                    except:
                        pass
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–º–µ–Ω—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                    asyncio.create_task(self._replace_connection())
    
    async def _replace_connection(self):
        """–ó–∞–º–µ–Ω–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            new_conn = await self._create_connection()
            async with self._lock:
                self._pool.append(new_conn)
                logger.info("üîß –°–æ–∑–¥–∞–Ω–æ –∑–∞–º–µ—â–∞—é—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—â–∞—é—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: {e}")
    
    async def close_all(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        logger.info("üîê –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ë–î...")
        
        async with self._lock:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ –ø—É–ª–µ
            for conn in self._pool:
                try:
                    await conn.close()
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            for conn in self._in_use.copy():
                try:
                    await conn.close()
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            
            self._pool.clear()
            self._in_use.clear()
            
        logger.info("‚úÖ –í—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã")
    
    def get_stats(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–ª–∞"""
        return {
            "total_requests": self._stats["total_requests"],
            "active_connections": len(self._in_use),
            "available_connections": len(self._pool),
            "max_connections_used": self._stats["max_connections_used"],
            "max_connections_limit": self.max_connections,
            "total_connections_created": self._connection_count
        }
    
    async def health_check(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—É–ª–∞"""
        try:
            async with self.get_connection() as conn:
                cursor = await conn.execute("SELECT 1")
                result = await cursor.fetchone()
                return result == (1,)
        except Exception as e:
            logger.error(f"‚ùå Health check failed: {e}")
            return False


# üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—É–ª–∞
db_pool: Optional[DatabasePool] = None

async def initialize_db_pool(db_path: str = "users.db", max_connections: int = 10):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø—É–ª–∞ –ë–î"""
    global db_pool
    
    if db_pool is not None:
        await db_pool.close_all()
    
    db_pool = DatabasePool(db_path, max_connections)
    await db_pool.initialize()
    
    logger.info(f"üöÄ Database pool –≥–æ—Ç–æ–≤: {max_connections} max connections")

async def get_db_connection():  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å async
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø—É–ª–∞"""
    if db_pool is None:
        raise RuntimeError("Database pool –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω! –í—ã–∑–æ–≤–∏—Ç–µ initialize_db_pool()")
    
    return db_pool.get_connection()

async def close_db_pool():
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø—É–ª–∞"""
    global db_pool
    if db_pool:
        await db_pool.close_all()
        db_pool = None

def get_db_stats() -> Dict[str, Any]:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø—É–ª–∞"""
    if db_pool:
        return db_pool.get_stats()
    return {"error": "Pool not initialized"}

async def db_health_check() -> bool:
    """Health check –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø—É–ª–∞"""
    if db_pool:
        return await db_pool.health_check()
    return False


# üîß –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏

async def execute_query(query: str, params: tuple = ()) -> int:
    """
    –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (INSERT, UPDATE, DELETE)
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç rowcount
    """
    async with await get_db_connection() as conn:  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω await
        cursor = await conn.execute(query, params)
        await conn.commit()
        return cursor.rowcount

async def fetch_one(query: str, params: tuple = ()) -> Optional[tuple]:
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SELECT –∑–∞–ø—Ä–æ—Å–∞, –≤–æ–∑–≤—Ä–∞—Ç –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    async with await get_db_connection() as conn:  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω await
        cursor = await conn.execute(query, params)
        return await cursor.fetchone()

async def fetch_all(query: str, params: tuple = ()) -> List[tuple]:
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SELECT –∑–∞–ø—Ä–æ—Å–∞, –≤–æ–∑–≤—Ä–∞—Ç –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫"""
    async with await get_db_connection() as conn:  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω await
        cursor = await conn.execute(query, params)
        return await cursor.fetchall()

async def insert_and_get_id(query: str, params: tuple = ()) -> int:
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ INSERT –∏ –≤–æ–∑–≤—Ä–∞—Ç lastrowid"""
    async with await get_db_connection() as conn:  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω await
        cursor = await conn.execute(query, params)
        await conn.commit()
        return cursor.lastrowid


# üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì –ò –û–¢–õ–ê–î–ö–ê

class DatabaseMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ë–î"""
    
    def __init__(self):
        self.slow_queries = []
        self.error_count = 0
        
    async def log_slow_query(self, query: str, duration: float, threshold: float = 1.0):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if duration > threshold:
            self.slow_queries.append({
                "query": query[:100] + "..." if len(query) > 100 else query,
                "duration": round(duration, 3),
                "timestamp": datetime.now().isoformat()
            })
            logger.warning(f"üêå –ú–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å ({duration:.3f}s): {query[:100]}")
            
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            if len(self.slow_queries) > 10:
                self.slow_queries = self.slow_queries[-10:]
    
    def log_error(self, error: Exception, query: str = ""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –ë–î"""
        self.error_count += 1
        logger.error(f"‚ùå DB Error #{self.error_count}: {error}")
        if query:
            logger.error(f"Query: {query[:200]}")
    
    def get_stats(self) -> Dict:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∞"""
        return {
            "slow_queries_count": len(self.slow_queries),
            "recent_slow_queries": self.slow_queries[-3:],  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3
            "total_errors": self.error_count
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä
db_monitor = DatabaseMonitor()

# üß™ –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø

async def test_database_pool():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ database pool...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        await initialize_db_pool(max_connections=3)
        
        # Health check
        healthy = await db_health_check()
        print(f"Health check: {'‚úÖ' if healthy else '‚ùå'}")
        
        # –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        result = await fetch_one("SELECT 1 as test")
        print(f"Simple query: {'‚úÖ' if result == (1,) else '‚ùå'}")
        
        # –¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        async def test_concurrent():
            async with await get_db_connection() as conn:  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û
                cursor = await conn.execute("SELECT COUNT(*) FROM users")
                result = await cursor.fetchone()
                return result[0] if result else 0
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º 5 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        tasks = [test_concurrent() for _ in range(5)]
        results = await asyncio.gather(*tasks)
        print(f"Concurrent queries: ‚úÖ ({len(results)} results)")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = get_db_stats()
        print(f"Pool stats: {stats}")
        
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")
        
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
    
    finally:
        await close_db_pool()

if __name__ == "__main__":
    asyncio.run(test_database_pool())