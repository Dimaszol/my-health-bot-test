# medical_timeline.py - –†–∞–±–æ—Ç–∞ —Å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π –ø–∞—Ü–∏–µ–Ω—Ç–∞

import json
import asyncio
from datetime import datetime, date
from typing import List, Dict, Optional, Tuple
from db_postgresql import get_db_connection, release_db_connection, t
from gpt import client, OPENAI_SEMAPHORE
from error_handler import log_error_with_context

# ==========================================
# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–•
# ==========================================

async def get_latest_medical_timeline(user_id: int, limit: int = 10) -> List[Dict]:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = await get_db_connection()
    try:
        query = """
        SELECT id, event_date, category, importance, description, source_document_id
        FROM medical_timeline 
        WHERE user_id = $1 
        ORDER BY event_date DESC, created_at DESC 
        LIMIT $2
        """
        
        rows = await conn.fetch(query, user_id, limit)
        
        timeline = []
        for row in rows:
            timeline.append({
                'id': row['id'],
                'event_date': row['event_date'].strftime('%d.%m.%Y') if row['event_date'] else '',
                'category': row['category'],
                'importance': row['importance'],
                'description': row['description'],
                'source_document_id': row['source_document_id']
            })
        
        return timeline
        
    except Exception as e:
        log_error_with_context(e, {"function": "get_latest_medical_timeline", "user_id": user_id})
        return []
    finally:
        await release_db_connection(conn)

async def delete_medical_timeline_entries(user_id: int, entry_ids: List[int]) -> bool:
    """–£–¥–∞–ª–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –∫–∞—Ä—Ç—ã"""
    if not entry_ids:
        return True
        
    conn = await get_db_connection()
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ –¥–ª—è SQL
        placeholders = ','.join([f'${i+2}' for i in range(len(entry_ids))])
        query = f"DELETE FROM medical_timeline WHERE user_id = $1 AND id IN ({placeholders})"
        
        await conn.execute(query, user_id, *entry_ids)
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(entry_ids)} –∑–∞–ø–∏—Å–µ–π –º–µ–¥–∫–∞—Ä—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return True
        
    except Exception as e:
        log_error_with_context(e, {"function": "delete_medical_timeline_entries", "user_id": user_id})
        return False
    finally:
        await release_db_connection(conn)

async def save_medical_timeline_entries(user_id: int, entries: List[Dict], source_document_id: int) -> bool:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –∫–∞—Ä—Ç—ã"""
    if not entries:
        return True
        
    conn = await get_db_connection()
    try:
        query = """
        INSERT INTO medical_timeline (user_id, source_document_id, event_date, category, importance, description)
        VALUES ($1, $2, $3, $4, $5, $6)
        """
        
        for entry in entries:
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
            event_date = datetime.now().date()  # fallback
            if 'event_date' in entry and entry['event_date']:
                try:
                    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç
                    date_str = entry['event_date']
                    for fmt in ('%d.%m.%Y', '%Y-%m-%d', '%d/%m/%Y'):
                        try:
                            event_date = datetime.strptime(date_str, fmt).date()
                            break
                        except ValueError:
                            continue
                except:
                    pass  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
            
            await conn.execute(
                query,
                user_id,
                source_document_id,
                event_date,
                entry.get('category', 'general'),
                entry.get('importance', 'normal'),
                entry.get('description', '')
            )
        
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(entries)} –∑–∞–ø–∏—Å–µ–π –º–µ–¥–∫–∞—Ä—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return True
        
    except Exception as e:
        log_error_with_context(e, {"function": "save_medical_timeline_entries", "user_id": user_id})
        return False
    finally:
        await release_db_connection(conn)

# ==========================================
# –§–£–ù–ö–¶–ò–ò –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –ß–ï–†–ï–ó GPT –ò GEMINI
# ==========================================

async def extract_medical_events_gpt(document_text: str, existing_timeline: List[Dict], lang: str = "ru") -> List[Dict]:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–• –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π —á–µ—Ä–µ–∑ GPT-4o-mini"""
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –º–µ–¥–∫–∞—Ä—Ç—É
    timeline_text = ""
    if existing_timeline:
        timeline_text = "\n".join([
            f"{entry['event_date']} | {entry['category']} | {entry['importance']} | \"{entry['description']}\""
            for entry in existing_timeline
        ])
    else:
        timeline_text = "–ú–µ–¥–∫–∞—Ä—Ç–∞ –ø—É—Å—Ç–∞—è"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –æ—Ç–≤–µ—Ç–∞
    lang_names = {
        'ru': 'Russian',
        'uk': 'Ukrainian',
        'en': 'English'
    }
    response_lang = lang_names.get(lang, 'Russian')
    
    system_prompt = f"""You are a medical timeline curator. Extract ONLY the most CRITICAL medical events that would be essential for any future doctor to know.

TASK: From the new document, extract MAXIMUM 1-2 most important medical facts and ADD them to existing timeline.

STRICT CRITERIA - Extract ONLY:
‚Ä¢ Life-threatening diagnoses (heart attack, stroke, cancer, etc.)
‚Ä¢ Major surgical procedures (operations, stent implantations, etc.)
‚Ä¢ Critical medication changes (new chronic medications)
‚Ä¢ Severe complications or hospitalizations
‚Ä¢ Major diagnostic findings that change treatment approach

CRITICAL IMPORTANCE RANKING:
‚Ä¢ "critical" = Life-threatening conditions, major surgery, emergency situations
‚Ä¢ "important" = Chronic conditions, significant procedures, key medications
‚Ä¢ "normal" = Routine findings (DO NOT EXTRACT unless exceptional)

EXAMPLES OF WHAT TO EXTRACT:
‚úÖ "–ò–Ω—Ñ–∞—Ä–∫—Ç –º–∏–æ–∫–∞—Ä–¥–∞, —Å—Ç–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ü–ö–ê" (critical)
‚úÖ "–°–∞—Ö–∞—Ä–Ω—ã–π –¥–∏–∞–±–µ—Ç 2 —Ç–∏–ø–∞ –≤–ø–µ—Ä–≤—ã–µ –≤—ã—è–≤–ª–µ–Ω" (important) 
‚úÖ "–•—Ä–æ–Ω–∏—á–µ—Å–∫–∞—è —Å–µ—Ä–¥–µ—á–Ω–∞—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å" (important)

EXAMPLES OF WHAT NOT TO EXTRACT:
‚ùå Individual medication names unless it's a major new chronic treatment
‚ùå Routine test results within normal ranges
‚ùå Standard procedure details
‚ùå Blood pressure readings unless extremely abnormal
‚ùå Heart rate measurements

Rules:
1. Extract dates from document text or use current date
2. Categories: diagnosis, treatment, test, procedure, general
3. Maximum 1-2 events per document - only the most critical
4. Description: 3-8 words, focus on medical essence
5. If nothing is critically important, return "NO_CHANGES"

FORMAT:
[
  {{
    "event_date": "DD.MM.YYYY",
    "category": "diagnosis|treatment|procedure", 
    "importance": "critical|important",
    "description": "Brief critical fact (3-8 words)"
  }}
]

LANGUAGE: Respond in {response_lang} language only."""

    user_prompt = f"""EXISTING MEDICAL TIMELINE:
{timeline_text}

NEW DOCUMENT:
{document_text}

Extract ONLY 1-2 most critical medical facts. If nothing is critically important, return "NO_CHANGES"."""

    try:
        async with OPENAI_SEMAPHORE:
            response = await client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                max_tokens=500,  # –ú–µ–Ω—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤ = –∫–æ—Ä–æ—á–µ –æ—Ç–≤–µ—Ç
                temperature=0.1
            )
            
            result = response.choices[0].message.content.strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ "NO_CHANGES"
            if result.upper() in ['NO_CHANGES', '–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô', '–ë–ï–ó_–ò–ó–ú–ï–ù–ï–ù–ò–ô']:
                print("üìã GPT: –ù–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è –º–µ–¥–∫–∞—Ä—Ç—ã")
                return []
            
            # –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å JSON
            try:
                events = json.loads(result)
                if isinstance(events, list):
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 2 —Å–æ–±—ã—Ç–∏–π –º–∞–∫—Å–∏–º—É–º
                    events = events[:2]
                    print(f"üìã GPT –∏–∑–≤–ª–µ–∫ {len(events)} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π")
                    return events
                else:
                    print(f"‚ö†Ô∏è GPT –≤–µ—Ä–Ω—É–ª –Ω–µ –º–∞—Å—Å–∏–≤: {result[:100]}")
                    return []
            except json.JSONDecodeError:
                print(f"‚ö†Ô∏è GPT –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON: {result[:200]}")
                return []
                
    except Exception as e:
        log_error_with_context(e, {"function": "extract_medical_events_gpt"})
        return []

async def _validate_extracted_events(events: List[Dict], lang: str) -> List[Dict]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π —á–µ—Ä–µ–∑ –≤—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å –∫ GPT"""
    
    if not events:
        return []
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    events_text = "\n".join([
        f"{i+1}. {event.get('event_date', 'N/A')} | {event.get('category', 'N/A')} | {event.get('description', 'N/A')}"
        for i, event in enumerate(events)
    ])
    
    validation_prompt = f"""You are a medical quality assessor. Review these extracted medical events and filter out any that are NOT concrete medical facts.

KEEP ONLY events that contain:
‚Ä¢ Specific measurements, values, or numbers
‚Ä¢ Concrete medical diagnoses
‚Ä¢ Specific medications with dosages
‚Ä¢ Completed procedures with findings
‚Ä¢ Objective examination results

REMOVE events that are:
‚Ä¢ General recommendations 
‚Ä¢ Future appointments
‚Ä¢ Referrals or consultations
‚Ä¢ Lifestyle advice
‚Ä¢ Administrative notes
‚Ä¢ Vague statements

EXTRACTED EVENTS TO REVIEW:
{events_text}

Return ONLY the numbers of events that should be KEPT (e.g., "1,3,5" or "2,4" or "NONE").
Respond in {lang} but use only numbers and commas."""

    try:
        async with OPENAI_SEMAPHORE:
            response = await client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": "You are a medical quality assessor. Be strict about what constitutes a concrete medical fact."},
                    {"role": "user", "content": validation_prompt}
                ],
                max_tokens=100,
                temperature=0.1
            )
            
            validation_result = response.choices[0].message.content.strip()
            
            # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            if validation_result.upper() in ['NONE', '–ù–ï–¢', '–ù–ï–ú–ê–Ñ']:
                print("üö´ –í–∞–ª–∏–¥–∞—Ü–∏—è: –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã")
                return []
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä–∞ –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
            try:
                valid_indices = []
                for num_str in validation_result.replace(' ', '').split(','):
                    if num_str.isdigit():
                        idx = int(num_str) - 1  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ 0-based –∏–Ω–¥–µ–∫—Å
                        if 0 <= idx < len(events):
                            valid_indices.append(idx)
                
                validated_events = [events[i] for i in valid_indices]
                
                # –õ–æ–≥–∏—Ä—É–µ–º —á—Ç–æ –±—ã–ª–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ
                for i, event in enumerate(events):
                    if i not in valid_indices:
                        print(f"üö´ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π: {event.get('description', '')}")
                
                return validated_events
                
            except (ValueError, IndexError) as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {validation_result}")
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
                return events
            
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è  
        return events

async def extract_medical_events_gemini(document_text: str, existing_timeline: List[Dict], lang: str = "ru") -> List[Dict]:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π —á–µ—Ä–µ–∑ Gemini (–±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ gemini_analyzer.py)"""
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ gemini_analyzer
    try:
        from gemini_analyzer import extract_medical_timeline_gemini
        return await extract_medical_timeline_gemini(document_text, existing_timeline, lang)
    except ImportError:
        print("‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è extract_medical_timeline_gemini –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ gemini_analyzer.py")
        return []
    except Exception as e:
        log_error_with_context(e, {"function": "extract_medical_events_gemini"})
        return []

# ==========================================
# –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ú–ï–î–ö–ê–†–¢–´
# ==========================================

async def update_medical_timeline_on_document_upload(user_id: int, document_id: int, document_text: str, use_gemini: bool = False) -> bool:
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–¥–∫–∞—Ä—Ç—ã - –î–û–ë–ê–í–õ–Ø–ï–¢ –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è, –ù–ï —É–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ
    """
    
    print(f"\nüè• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–¥–∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ {document_id}")
    
    try:
        # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 –∑–∞–ø–∏—Å–µ–π –º–µ–¥–∫–∞—Ä—Ç—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        existing_timeline = await get_latest_medical_timeline(user_id, limit=15)
        print(f"üìã –¢–µ–∫—É—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –≤ –º–µ–¥–∫–∞—Ä—Ç–µ: {len(existing_timeline)}")
        
        # –®–∞–≥ 2: –ò–∑–≤–ª–µ–∫–∞–µ–º –¢–û–õ–¨–ö–û –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        from db_postgresql import get_user_language
        lang = await get_user_language(user_id)
        
        if use_gemini:
            new_events = await extract_medical_events_gemini(document_text, existing_timeline, lang)
        else:
            new_events = await extract_medical_events_gpt(document_text, existing_timeline, lang)
        
        if not new_events:
            print("üìã –ù–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –º–µ–¥–∫–∞—Ä—Ç—É")
            return True
        
        # –®–∞–≥ 3: –î–û–ë–ê–í–õ–Ø–ï–ú –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è (–ù–ï —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ!)
        success = await save_medical_timeline_entries(user_id, new_events, document_id)
        
        # –®–∞–≥ 4: –ï—Å–ª–∏ –º–µ–¥–∫–∞—Ä—Ç–∞ —Å—Ç–∞–ª–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (>20 –∑–∞–ø–∏—Å–µ–π), —É–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ
        await cleanup_old_timeline_entries(user_id, max_entries=20)
        
        if success:
            print(f"‚úÖ –í –º–µ–¥–∫–∞—Ä—Ç—É –¥–æ–±–∞–≤–ª–µ–Ω–æ {len(new_events)} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–¥–∫–∞—Ä—Ç—ã")
        
        return success
        
    except Exception as e:
        log_error_with_context(e, {"function": "update_medical_timeline_on_document_upload", "user_id": user_id})
        return False

# ==========================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ==========================================

async def get_medical_timeline_for_prompt(user_id: int, limit: int = 10) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –º–µ–¥–∫–∞—Ä—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ GPT"""
    
    timeline = await get_latest_medical_timeline(user_id, limit)
    
    if not timeline:
        return "–ú–µ–¥–∫–∞—Ä—Ç–∞ –ø—É—Å—Ç–∞—è"
    
    lines = []
    for entry in timeline:
        lines.append(f"üìÖ {entry['event_date']} | {entry['category']} | {entry['importance']} | {entry['description']}")
    
    return "\n".join(lines)

async def format_medical_timeline_for_user(user_id: int, lang: str, limit: int = 10) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ–¥–∫–∞—Ä—Ç—É –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    
    timeline = await get_latest_medical_timeline(user_id, limit)
    
    if not timeline:
        return t("medical_timeline_empty", lang)
    
    lines = [f"{t('medical_timeline_header', lang)}\n"]
    
    for entry in timeline:
        # –≠–º–æ–¥–∑–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        emoji = {
            'diagnosis': 'ü©∫',
            'treatment': 'üíä', 
            'test': 'üî¨',
            'procedure': 'üè•',
            'general': 'üìÑ'
        }.get(entry['category'], 'üìÑ')
        
        # –í–∞–∂–Ω–æ—Å—Ç—å
        importance_mark = {
            'critical': 'üî¥',
            'important': 'üü°', 
            'normal': '‚ö™'
        }.get(entry['importance'], '‚ö™')
        
        lines.append(f"{emoji} {importance_mark} **{entry['event_date']}** - {entry['description']}")
    
    return "\n".join(lines)

async def cleanup_old_timeline_entries(user_id: int, max_entries: int = 20) -> bool:
    """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –º–µ–¥–∫–∞—Ä—Ç—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ max_entries"""
    
    conn = await get_db_connection()
    try:
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        count_query = "SELECT COUNT(*) FROM medical_timeline WHERE user_id = $1"
        total_count = await conn.fetchval(count_query, user_id)
        
        if total_count <= max_entries:
            return True  # –ß–∏—Å—Ç–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ max_entries
        cleanup_query = """
        DELETE FROM medical_timeline 
        WHERE user_id = $1 
        AND id NOT IN (
            SELECT id FROM medical_timeline 
            WHERE user_id = $1 
            ORDER BY event_date DESC, created_at DESC 
            LIMIT $2
        )
        """
        
        result = await conn.execute(cleanup_query, user_id, max_entries)
        deleted_count = total_count - max_entries
        print(f"üßπ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –º–µ–¥–∫–∞—Ä—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        return True
        
    except Exception as e:
        log_error_with_context(e, {"function": "cleanup_old_timeline_entries", "user_id": user_id})
        return False
    finally:
        await release_db_connection(conn)