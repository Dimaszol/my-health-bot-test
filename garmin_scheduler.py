# garmin_scheduler.py - –ì–ò–ë–†–ò–î–ù–ê–Ø –õ–û–ì–ò–ö–ê –°–ë–û–†–ê –î–ê–ù–ù–´–•

import asyncio
import logging
from datetime import datetime, date, timedelta, time as datetime_time
from typing import List, Dict, Optional
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import pytz

from garmin_connector import garmin_connector
from garmin_analyzer import garmin_analyzer
from db_postgresql import get_db_connection, release_db_connection
from aiogram import Bot

logger = logging.getLogger(__name__)

class GarminScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö Garmin —Å –≥–∏–±—Ä–∏–¥–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
    
    def __init__(self, bot: Bot):
        self.bot = bot
        self.scheduler = AsyncIOScheduler(timezone=pytz.UTC)
        self.is_running = False
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–¥–∞—á—É - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
            self.scheduler.add_job(
                func=self._check_users_for_analysis,
                trigger=CronTrigger(minute='*/10'),
                id='garmin_check_users',
                name='–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Garmin',
                replace_existing=True
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 02:00)
            self.scheduler.add_job(
                func=self._cleanup_old_data,
                trigger=CronTrigger(day_of_week=6, hour=2, minute=0),
                id='garmin_cleanup',
                name='–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö Garmin',
                replace_existing=True
            )
            
            self.scheduler.start()
            self.is_running = True
            
            logger.info("‚úÖ –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ Garmin –∑–∞–ø—É—â–µ–Ω")
            logger.info("‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç")
            logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö: –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 02:00")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ Garmin: {e}")
            raise

    async def shutdown(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if self.is_running:
            self.scheduler.shutdown(wait=True)
            self.is_running = False
            logger.info("üõë Garmin –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def _check_users_for_analysis(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
        try:
            current_utc = datetime.utcnow()
            logger.debug(f"üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Garmin –≤ {current_utc}")
            
            users_to_process = await self._get_users_ready_for_analysis(current_utc)
            
            if not users_to_process:
                logger.debug("üò¥ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥–æ—Ç–æ–≤—ã—Ö –∫ –∞–Ω–∞–ª–∏–∑—É")
                return
            
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(users_to_process)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ, –Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
            semaphore = asyncio.Semaphore(3)
            
            tasks = [
                self._process_user_with_semaphore(semaphore, user)
                for user in users_to_process
            ]
            
            results = await asyncio.gather(*tasks, return_exceptions=True)
            
            success_count = sum(1 for r in results if r is True)
            error_count = sum(1 for r in results if isinstance(r, Exception))
            
            logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {success_count}, –æ—à–∏–±–æ–∫: {error_count}")
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

    async def _process_user_with_semaphore(self, semaphore: asyncio.Semaphore, user: Dict) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–µ–º–∞—Ñ–æ—Ä–æ–º –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞"""
        async with semaphore:
            return await self._process_user_analysis(user)

    async def _get_users_ready_for_analysis(self, current_utc: datetime) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥–æ—Ç–æ–≤—ã—Ö –∫ –∞–Ω–∞–ª–∏–∑—É"""
        try:
            conn = await get_db_connection()
            
            rows = await conn.fetch("""
                SELECT 
                    gc.user_id,
                    gc.notification_time,
                    gc.timezone_offset,
                    gc.timezone_name,
                    gc.last_sync_date,
                    gah.analysis_date as last_analysis_date
                FROM garmin_connections gc
                LEFT JOIN garmin_analysis_history gah ON (
                    gc.user_id = gah.user_id 
                    AND gah.analysis_date = CURRENT_DATE
                )
                WHERE gc.is_active = TRUE
                AND gc.sync_errors < 5
                AND gah.analysis_date IS NULL
            """)
            
            await release_db_connection(conn)
            
            users_ready = []
            
            for row in rows:
                user_id = row['user_id']
                notification_time = row['notification_time']
                timezone_offset = row['timezone_offset']
                timezone_name = row['timezone_name']
                last_sync_date = row['last_sync_date']
                
                # –í—ã—á–∏—Å–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_local_time = current_utc + timedelta(minutes=timezone_offset)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—É–ø–∏–ª–æ –ª–∏ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                if self._is_time_for_analysis(user_local_time.time(), notification_time):
                    users_ready.append({
                        'user_id': user_id,
                        'notification_time': notification_time,
                        'timezone_offset': timezone_offset,
                        'timezone_name': timezone_name,
                        'last_sync_date': last_sync_date,
                        'user_local_time': user_local_time
                    })
            
            return users_ready
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {e}")
            if 'conn' in locals():
                await release_db_connection(conn)
            return []

    def _is_time_for_analysis(self, current_time: datetime_time, notification_time: datetime_time) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ—Ä–∞ –ª–∏ –¥–µ–ª–∞—Ç—å –∞–Ω–∞–ª–∏–∑ (—Å –æ–∫–Ω–æ–º –≤ 10 –º–∏–Ω—É—Ç)"""
        current_minutes = current_time.hour * 60 + current_time.minute
        notification_minutes = notification_time.hour * 60 + notification_time.minute
        
        return notification_minutes <= current_minutes < notification_minutes + 10

    async def _process_user_analysis(self, user: Dict) -> bool:
        """üîß –ì–ò–ë–†–ò–î–ù–ê–Ø –õ–û–ì–ò–ö–ê: –°–æ–±–∏—Ä–∞–µ–º —Ä–∞–∑–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ —Ä–∞–∑–Ω—ã–µ –¥–Ω–∏"""
        user_id = user['user_id']
        
        try:
            logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞—é –≥–∏–±—Ä–∏–¥–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            today = date.today()
            yesterday = today - timedelta(days=1)
            
            logger.info(f"üìÖ –ì–ò–ë–†–ò–î–ù–ê–Ø –õ–û–ì–ò–ö–ê –°–ë–û–†–ê –î–ê–ù–ù–´–•:")
            logger.info(f"   üåÖ –°–µ–≥–æ–¥–Ω—è: {today} (–¥–ª—è —Å–Ω–∞)")
            logger.info(f"   üåô –í—á–µ—Ä–∞: {yesterday} (–¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)")
            
            # üîß –ù–û–í–´–ô –ü–û–î–•–û–î: –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥–∏–±—Ä–∏–¥–Ω–æ
            combined_data = await self._collect_hybrid_data(user_id, today, yesterday)
            
            if not combined_data:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –≥–∏–±—Ä–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {user_id}")
                return False
            
            # üìä –ü–û–î–†–û–ë–ù–´–ô –õ–û–ì –ì–ò–ë–†–ò–î–ù–´–• –î–ê–ù–ù–´–•
            await self._log_hybrid_data_summary(user_id, combined_data, today, yesterday)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è—é –≥–∏–±—Ä–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            saved = await garmin_connector.save_daily_data(combined_data)
            if not saved:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {user_id}")
                return False
            
            logger.info(f"‚úÖ –ì–∏–±—Ä–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –ª–∏–º–∏—Ç—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            from subscription_manager import SubscriptionManager
            sub_manager = SubscriptionManager()
            
            user_limits = await sub_manager.get_user_limits(user_id)
            gpt4o_left = user_limits.get('gpt4o_queries_left', 0)
            logger.info(f"üíé –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Å—Ç–∞–ª–æ—Å—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: {gpt4o_left}")
            
            if gpt4o_left <= 0:
                logger.info(f"‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏")
                await self._send_data_collected_notification(user_id)
                return True
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º AI –∞–Ω–∞–ª–∏–∑ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—á–µ—Ä–∞—à–Ω–µ–π –¥–∞—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            # (–ø–æ—Ç–æ–º—É —á—Ç–æ –æ—Å–Ω–æ–≤–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±—ã–ª–∞ –≤—á–µ—Ä–∞)
            logger.info(f"üß† –ó–∞–ø—É—Å–∫–∞—é AI –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            logger.info(f"üìÖ –î–∞—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {yesterday} (–±–∞–∑–æ–≤–∞—è –¥–∞—Ç–∞)")
            
            analysis_result = await garmin_analyzer.create_health_analysis(user_id, combined_data)
            
            if analysis_result:
                logger.info(f"‚úÖ AI –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                logger.info(f"üìÑ –î–ª–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞: {len(analysis_result.get('analysis_text', ''))} —Å–∏–º–≤–æ–ª–æ–≤")
                
                await self._send_analysis_notification(user_id, analysis_result)
                await sub_manager.spend_limits(user_id, queries=1)
                return True
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å AI –∞–Ω–∞–ª–∏–∑ –¥–ª—è {user_id}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            logger.exception("–ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏:")
            return False

    async def _collect_hybrid_data(self, user_id: int, today: date, yesterday: date) -> Optional[Dict]:
        """üîß –ö–õ–Æ–ß–ï–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥–∏–±—Ä–∏–¥–Ω–æ"""
        
        logger.info(f"üîß –ì–ò–ë–†–ò–î–ù–´–ô –°–ë–û–† –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:")
        
        # –®–∞–≥ 1: –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–Ω–∞ –∑–∞ –°–ï–ì–û–î–ù–Ø
        logger.info(f"   üò¥ –°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ —Å–Ω–∞ –∑–∞ {today}...")
        sleep_data = await garmin_connector.collect_daily_data(user_id, today)
        
        # –®–∞–≥ 2: –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –í–ß–ï–†–ê  
        logger.info(f"   üèÉ –°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ {yesterday}...")
        activity_data = await garmin_connector.collect_daily_data(user_id, yesterday)
        
        if not sleep_data and not activity_data:
            logger.error(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –Ω–∏–∫–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
            return None
        
        # –®–∞–≥ 3: –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —É–º–Ω–æ
        logger.info(f"   üîÑ –û–±—ä–µ–¥–∏–Ω—è—é –¥–∞–Ω–Ω—ã–µ...")
        combined_data = self._merge_hybrid_data(sleep_data, activity_data, yesterday)
        
        return combined_data

    def _merge_hybrid_data(self, sleep_data: Optional[Dict], activity_data: Optional[Dict], base_date: date) -> Dict:
        """–û–±—ä–µ–¥–∏–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–Ω–∞ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        
        # –ë–∞–∑–∏—Ä—É–µ–º—Å—è –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–≤—á–µ—Ä–∞)
        if activity_data:
            result = activity_data.copy()
        else:
            result = {
                'user_id': sleep_data.get('user_id') if sleep_data else None,
                'data_date': base_date,
                'sync_timestamp': datetime.now()
            }
        
        # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û –¥–∞–Ω–Ω—ã–µ —Å–Ω–∞ –∏–∑ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        if sleep_data:
            sleep_fields = [
                'sleep_duration_minutes',
                'sleep_deep_minutes', 
                'sleep_light_minutes',
                'sleep_rem_minutes',
                'sleep_awake_minutes',
                'sleep_score',
                'nap_duration_minutes',
                'sleep_need_minutes',
                'sleep_baseline_minutes'
            ]
            
            for field in sleep_fields:
                if sleep_data.get(field) is not None:
                    result[field] = sleep_data[field]
                    logger.debug(f"     ‚úÖ –í–∑—è–ª {field} –∏–∑ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –¥–∞—Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è (–±–∞–∑–æ–≤–∞—è –¥–∞—Ç–∞ = –≤—á–µ—Ä–∞)
        result['data_date'] = base_date
        
        return result

    async def _log_hybrid_data_summary(self, user_id: int, combined_data: Dict, today: date, yesterday: date):
        """–ü–æ–¥—Ä–æ–±–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —Å–±–æ—Ä–∞"""
        
        logger.info(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ì–ò–ë–†–ò–î–ù–û–ì–û –°–ë–û–†–ê –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:")
        logger.info(f"   üìÖ –ë–∞–∑–æ–≤–∞—è –¥–∞—Ç–∞ –∑–∞–ø–∏—Å–∏: {combined_data.get('data_date')}")
        
        # –ê–Ω–∞–ª–∏–∑ —Å–Ω–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö)
        if combined_data.get('sleep_duration_minutes'):
            sleep_hours = combined_data['sleep_duration_minutes'] // 60
            sleep_mins = combined_data['sleep_duration_minutes'] % 60
            logger.info(f"   üò¥ –û–°–ù–û–í–ù–û–ô –°–û–ù: ‚úÖ {sleep_hours}—á {sleep_mins}–º (–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞ {today})")
        else:
            logger.info(f"   üò¥ –û–°–ù–û–í–ù–û–ô –°–û–ù: ‚ùå –ù–ï–¢ (–ø—Ä–æ–≤–µ—Ä—è–ª–∏ {today})")
        
        if combined_data.get('nap_duration_minutes'):
            logger.info(f"   üõå –î–Ω–µ–≤–Ω–æ–π —Å–æ–Ω: ‚úÖ {combined_data['nap_duration_minutes']}–º")
        
        # –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–∑ –≤—á–µ—Ä–∞—à–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö)
        if combined_data.get('steps'):
            logger.info(f"   üö∂ –®–ê–ì–ò: ‚úÖ {combined_data['steps']} (–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞ {yesterday})")
        else:
            logger.info(f"   üö∂ –®–ê–ì–ò: ‚ùå –ù–ï–¢ (–ø—Ä–æ–≤–µ—Ä—è–ª–∏ {yesterday})")
        
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        if combined_data.get('resting_heart_rate'):
            logger.info(f"   ‚ù§Ô∏è –ü—É–ª—å—Å: ‚úÖ {combined_data['resting_heart_rate']} —É–¥/–º–∏–Ω")
        
        if combined_data.get('stress_avg'):
            logger.info(f"   üò∞ –°—Ç—Ä–µ—Å—Å: ‚úÖ —Å—Ä–µ–¥–Ω–µ–µ {combined_data['stress_avg']}")
        
        if combined_data.get('body_battery_max'):
            logger.info(f"   üîã Body Battery: ‚úÖ {combined_data.get('body_battery_min', '?')}-{combined_data['body_battery_max']}%")
        
        # –ü–æ–¥—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
        metrics = []
        if combined_data.get('sleep_duration_minutes'): metrics.append('—Å–æ–Ω')
        if combined_data.get('steps'): metrics.append('—à–∞–≥–∏')
        if combined_data.get('resting_heart_rate'): metrics.append('–ø—É–ª—å—Å')
        if combined_data.get('stress_avg'): metrics.append('—Å—Ç—Ä–µ—Å—Å')
        if combined_data.get('body_battery_max'): metrics.append('—ç–Ω–µ—Ä–≥–∏—è')
        
        logger.info(f"   ‚úÖ –°–û–ë–†–ê–ù–û –ú–ï–¢–†–ò–ö: {len(metrics)} ({', '.join(metrics)})")
        
        # –î–∏–∞–≥–Ω–æ–∑ –∫–∞—á–µ—Å—Ç–≤–∞
        if len(metrics) >= 4:
            logger.info(f"   üéâ –û–¢–õ–ò–ß–ù–û: –ì–∏–±—Ä–∏–¥–Ω—ã–π —Å–±–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ!")
        elif len(metrics) >= 2:
            logger.info(f"   üëç –•–û–†–û–®–û: –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã")
        else:
            logger.info(f"   ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –ú–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

    async def _send_data_collected_notification(self, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã, –Ω–æ –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            from locales import get_text
            
            message = get_text(user_id, "garmin_data_collected_reminder")
            
            await self.bot.send_message(
                chat_id=user_id,
                text=message,
                parse_mode='HTML'
            )
            
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ª–∏–º–∏—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    async def _send_analysis_notification(self, user_id: int, analysis_result: Dict):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            analysis_text = analysis_result.get('analysis_text', '–ê–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å')
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(analysis_text) > 3500:
                analysis_text = analysis_text[:3500] + "...\n\nüìä –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏–∏."
            
            await self.bot.send_message(
                chat_id=user_id,
                text=f"ü©∫ <b>–í–∞—à –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–¥–æ—Ä–æ–≤—å—è</b>\n\n{analysis_text}",
                parse_mode='HTML'
            )
            
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    async def _cleanup_old_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é)"""
        try:
            logger.info("üßπ –ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö Garmin")
            
            conn = await get_db_connection()
            
            cutoff_daily = date.today() - timedelta(days=90)
            cutoff_analysis = date.today() - timedelta(days=365)
            
            await conn.execute("DELETE FROM garmin_daily_data WHERE data_date < $1", cutoff_daily)
            await conn.execute("DELETE FROM garmin_analysis_history WHERE analysis_date < $1", cutoff_analysis)
            
            await release_db_connection(conn)

            logger.info(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            if 'conn' in locals():
                await release_db_connection(conn)

    async def force_user_analysis(self, user_id: int) -> bool:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            logger.info(f"üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {user_id}")
            
            conn = await get_db_connection()
            
            row = await conn.fetchrow("""
                SELECT user_id, notification_time, timezone_offset, timezone_name, last_sync_date
                FROM garmin_connections 
                WHERE user_id = $1 AND is_active = TRUE
            """, user_id)
            
            await release_db_connection(conn)
            
            if not row:
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ Garmin –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
                return False
            
            row = dict(row)
            
            user_data = {
                'user_id': row['user_id'],
                'notification_time': row['notification_time'], 
                'timezone_offset': row['timezone_offset'],
                'timezone_name': row['timezone_name'],
                'last_sync_date': row['last_sync_date'],
                'user_local_time': datetime.now()
            }
            
            return await self._process_user_analysis(user_data)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            if 'conn' in locals():
                await release_db_connection(conn)
            return False

    async def get_scheduler_status(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        try:
            conn = await get_db_connection()
            
            user_stats = await conn.fetchrow("""
                SELECT 
                    COUNT(*) as total_users,
                    COUNT(*) FILTER (WHERE is_active = TRUE) as active_users,
                    COUNT(*) FILTER (WHERE sync_errors >= 5) as error_users,
                    COUNT(*) FILTER (WHERE last_sync_date = CURRENT_DATE) as synced_today
                FROM garmin_connections
            """)
            
            data_today = await conn.fetchval("""
                SELECT COUNT(*) FROM garmin_daily_data 
                WHERE sync_timestamp::date = CURRENT_DATE
            """)
            
            analysis_today = await conn.fetchval("""
                SELECT COUNT(*) FROM garmin_analysis_history 
                WHERE analysis_date = CURRENT_DATE
            """)
            
            await release_db_connection(conn)

            return {
                'is_running': self.is_running,
                'total_users': user_stats['total_users'] if user_stats else 0,
                'active_users': user_stats['active_users'] if user_stats else 0,
                'error_users': user_stats['error_users'] if user_stats else 0,
                'synced_today': user_stats['synced_today'] if user_stats else 0,
                'data_collected_today': data_today or 0,
                'analysis_completed_today': analysis_today or 0,
                'next_check': self._get_next_job_time('garmin_check_users'),
                'next_cleanup': self._get_next_job_time('garmin_cleanup')
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
            return {'error': str(e)}

    def _get_next_job_time(self, job_id: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        try:
            job = self.scheduler.get_job(job_id)
            if job and job.next_run_time:
                return job.next_run_time.strftime('%Y-%m-%d %H:%M:%S UTC')
            return None
        except:
            return None

# ================================
# –ì–õ–û–ë–ê–õ–¨–ù–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–†
# ================================

garmin_scheduler: Optional[GarminScheduler] = None

async def initialize_garmin_scheduler(bot: Bot):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ Garmin"""
    global garmin_scheduler
    try:
        garmin_scheduler = GarminScheduler(bot)
        await garmin_scheduler.initialize()
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ Garmin –∑–∞–ø—É—â–µ–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ Garmin: {e}")
        raise

async def shutdown_garmin_scheduler():
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ Garmin"""
    global garmin_scheduler
    if garmin_scheduler:
        await garmin_scheduler.shutdown()
        logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ Garmin –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def force_user_analysis(user_id: int) -> bool:
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    global garmin_scheduler
    if garmin_scheduler:
        return await garmin_scheduler.force_user_analysis(user_id)
    return False

async def get_scheduler_status() -> Dict:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    global garmin_scheduler
    if garmin_scheduler:
        return await garmin_scheduler.get_scheduler_status()
    return {'error': '–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'}