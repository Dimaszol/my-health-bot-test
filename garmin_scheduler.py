# garmin_scheduler.py - –ü–†–û–°–¢–ê–Ø –õ–û–ì–ò–ö–ê –ü–û –í–†–ï–ú–ï–ù–ò –°–ù–ê

import asyncio
import logging
from datetime import datetime, date, timedelta
from typing import List, Dict, Optional
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import pytz

from garmin_connector import garmin_connector
from garmin_analyzer import garmin_analyzer
from db_postgresql import get_db_connection, release_db_connection
from aiogram import Bot

logger = logging.getLogger(__name__)

class GarminScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å –ø—Ä–æ—Å—Ç–æ–π –ª–æ–≥–∏–∫–æ–π: –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤—Ä–µ–º—è —Å–Ω–∞"""
    
    def __init__(self, bot: Bot):
        self.bot = bot
        self.scheduler = AsyncIOScheduler(timezone=pytz.UTC)
        self.is_running = False
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        try:
            # –ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            self.scheduler.add_job(
                func=self._collect_and_analyze_all_users,
                trigger=CronTrigger(minute='*/30'),  # –ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
                id='garmin_collect_every_30min',
                name='–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö Garmin –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç',
                replace_existing=True
            )
            
            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é)
            self.scheduler.add_job(
                func=self._cleanup_old_data,
                trigger=CronTrigger(day_of_week=6, hour=2, minute=0),
                id='garmin_cleanup',
                name='–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö Garmin',
                replace_existing=True
            )
            
            self.scheduler.start()
            self.is_running = True
            
            logger.info("‚úÖ –ü—Ä–æ—Å—Ç–æ–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ Garmin –∑–∞–ø—É—â–µ–Ω")
            logger.info("   üîÑ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö: –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç")
            logger.info("   üß† –õ–æ–≥–∏–∫–∞: —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ Garmin: {e}")
            raise

    async def shutdown(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if self.is_running:
            self.scheduler.shutdown(wait=True)
            self.is_running = False
            logger.info("üõë Garmin –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def _collect_and_analyze_all_users(self):
        """
        –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–Ω–∞
        """
        try:
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç...")
            
            # –ü–æ–ª—É—á–∞–µ–º –í–°–ï–• –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Garmin
            conn = await get_db_connection()
            users = await conn.fetch("""
                SELECT user_id 
                FROM garmin_connections 
                WHERE is_active = TRUE
            """)
            await release_db_connection(conn)
            
            if not users:
                logger.info("üë• –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Garmin")
                return
            
            logger.info(f"üë• –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
            analysis_count = 0
            
            for user_row in users:
                user_id = user_row['user_id']
                
                try:
                    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–Ω
                    analyzed = await self._collect_and_check_sleep(user_id)
                    
                    if analyzed:
                        analysis_count += 1
                    
                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å API)
                    await asyncio.sleep(2)
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                    continue
            
            if analysis_count > 0:
                logger.info(f"‚úÖ –ü—Ä–æ–≤–µ–¥–µ–Ω–æ {analysis_count} –Ω–æ–≤—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤")
            else:
                logger.debug("üí§ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏–∑–º–µ–Ω–∏–≤—à–∏–º—Å—è —Å–Ω–æ–º")
                
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")

    async def _collect_and_check_sleep(self, user_id: int) -> bool:
        """
        –°–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–Ω–∞
        
        Returns:
            True –µ—Å–ª–∏ –ø—Ä–æ–≤–µ–ª–∏ –∞–Ω–∞–ª–∏–∑, False –µ—Å–ª–∏ –Ω–µ—Ç
        """
        try:
            # 1. –°–û–ë–ò–†–ê–ï–ú –î–ê–ù–ù–´–ï –ö–ê–ö –û–ë–´–ß–ù–û
            today = date.today()
            yesterday = today - timedelta(days=1)
            
            logger.debug(f"–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –≤—á–µ—Ä–∞ –∏ —Å–µ–≥–æ–¥–Ω—è
            yesterday_data = await garmin_connector.collect_daily_data(user_id, yesterday)
            today_data = await garmin_connector.collect_daily_data(user_id, today)
            
            # –í—ã–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–ª–Ω—ã–º —Å–Ω–æ–º (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤—á–µ—Ä–∞)
            current_sleep_minutes = None
            analysis_date = None
            daily_data = None
            
            if yesterday_data and yesterday_data.get('sleep_duration_minutes'):
                current_sleep_minutes = yesterday_data['sleep_duration_minutes']
                analysis_date = yesterday
                daily_data = yesterday_data
            elif today_data and today_data.get('sleep_duration_minutes'):
                current_sleep_minutes = today_data['sleep_duration_minutes']
                analysis_date = today
                daily_data = today_data
            
            if not current_sleep_minutes or current_sleep_minutes < 60:
                logger.debug(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return False
            
            # 2. –ü–†–û–í–ï–†–Ø–ï–ú –ò–ó–ú–ï–ù–ï–ù–ò–ï –í–†–ï–ú–ï–ù–ò –°–ù–ê
            sleep_changed = await self._check_sleep_duration_changed(user_id, current_sleep_minutes)
            
            if not sleep_changed:
                logger.debug(f"–°–æ–Ω –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({current_sleep_minutes} –º–∏–Ω)")
                return False
            
            # 3. –ü–†–û–í–û–î–ò–ú –ê–ù–ê–õ–ò–ó
            logger.info(f"üß† –ù–æ–≤—ã–π —Å–æ–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {current_sleep_minutes} –º–∏–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã (–∫–∞–∫ –≤ –≤–∞—à–µ–º —Å—Ç–∞—Ä–æ–º –∫–æ–¥–µ)
            from subscription_manager import SubscriptionManager
            sub_manager = SubscriptionManager()
            
            user_limits = await sub_manager.get_user_limits(user_id)
            gpt4o_left = user_limits.get('gpt4o_queries_left', 0)
            
            if gpt4o_left <= 0:
                logger.info(f"‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏")
                await self._send_data_collected_notification(user_id)
                return False
            
            # –°–æ–∑–¥–∞—Ç—å –∞–Ω–∞–ª–∏–∑
            analysis_success = await self._create_and_send_analysis(user_id, analysis_date, daily_data)
            
            if analysis_success:
                # –°–ø–∏—Å—ã–≤–∞–µ–º –ª–∏–º–∏—Ç (–∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–º –∫–æ–¥–µ)
                await sub_manager.spend_limits(user_id, queries=1)
                # 4. –°–û–•–†–ê–ù–Ø–ï–ú –ù–û–í–û–ï –í–†–ï–ú–Ø –°–ù–ê
                await self._save_analyzed_sleep_duration(user_id, current_sleep_minutes)
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False

    async def _check_sleep_duration_changed(self, user_id: int, current_sleep_minutes: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ –≤—Ä–µ–º—è —Å–Ω–∞"""
        try:
            conn = await get_db_connection()
            
            result = await conn.fetchrow("""
                SELECT last_analyzed_sleep_duration 
                FROM garmin_users_sleep_tracking 
                WHERE user_id = $1
            """, user_id)
            
            await release_db_connection(conn)
            
            if not result:
                # –ü–µ—Ä–≤—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                logger.info(f"üÜï –ü–µ—Ä–≤—ã–π —Å–æ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {current_sleep_minutes} –º–∏–Ω")
                return True
            
            last_duration = result['last_analyzed_sleep_duration']
            
            if current_sleep_minutes != last_duration:
                logger.info(f"üîÑ –°–æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {last_duration} ‚Üí {current_sleep_minutes} –º–∏–Ω")
                return True
            
            # –°–æ–Ω –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–Ω–∞: {e}")
            return False

    async def _save_analyzed_sleep_duration(self, user_id: int, sleep_minutes: int):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Ä–µ–º—è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–Ω–∞"""
        try:
            conn = await get_db_connection()
            
            await conn.execute("""
                INSERT INTO garmin_users_sleep_tracking (user_id, last_analyzed_sleep_duration, last_analysis_time)
                VALUES ($1, $2, NOW())
                ON CONFLICT (user_id) 
                DO UPDATE SET 
                    last_analyzed_sleep_duration = EXCLUDED.last_analyzed_sleep_duration,
                    last_analysis_time = NOW()
            """, user_id, sleep_minutes)
            
            await release_db_connection(conn)
            
            logger.debug(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤—Ä–µ–º—è —Å–Ω–∞ {sleep_minutes} –º–∏–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–Ω–∞: {e}")

    async def _send_data_collected_notification(self, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã, –Ω–æ –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ (–∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–¥–∞)"""
        try:
            from db_postgresql import get_user_language, t
            lang = await get_user_language(user_id)
            message = t("garmin_data_collected_reminder", lang)
            await self.bot.send_message(chat_id=user_id, text=message, parse_mode='HTML')
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ª–∏–º–∏—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    async def _create_and_send_analysis(self, user_id: int, analysis_date: date, daily_data: dict) -> bool:
        """–°–æ–∑–¥–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
            analysis_result = await garmin_analyzer.create_health_analysis(user_id, daily_data)
            
            if not analysis_result or not analysis_result.get('success'):
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return False
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∫–∞–∫ –≤ –≤–∞—à–µ–º —Å—Ç–∞—Ä–æ–º –∫–æ–¥–µ)
            analysis_text = analysis_result.get('analysis_text', '–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ HTML (–∫–∞–∫ –≤ –≤–∞—à–µ–º —Å—Ç–∞—Ä–æ–º –∫–æ–¥–µ)
            from gpt import safe_telegram_text
            safe_analysis = safe_telegram_text(analysis_text)
            
            if len(safe_analysis) > 3500:
                safe_analysis = safe_analysis[:3500] + "...\n\nüìä –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏–∏."
            
            sleep_minutes = daily_data.get('sleep_duration_minutes', 0)
            hours = sleep_minutes // 60
            minutes = sleep_minutes % 60
            
            await self.bot.send_message(
                chat_id=user_id,
                text=f"ü©∫ <b>–í–∞—à –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–¥–æ—Ä–æ–≤—å—è</b>\n\nüìÖ –î–∞—Ç–∞: {analysis_date.strftime('%d.%m.%Y')}\n‚è∞ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞: {hours}—á {minutes}–º–∏–Ω\n\n{safe_analysis}",
                parse_mode='HTML'
            )
            
            logger.info(f"üì§ –ê–Ω–∞–ª–∏–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è/–æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {user_id}: {e}")
            return False

    async def _cleanup_old_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            logger.info("üßπ –ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö Garmin")
            conn = await get_db_connection()
            
            cutoff_daily = date.today() - timedelta(days=90)
            cutoff_analysis = date.today() - timedelta(days=365)
            
            # –û—á–∏—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            await conn.execute("DELETE FROM garmin_daily_data WHERE data_date < $1", cutoff_daily)
            await conn.execute("DELETE FROM garmin_analysis_history WHERE analysis_date < $1", cutoff_analysis)
            
            # –û—á–∏—â–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–Ω–∞ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
            cutoff_sleep = date.today() - timedelta(days=30)
            await conn.execute("DELETE FROM garmin_users_sleep_tracking WHERE last_analysis_time::date < $1", cutoff_sleep)
            
            await release_db_connection(conn)
            logger.info(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            if 'conn' in locals():
                await release_db_connection(conn)

    async def force_user_analysis(self, user_id: int) -> bool:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        try:
            logger.info(f"üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω
            conn = await get_db_connection()
            user_exists = await conn.fetchval("""
                SELECT EXISTS(
                    SELECT 1 FROM garmin_connections 
                    WHERE user_id = $1 AND is_active = TRUE
                )
            """, user_id)
            await release_db_connection(conn)
            
            if not user_exists:
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
                return False
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É –ª–æ–≥–∏–∫—É
            result = await self._collect_and_check_sleep(user_id)
            
            if result:
                logger.info(f"‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            else:
                logger.info(f"üí§ –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {user_id}: {e}")
            return False

    async def get_scheduler_status(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        try:
            conn = await get_db_connection()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            user_stats = await conn.fetchrow("""
                SELECT 
                    COUNT(*) as total_users,
                    COUNT(*) FILTER (WHERE is_active = TRUE) as active_users,
                    COUNT(*) FILTER (WHERE sync_errors >= 5) as error_users
                FROM garmin_connections
            """)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–Ω–∞
            sleep_stats = await conn.fetchrow("""
                SELECT 
                    COUNT(*) as users_with_sleep_tracking,
                    COUNT(*) FILTER (WHERE last_analysis_time::date = CURRENT_DATE) as analyzed_today
                FROM garmin_users_sleep_tracking
            """)
            
            await release_db_connection(conn)

            return {
                'is_running': self.is_running,
                'logic': 'simple_duration_comparison',
                'check_frequency': '30_minutes',
                'total_users': user_stats['total_users'] if user_stats else 0,
                'active_users': user_stats['active_users'] if user_stats else 0,
                'error_users': user_stats['error_users'] if user_stats else 0,
                'users_with_sleep_tracking': sleep_stats['users_with_sleep_tracking'] if sleep_stats else 0,
                'analyzed_today': sleep_stats['analyzed_today'] if sleep_stats else 0,
                'next_check': self._get_next_job_time('garmin_collect_every_30min'),
                'next_cleanup': self._get_next_job_time('garmin_cleanup')
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
            return {'error': str(e)}

    def _get_next_job_time(self, job_id: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        try:
            job = self.scheduler.get_job(job_id)
            if job and job.next_run_time:
                return job.next_run_time.strftime('%Y-%m-%d %H:%M:%S UTC')
            return None
        except:
            return None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
garmin_scheduler: Optional[GarminScheduler] = None

async def initialize_garmin_scheduler(bot: Bot):
    global garmin_scheduler
    try:
        garmin_scheduler = GarminScheduler(bot)
        await garmin_scheduler.initialize()
        logger.info("‚úÖ –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ Garmin –∑–∞–ø—É—â–µ–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ Garmin: {e}")
        raise

async def shutdown_garmin_scheduler():
    global garmin_scheduler
    if garmin_scheduler:
        await garmin_scheduler.shutdown()
        logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ Garmin –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def force_user_analysis(user_id: int) -> bool:
    global garmin_scheduler
    if garmin_scheduler:
        return await garmin_scheduler.force_user_analysis(user_id)
    return False

async def get_scheduler_status() -> Dict:
    global garmin_scheduler
    if garmin_scheduler:
        return await garmin_scheduler.get_scheduler_status()
    return {'error': '–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'}