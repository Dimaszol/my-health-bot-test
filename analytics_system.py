# analytics_system.py - –ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞

import json
import logging
from datetime import datetime, timedelta
from typing import Dict, Optional

logger = logging.getLogger(__name__)

class Analytics:
    """–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    
    @staticmethod
    async def track(user_id: int, event: str, properties: Dict = None):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ —Å–æ–±—ã—Ç–∏–π"""
        try:
            from db_postgresql import get_db_connection, release_db_connection
            
            properties = properties or {}
            
            conn = await get_db_connection()
            try:
                await conn.execute(
                    "INSERT INTO analytics_events (user_id, event, properties, timestamp) VALUES ($1, $2, $3, $4)",
                    user_id, event, json.dumps(properties), datetime.now()
                )
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                print(f"üìä Analytics: {event} | User: {user_id}")
                
            finally:
                await release_db_connection(conn)
                
        except Exception as e:
            # –ù–ï –ü–ê–î–ê–ï–ú –µ—Å–ª–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            print(f"‚ùå Analytics error: {e}")

    # –ö–õ–Æ–ß–ï–í–´–ï –°–û–ë–´–¢–ò–Ø –î–õ–Ø MVP
    
    @staticmethod
    async def track_user_started(user_id: int, language: str = None, is_new: bool = True):
        """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞"""
        await Analytics.track(user_id, "user_started", {
            "language": language,
            "is_new_user": is_new
        })
    
    @staticmethod
    async def track_registration_completed(user_id: int):
        """–ó–∞–≤–µ—Ä—à–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"""
        await Analytics.track(user_id, "registration_completed", {})
    
    @staticmethod
    async def track_document_uploaded(user_id: int, file_type: str = "unknown"):
        """–ó–∞–≥—Ä—É–∑–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç"""
        await Analytics.track(user_id, "document_uploaded", {
            "file_type": file_type
        })
    
    @staticmethod
    async def track_question_asked(user_id: int, question_length: int = 0):
        """–ó–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å –±–æ—Ç—É"""
        await Analytics.track(user_id, "question_asked", {
            "question_length": question_length
        })

    @staticmethod
    async def track_payment_completed(user_id: int, plan: str = "unknown", price: float = 0):
        """–ó–∞–≤–µ—Ä—à–∏–ª –æ–ø–ª–∞—Ç—É"""
        await Analytics.track(user_id, "payment_completed", {
            "plan": plan,
            "price_usd": price
        })

    # –ü–†–û–°–¢–´–ï –û–¢–ß–ï–¢–´
    
    @staticmethod
    async def get_stats(days: int = 7) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Å—Ç—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        try:
            from db_postgresql import get_db_connection, release_db_connection
            
            conn = await get_db_connection()
            try:
                start_date = datetime.now() - timedelta(days=days)
                
                # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                total_users = await conn.fetchval(
                    "SELECT COUNT(DISTINCT user_id) FROM analytics_events WHERE timestamp >= $1",
                    start_date
                )
                
                new_users = await conn.fetchval(
                    "SELECT COUNT(*) FROM analytics_events WHERE event = 'user_started' AND properties->>'is_new_user' = 'true' AND timestamp >= $1",
                    start_date
                )
                
                registrations = await conn.fetchval(
                    "SELECT COUNT(*) FROM analytics_events WHERE event = 'registration_completed' AND timestamp >= $1",
                    start_date
                )
                
                documents = await conn.fetchval(
                    "SELECT COUNT(*) FROM analytics_events WHERE event = 'document_uploaded' AND timestamp >= $1",
                    start_date
                )
                
                questions = await conn.fetchval(
                    "SELECT COUNT(*) FROM analytics_events WHERE event = 'question_asked' AND timestamp >= $1",
                    start_date
                )
                
                payments = await conn.fetchval(
                    "SELECT COUNT(*) FROM analytics_events WHERE event = 'payment_completed' AND timestamp >= $1",
                    start_date
                )
                
                return {
                    "total_users": total_users or 0,
                    "new_users": new_users or 0,
                    "registrations": registrations or 0,
                    "documents": documents or 0,
                    "questions": questions or 0,
                    "payments": payments or 0,
                    "registration_rate": (registrations / new_users * 100) if new_users > 0 else 0,
                    "document_rate": (documents / total_users * 100) if total_users > 0 else 0
                }
                
            finally:
                await release_db_connection(conn)
                
        except Exception as e:
            print(f"‚ùå Stats error: {e}")
            return {}