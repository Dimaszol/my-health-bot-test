# subscription_keyboards.py - –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–ø–∏—Å–æ–∫

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from stripe_config import StripeConfig
from typing import Optional

def subscription_main_menu(lang: str, current_subscription: Optional[str] = None) -> InlineKeyboardMarkup:
    """‚úÖ –£–ü–†–û–©–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –µ—Å–ª–∏ –µ—Å—Ç—å –õ–Æ–ë–ê–Ø –ø–æ–¥–ø–∏—Å–∫–∞"""
    
    texts = {
        "ru": {
            "title": "üíé –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É:",
            "monthly": "/–º–µ—Å—è—Ü",
            "one_time": "—Ä–∞–∑–æ–≤–æ",
            "current": "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è",
            "limits": "üìä –ú–æ–∏ –ª–∏–º–∏—Ç—ã",
            "cancel": "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
            "back": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
        },
        "uk": {
            "title": "üíé –û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–ø–∏—Å–∫—É:",
            "monthly": "/–º—ñ—Å—è—Ü—å", 
            "one_time": "—Ä–∞–∑–æ–≤–æ",
            "current": "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞",
            "limits": "üìä –ú–æ—ó –ª—ñ–º—ñ—Ç–∏",
            "cancel": "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É",
            "back": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
        },
        "en": {
            "title": "üíé Choose subscription:",
            "monthly": "/month",
            "one_time": "one-time",
            "current": "‚úÖ Active",
            "limits": "üìä My limits", 
            "cancel": "‚ùå Cancel subscription",
            "back": "‚¨ÖÔ∏è Back"
        }
    }
    
    t = texts.get(lang, texts["ru"])
    
    buttons = []
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞–∫–µ—Ç—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    packages = StripeConfig.get_all_packages()
    
    for package_id, package_info in packages.items():
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        if package_info['type'] == 'subscription':
            price_text = f"{package_info['price_display']}{t['monthly']}"
        else:
            price_text = f"{package_info['price_display']} {t['one_time']}"
        
        button_text = f"{package_info['user_friendly_name']} ‚Äî {price_text}"
        
        # ‚úÖ –£–ü–†–û–©–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
        if current_subscription == package_id:
            # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —ç—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∞
            button_text = f"‚úÖ {button_text}"
            buttons.append([InlineKeyboardButton(
                text=button_text, 
                callback_data="subscription_current"
            )])
        else:
            # –û–±—ã—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –ø–æ–∫—É–ø–∫–∏
            buttons.append([InlineKeyboardButton(
                text=button_text,
                callback_data=f"buy_{package_id}"
            )])
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    additional_buttons = []
    additional_buttons.append(InlineKeyboardButton(text=t["limits"], callback_data="show_limits"))
    
    # ‚úÖ –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –µ—Å–ª–∏ –µ—Å—Ç—å –õ–Æ–ë–ê–Ø –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    if current_subscription is not None:
        additional_buttons.append(InlineKeyboardButton(text=t["cancel"], callback_data="cancel_subscription"))
    
    if len(additional_buttons) == 2:
        buttons.append(additional_buttons)
    else:
        for btn in additional_buttons:
            buttons.append([btn])
    
    buttons.append([InlineKeyboardButton(text=t["back"], callback_data="back_to_settings")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def purchase_confirmation_keyboard(package_id: str, lang: str) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏
    
    Args:
        package_id: ID –ø–∞–∫–µ—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
        lang: –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    """
    
    texts = {
        "ru": {
            "confirm": "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å",
            "cancel": "‚ùå –û—Ç–º–µ–Ω–∞"
        },
        "uk": {
            "confirm": "üí≥ –°–ø–ª–∞—Ç–∏—Ç–∏", 
            "cancel": "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"
        },
        "en": {
            "confirm": "üí≥ Pay",
            "cancel": "‚ùå Cancel"
        }
    }
    
    t = texts.get(lang, texts["en"])
    
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=t["confirm"], callback_data=f"confirm_purchase_{package_id}")],
        [InlineKeyboardButton(text=t["cancel"], callback_data="subscription_menu")]
    ])

def subscription_upsell_keyboard(lang: str) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–æ–¥–ø–∏—Å–∫–µ (–∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ª–∏–º–∏—Ç—ã)
    
    Args:
        lang: –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    """
    
    texts = {
        "ru": {
            "subscribe": "üíé –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
            "later": "‚è≠ –ü–æ–∑–∂–µ"
        },
        "uk": {
            "subscribe": "üíé –û—Ñ–æ—Ä–º–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É",
            "later": "‚è≠ –ü—ñ–∑–Ω—ñ—à–µ"
        },
        "en": {
            "subscribe": "üíé Get subscription", 
            "later": "‚è≠ Later"
        }
    }
    
    t = texts.get(lang, texts["en"])
    
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=t["subscribe"], callback_data="subscription_menu")],
        [InlineKeyboardButton(text=t["later"], callback_data="dismiss_upsell")]
    ])

def cancel_subscription_confirmation(lang: str) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏
    
    Args:
        lang: –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    """
    
    texts = {
        "ru": {
            "confirm": "‚ö†Ô∏è –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å",
            "cancel": "‚úÖ –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å"
        },
        "uk": {
            "confirm": "‚ö†Ô∏è –¢–∞–∫, —Å–∫–∞—Å—É–≤–∞—Ç–∏",
            "cancel": "‚úÖ –ù—ñ, –∑–∞–ª–∏—à–∏—Ç–∏"
        },
        "en": {
            "confirm": "‚ö†Ô∏è Yes, cancel",
            "cancel": "‚úÖ No, keep it"
        }
    }
    
    t = texts.get(lang, texts["en"])
    
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=t["confirm"], callback_data="confirm_cancel_subscription")],
        [InlineKeyboardButton(text=t["cancel"], callback_data="subscription_menu")]
    ])

def payment_processing_keyboard(lang: str) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞
    
    Args:
        lang: –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    """
    
    texts = {
        "ru": {
            "back": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–ø–∏—Å–∫–∞–º"
        },
        "uk": {
            "back": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –ø—ñ–¥–ø–∏—Å–æ–∫"
        },
        "en": {
            "back": "‚¨ÖÔ∏è Back to subscriptions"
        }
    }
    
    t = texts.get(lang, texts["en"])
    
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=t["back"], callback_data="subscription_menu")]
    ])

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–∫–µ—Ç–∞—Ö

def get_package_description(package_id: str, lang: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏"""
    
    package_info = StripeConfig.get_package_info(package_id)
    if not package_info:
        return "Package not found"
    
    # –¢–µ–∫—Å—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤
    texts = {
        "ru": {
            "subscription_desc": f"üîÑ –ü–æ–¥–ø–∏—Å–∫–∞ —Å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü",
            "one_time_desc": f"üìÖ –†–∞–∑–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π",
            "features_title": "üìã –ß—Ç–æ –≤—Ö–æ–¥–∏—Ç:",
            "price_label": "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:"
        },
        "uk": {
            "subscription_desc": f"üîÑ –ü—ñ–¥–ø–∏—Å–∫–∞ –∑ –∞–≤—Ç–æ–ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è–º —â–æ–º—ñ—Å—è—Ü—è",
            "one_time_desc": f"üìÖ –†–∞–∑–æ–≤–∞ –ø–æ–∫—É–ø–∫–∞ –Ω–∞ 30 –¥–Ω—ñ–≤", 
            "features_title": "üìã –©–æ –≤—Ö–æ–¥–∏—Ç—å:",
            "price_label": "üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å:"
        },
        "en": {
            "subscription_desc": f"üîÑ Subscription with monthly auto-renewal",
            "one_time_desc": f"üìÖ One-time purchase for 30 days",
            "features_title": "üìã What's included:",
            "price_label": "üí∞ Price:"
        }
    }
    
    t = texts.get(lang, texts["ru"])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    description_parts = []
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    description_parts.append(f"**{package_info['user_friendly_name']}**")
    
    # –¶–µ–Ω–∞
    if package_info['type'] == 'subscription':
        price_text = f"{package_info['price_display']}/month"
        type_desc = t["subscription_desc"]
    else:
        price_text = package_info['price_display']
        type_desc = t["one_time_desc"]
    
    description_parts.append(f"{t['price_label']} {price_text}")
    description_parts.append(type_desc)
    description_parts.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    
    # –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
    description_parts.append(t["features_title"])
    features = package_info.get('features', {}).get(lang, [])
    for feature in features:
        description_parts.append(f"‚úÖ {feature}")
    
    return "\n".join(description_parts)