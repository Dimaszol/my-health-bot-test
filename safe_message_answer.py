import logging
import traceback
from typing import Union, Optional
from aiogram import types

logger = logging.getLogger(__name__)

async def send_safe_message(
    message: types.Message, 
    text: str, 
    parse_mode: Optional[str] = "HTML",
    is_error: bool = False,
    **kwargs
) -> bool:
    """
    üõ°Ô∏è –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–ô
    
    Args:
        message: Telegram message –æ–±—ä–µ–∫—Ç
        text: –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        parse_mode: –†–µ–∂–∏–º —Ä–∞–∑–º–µ—Ç–∫–∏ (HTML, Markdown, None)
        is_error: True –µ—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        
    Returns:
        bool: True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
    """
    
    user_id = message.from_user.id
    
    try:
        # üìä –õ–û–ì–ò–†–£–ï–ú –ü–û–ü–´–¢–ö–£ –û–¢–ü–†–ê–í–ö–ò
        msg_type = "ERROR" if is_error else "RESPONSE"
        logger.info(f"üì§ [SEND-{msg_type}] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        logger.debug(f"üìù [SEND-{msg_type}] –î–ª–∏–Ω–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # üö® –ü–†–û–í–ï–†–Ø–ï–ú –î–õ–ò–ù–£ –°–û–û–ë–©–ï–ù–ò–Ø
        if len(text) > 4096:
            logger.warning(f"‚ö†Ô∏è [SEND-{msg_type}] –î–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏")
            return await _send_long_message(message, text, parse_mode, **kwargs)
        
        # üö® –ü–†–û–í–ï–†–Ø–ï–ú –ù–ê –ü–£–°–¢–û–ï –°–û–û–ë–©–ï–ù–ò–ï
        if not text or text.strip() == "":
            logger.error(f"‚ùå [SEND-{msg_type}] –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            parse_mode = None
        
        # üì§ –û–¢–ü–†–ê–í–õ–Ø–ï–ú –°–û–û–ë–©–ï–ù–ò–ï
        sent_message = await message.answer(
            text=text,
            parse_mode=parse_mode,
            **kwargs
        )
        
        # ‚úÖ –£–°–ü–ï–•
        logger.info(f"‚úÖ [SEND-{msg_type}] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}, ID: {sent_message.message_id}")
        return True
        
    except Exception as e:
        # ‚ùå –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –û–®–ò–ë–ö–ò
        error_type = type(e).__name__
        error_msg = str(e)
        
        logger.error(f"‚ùå [SEND-{msg_type}] –û—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {error_type}: {error_msg}")
        logger.error(f"üìã [SEND-{msg_type}] –¢–µ–∫—Å—Ç: {repr(text[:200])}")
        logger.error(f"üìã [SEND-{msg_type}] Traceback:\n{traceback.format_exc()}")
        
        # üîç –ê–ù–ê–õ–ò–ó–ò–†–£–ï–ú –û–®–ò–ë–ö–ò TELEGRAM
        if "Forbidden" in error_msg:
            logger.error(f"üö´ [SEND-{msg_type}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
        elif "Bad Request" in error_msg or "Entity" in error_msg:
            logger.error(f"üîß [SEND-{msg_type}] –ü—Ä–æ–±–ª–µ–º–∞ —Å HTML —Ä–∞–∑–º–µ—Ç–∫–æ–π")
            
            # –ü—Ä–æ–±—É–µ–º –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏
            try:
                logger.info(f"üîÑ [SEND-{msg_type}] –ü–æ–≤—Ç–æ—Ä –±–µ–∑ HTML —Ä–∞–∑–º–µ—Ç–∫–∏...")
                await message.answer(text=text, parse_mode=None)
                logger.info(f"‚úÖ [SEND-{msg_type}] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                return True
            except Exception as e2:
                logger.error(f"‚ùå [SEND-{msg_type}] –î–∞–∂–µ –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏ –æ—à–∏–±–∫–∞: {e2}")
        
        # üö® –ü–û–°–õ–ï–î–ù–Ø–Ø –ü–û–ü–´–¢–ö–ê - –ü–†–û–°–¢–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï
        try:
            await message.answer(
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º.",
                parse_mode=None
            )
            logger.info(f"‚úÖ [SEND-{msg_type}] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e3:
            logger.error(f"üí• [SEND-{msg_type}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e3}")
        
        return False

async def _send_long_message(message, text, parse_mode=None, **kwargs):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Å—Ç—è–º–∏"""
    user_id = message.from_user.id
    chunk_size = 4000
    chunks = [text[i:i + chunk_size] for i in range(0, len(text), chunk_size)]
    
    logger.info(f"üìã [SEND] –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ {len(chunks)} —á–∞—Å—Ç–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    for i, chunk in enumerate(chunks):
        try:
            if i == 0:
                await message.answer(text=chunk, parse_mode=parse_mode, **kwargs)
            else:
                await message.answer(text=chunk, parse_mode=None)
            
            logger.info(f"‚úÖ [SEND] –ß–∞—Å—Ç—å {i+1}/{len(chunks)} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            
            if i < len(chunks) - 1:
                import asyncio
                await asyncio.sleep(0.3)
                
        except Exception as e:
            logger.error(f"‚ùå [SEND] –û—à–∏–±–∫–∞ —á–∞—Å—Ç–∏ {i+1}: {e}")
            return False
    
    return True

# üéØ –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–®–ò–ë–û–ö (—É–ø—Ä–æ—â–∞–µ—Ç –∑–∞–º–µ–Ω—É –≤ –∫–æ–¥–µ)
async def send_error_message(message: types.Message, error_text: str) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ (–±–µ–∑ HTML —Ä–∞–∑–º–µ—Ç–∫–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
    
    Args:
        message: Telegram message –æ–±—ä–µ–∫—Ç  
        error_text: –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ (—É–∂–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π)
        
    Returns:
        bool: True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
    """
    return await send_safe_message(
        message=message, 
        text=error_text, 
        parse_mode=None,  # –ë–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏ –¥–ª—è –æ—à–∏–±–æ–∫
        is_error=True
    )

# üéØ –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–ë–´–ß–ù–´–• –û–¢–í–ï–¢–û–í
async def send_response_message(message: types.Message, response_text: str) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (—Å HTML —Ä–∞–∑–º–µ—Ç–∫–æ–π)
    
    Args:
        message: Telegram message –æ–±—ä–µ–∫—Ç
        response_text: –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        
    Returns:
        bool: True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
    """
    return await send_safe_message(
        message=message, 
        text=response_text, 
        parse_mode="HTML",
        is_error=False
    )