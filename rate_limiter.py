# rate_limiter.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ async –≤—ã–∑–æ–≤–∞–º–∏

import time
import logging
import asyncio
from typing import Dict, Tuple
from collections import defaultdict

logger = logging.getLogger(__name__)

def get_user_language_sync(user_id: int) -> str:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è rate limiter"""
    import sqlite3
    try:
        conn = sqlite3.connect("users.db")
        cursor = conn.cursor()
        cursor.execute("SELECT language FROM users WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()
        conn.close()
        return result[0] if result and result[0] else "ru"
    except:
        return "ru"  # Fallback

# –ó–ê–ú–ï–ù–ò –í–ï–°–¨ –ö–õ–ê–°–° RateLimiter –≤ rate_limiter.py –Ω–∞ —ç—Ç–æ—Ç:

class RateLimiter:
    """
    ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è –±–µ–∑ race conditions
    """
    
    def __init__(self):
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–ø—Ä–æ—Å–æ–≤
        self.user_requests: Dict[int, list] = defaultdict(list)
        self.blocked_users: Dict[int, float] = {}
        
        # ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—Ç–¥–µ–ª—å–Ω—ã–π lock –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_locks: Dict[int, asyncio.Lock] = defaultdict(asyncio.Lock)
        self.locks_lock = asyncio.Lock()  # –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å user_locks
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏–º–∏—Ç–æ–≤ (—Ç–µ –∂–µ —á—Ç–æ –±—ã–ª–∏)
        self.limits = {
            "message": {"count": 10, "window": 60, "cooldown": 30},
            "document": {"count": 3, "window": 300, "cooldown": 120},
            "image": {"count": 3, "window": 600, "cooldown": 300},
            "note": {"count": 5, "window": 300, "cooldown": 60}
        }
    
    async def _get_user_lock(self, user_id: int) -> asyncio.Lock:
        """–ü–æ–ª—É—á–∏—Ç—å lock –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (thread-safe)"""
        async with self.locks_lock:
            if user_id not in self.user_locks:
                self.user_locks[user_id] = asyncio.Lock()
            return self.user_locks[user_id]
    
    async def is_blocked(self, user_id: int) -> Tuple[bool, int]:
        """
        ‚úÖ ASYNC –≤–µ—Ä—Å–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        """
        current_time = time.time()
        
        # –ü–æ–ª—É—á–∞–µ–º lock –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_lock = await self._get_user_lock(user_id)
        
        async with user_lock:
            if user_id in self.blocked_users:
                unblock_time = self.blocked_users[user_id]
                if current_time < unblock_time:
                    remaining = int(unblock_time - current_time)
                    return True, remaining
                else:
                    # –í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏—Å—Ç–µ–∫–ª–æ
                    del self.blocked_users[user_id]
                    
            return False, 0
    
    async def check_limit(self, user_id: int, action_type: str = "message") -> Tuple[bool, str]:
        """
        ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è –±–µ–∑ race condition
        """
        current_time = time.time()
        
        # ‚úÖ –ê–¢–û–ú–ê–†–ù–ê–Ø –û–ü–ï–†–ê–¶–ò–Ø –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_lock = await self._get_user_lock(user_id)
        
        async with user_lock:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            if user_id in self.blocked_users:
                unblock_time = self.blocked_users[user_id]
                if current_time < unblock_time:
                    remaining = int(unblock_time - current_time)
                    lang = get_user_language_sync(user_id)
                    minutes = remaining // 60
                    seconds = remaining % 60
                    time_str = f"{minutes} –º–∏–Ω {seconds} —Å–µ–∫" if minutes > 0 else f"{seconds} —Å–µ–∫"
                    
                    messages = {
                        "ru": f"‚è≥ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {time_str}",
                        "en": f"‚è≥ Rate limit exceeded. Try again in {time_str}",
                        "uk": f"‚è≥ –ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {time_str}"
                    }
                    return False, messages.get(lang, messages["ru"])
                else:
                    del self.blocked_users[user_id]
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if action_type not in self.limits:
                action_type = "message"
            
            limit_config = self.limits[action_type]
            window_start = current_time - limit_config["window"]
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            self.user_requests[user_id] = [
                req_time for req_time in self.user_requests[user_id] 
                if req_time > window_start
            ]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
            request_count = len(self.user_requests[user_id])
            
            if request_count >= limit_config["count"]:
                # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                self.blocked_users[user_id] = current_time + limit_config["cooldown"]
                
                lang = get_user_language_sync(user_id)
                
                action_names = {
                    "ru": {"message": "—Å–æ–æ–±—â–µ–Ω–∏–π", "document": "–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", "image": "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", "note": "–∑–∞–º–µ—Ç–æ–∫"},
                    "en": {"message": "messages", "document": "documents", "image": "images", "note": "notes"},
                    "uk": {"message": "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å", "document": "–¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤", "image": "–∑–æ–±—Ä–∞–∂–µ–Ω—å", "note": "–Ω–æ—Ç–∞—Ç–æ–∫"}
                }
                
                cooldown_min = limit_config["cooldown"] // 60
                window_min = limit_config["window"] // 60
                action_name = action_names.get(lang, action_names["ru"]).get(action_type, "–∑–∞–ø—Ä–æ—Å–æ–≤")
                
                messages = {
                    "ru": f"üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç: –º–∞–∫—Å–∏–º—É–º {limit_config['count']} {action_name} –∑–∞ {window_min} –º–∏–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {cooldown_min} –º–∏–Ω.",
                    "en": f"üö´ Rate limit exceeded: max {limit_config['count']} {action_name} per {window_min} min. Try again in {cooldown_min} min.",
                    "uk": f"üö´ –ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç: –º–∞–∫—Å–∏–º—É–º {limit_config['count']} {action_name} –∑–∞ {window_min} —Ö–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {cooldown_min} —Ö–≤."
                }
                
                logger.warning(f"Rate limit exceeded for user {user_id}, action {action_type}")
                return False, messages.get(lang, messages["ru"])
            
            return True, ""
    
    async def record_request(self, user_id: int, action_type: str = "message"):
        """
        ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è –∑–∞–ø–∏—Å–∏ –∑–∞–ø—Ä–æ—Å–∞
        """
        current_time = time.time()
        
        user_lock = await self._get_user_lock(user_id)
        
        async with user_lock:
            self.user_requests[user_id].append(current_time)
            logger.info(f"Request recorded: user {user_id}, action {action_type}")
    
    def get_user_stats(self, user_id: int) -> Dict[str, int]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–°–ò–ù–•–†–û–ù–ù–ê–Ø - –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã)
        """
        current_time = time.time()
        hour_ago = current_time - 3600
        
        user_requests = self.user_requests.get(user_id, [])
        recent_requests = [req for req in user_requests if req > hour_ago]
        
        return {
            "total_requests_last_hour": len(recent_requests),
            "is_blocked": user_id in self.blocked_users,
            "requests_in_memory": len(user_requests)
        }
    
    async def cleanup_old_data(self):
        """
        ‚úÖ ASYNC –≤–µ—Ä—Å–∏—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        """
        current_time = time.time()
        day_ago = current_time - 86400
        
        # –û—á–∏—â–∞–µ–º –ø–æ –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞ —Ä–∞–∑
        users_to_process = list(self.user_requests.keys())
        
        for user_id in users_to_process:
            user_lock = await self._get_user_lock(user_id)
            
            async with user_lock:
                # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
                recent_requests = [
                    req for req in self.user_requests[user_id] 
                    if req > day_ago
                ]
                
                if recent_requests:
                    self.user_requests[user_id] = recent_requests
                else:
                    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –∑–∞–ø—Ä–æ—Å–æ–≤
                    del self.user_requests[user_id]
                    # –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –µ–≥–æ lock
                    async with self.locks_lock:
                        self.user_locks.pop(user_id, None)
        
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç—ë–∫—à–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        expired_blocks = [
            user_id for user_id, unblock_time in self.blocked_users.items()
            if current_time > unblock_time
        ]
        for user_id in expired_blocks:
            del self.blocked_users[user_id]
            
        logger.info(f"Cleanup completed: removed expired data")

# –°–æ–∑–¥–∞—ë–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
rate_limiter = RateLimiter()

async def check_rate_limit(user_id: int, action_type: str = "message") -> Tuple[bool, str]:
    """‚úÖ ASYNC –≤–µ—Ä—Å–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤"""
    return await rate_limiter.check_limit(user_id, action_type)

async def record_user_action(user_id: int, action_type: str = "message"):
    """‚úÖ ASYNC –≤–µ—Ä—Å–∏—è –∑–∞–ø–∏—Å–∏ –¥–µ–π—Å—Ç–≤–∏—è"""
    await rate_limiter.record_request(user_id, action_type)

def get_rate_limit_stats(user_id: int) -> Dict[str, int]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return rate_limiter.get_user_stats(user_id)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ (–º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å —Ä–∞–∑ –≤ —á–∞—Å)
def cleanup_rate_limiter():
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ rate limiter"""
    rate_limiter.cleanup_old_data()

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
if __name__ == "__main__":
    # –¢–µ—Å—Ç rate limiter
    test_user = 123456
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ rate limiter...")
    
    # –¢–µ—Å—Ç –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ª–∏–º–∏—Ç 15)
    for i in range(17):  # –ë–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞
        allowed, message = check_rate_limit(test_user, "message")
        if allowed:
            record_user_action(test_user, "message")
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {i+1}: —Ä–∞–∑—Ä–µ—à–µ–Ω–æ")
        else:
            print(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ {i+1}: {message}")
            break
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = get_rate_limit_stats(test_user)
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")