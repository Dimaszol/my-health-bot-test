# rate_limiter.py - –£–ü–†–û–©–ï–ù–ù–ê–Ø –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø

import time
import logging
import asyncio
import os
from typing import Dict, Tuple
from collections import defaultdict
from datetime import datetime, timedelta
from db_postgresql import t
from subscription_manager import SubscriptionManager

logger = logging.getLogger(__name__)

def get_user_language_sync(user_id: int) -> str:
    """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è PostgreSQL"""
    try:
        import psycopg2
        
        DATABASE_URL = os.getenv("DATABASE_URL")
        if not DATABASE_URL:
            return "ru"
            
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        cursor.execute("SELECT language FROM users WHERE user_id = %s", (user_id,))
        result = cursor.fetchone()
        conn.close()
        
        return result[0] if result and result[0] else "ru"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return "ru"  # Fallback

class RateLimiter:
    """
    ‚úÖ –£–ü–†–û–©–ï–ù–ù–ê–Ø –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø:
    - –ú–∏–Ω—É—Ç–Ω—ã–µ –ª–∏–º–∏—Ç—ã –¢–û–õ–¨–ö–û –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π (–∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ GPT)
    - –û—Å—Ç–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –¢–û–õ–¨–ö–û –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º –ª–∏–º–∏—Ç–∞–º –ø–æ–¥–ø–∏—Å–∫–∏
    """
    
    def __init__(self):
        # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        self.user_requests: Dict[int, list] = defaultdict(list)
        self.blocked_users: Dict[int, float] = {}
        self.user_locks: Dict[int, asyncio.Lock] = defaultdict(asyncio.Lock)
        self.locks_lock = asyncio.Lock()
        
        # ‚úÖ –ù–û–í–û–ï: –î–Ω–µ–≤–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤
        self.daily_message_counts: Dict[int, Dict[str, int]] = defaultdict(dict)
        
        # ‚úÖ –£–ü–†–û–©–ï–ù–û: –ú–∏–Ω—É—Ç–Ω—ã–µ –ª–∏–º–∏—Ç—ã –¢–û–õ–¨–ö–û –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π!
        self.message_limits = {
            "new_user": {
                "count": 15,       # 15 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤
                "window": 60,      # –∑–∞ 1 –º–∏–Ω—É—Ç—É
                "cooldown": 120    # –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞ 2 –º–∏–Ω—É—Ç—ã
            },
            "regular_user": {
                "count": 8,        # 8 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—ã—á–Ω—ã—Ö
                "window": 60,      # –∑–∞ 1 –º–∏–Ω—É—Ç—É
                "cooldown": 180    # –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞ 3 –º–∏–Ω—É—Ç—ã
            }
        }
        
    async def _get_user_lock(self, user_id: int) -> asyncio.Lock:
        """–ü–æ–ª—É—á–∏—Ç—å lock –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (thread-safe)"""
        async with self.locks_lock:
            if user_id not in self.user_locks:
                self.user_locks[user_id] = asyncio.Lock()
            return self.user_locks[user_id]
    
    async def _is_new_user(self, user_id: int) -> bool:
        """
        üÜï –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–º (–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω < 24 —á–∞—Å–æ–≤)
        """
        try:
            from db_postgresql import fetch_one
            
            result = await fetch_one("""
                SELECT created_at FROM users WHERE user_id = ?
            """, (user_id,))
            
            if not result:
                logger.info(f"üë∂ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î - —Å—á–∏—Ç–∞–µ–º –Ω–æ–≤—ã–º")
                return True
            
            created_at = result[0]
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞—Ç—ã
            if isinstance(created_at, str):
                try:
                    created_at = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                except:
                    try:
                        created_at = datetime.strptime(created_at, "%Y-%m-%d %H:%M:%S")
                    except:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {created_at}")
                        return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –±–æ–ª—å—à–µ 24 —á–∞—Å–æ–≤
            now = datetime.now()
            if hasattr(created_at, 'replace') and created_at.tzinfo:
                created_at = created_at.replace(tzinfo=None)
            
            time_diff = now - created_at
            is_new = time_diff < timedelta(hours=24)
            
            if is_new:
                logger.info(f"üë∂ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} - –Ω–æ–≤–∏—á–æ–∫ (—Å–æ–∑–¥–∞–Ω {created_at}, –ø—Ä–æ—à–ª–æ {time_diff})")
            else:
                logger.info(f"üë® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} - –æ–ø—ã—Ç–Ω—ã–π (—Å–æ–∑–¥–∞–Ω {created_at}, –ø—Ä–æ—à–ª–æ {time_diff})")
            
            return is_new
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return True  # –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å—á–∏—Ç–∞–µ–º –Ω–æ–≤—ã–º
    
    def _get_today_key(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è"""
        return datetime.now().strftime("%Y-%m-%d")
    
    def _get_week_key(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –¥–ª—è —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)"""
        today = datetime.now()
        monday = today - timedelta(days=today.weekday())
        return monday.strftime("%Y-W%U")
    
    def _get_period_count(self, user_id: int, action_type: str) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥ (–¥–µ–Ω—å –∏–ª–∏ –Ω–µ–¥–µ–ª—é)"""
        subscription_type = self._get_subscription_type_sync(user_id)
        
        if subscription_type == 'subscription':
            # –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ - —Å—á–∏—Ç–∞–µ–º –ø–æ –¥–Ω—è–º
            period_key = self._get_today_key()
        else:
            # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ - —Å—á–∏—Ç–∞–µ–º –ø–æ –Ω–µ–¥–µ–ª—è–º
            period_key = self._get_week_key()
        
        user_data = self.daily_message_counts.get(user_id, {})
        return user_data.get(f"{period_key}_{action_type}", 0)

    def _increment_period_count(self, user_id: int, action_type: str):
        """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥ (–¥–µ–Ω—å –∏–ª–∏ –Ω–µ–¥–µ–ª—é)"""
        subscription_type = self._get_subscription_type_sync(user_id)
        
        if user_id not in self.daily_message_counts:
            self.daily_message_counts[user_id] = {}
        
        if subscription_type == 'subscription':
            period_key = self._get_today_key()
        else:
            period_key = self._get_week_key()
        
        key = f"{period_key}_{action_type}"
        self.daily_message_counts[user_id][key] = self.daily_message_counts[user_id].get(key, 0) + 1

    def _get_subscription_type_sync(self, user_id: int) -> str:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            import psycopg2
            DATABASE_URL = os.getenv("DATABASE_URL")
            if not DATABASE_URL:
                return "free"
                
            conn = psycopg2.connect(DATABASE_URL)
            cursor = conn.cursor()
            cursor.execute("SELECT subscription_type FROM user_limits WHERE user_id = %s", (user_id,))
            result = cursor.fetchone()
            conn.close()
            
            return result[0] if result and result[0] else "free"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return "free"
    
    async def check_limit(self, user_id: int, action_type: str = "message") -> Tuple[bool, str]:
        """
        ‚úÖ –£–ü–†–û–©–ï–ù–ù–ê–Ø –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê:
        - –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π: –º–∏–Ω—É—Ç–Ω—ã–µ –ª–∏–º–∏—Ç—ã + –æ—Å–Ω–æ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã
        - –î–ª—è –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ: –¢–û–õ–¨–ö–û –æ—Å–Ω–æ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏
        """
        current_time = time.time()
        user_lock = await self._get_user_lock(user_id)
        
        async with user_lock:
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π)
            if action_type == "message" and user_id in self.blocked_users:
                unblock_time = self.blocked_users[user_id]
                if current_time < unblock_time:
                    remaining = int(unblock_time - current_time)
                    lang = get_user_language_sync(user_id)
                    minutes = remaining // 60
                    seconds = remaining % 60
                    time_str = f"{minutes} –º–∏–Ω {seconds} —Å–µ–∫" if minutes > 0 else f"{seconds} —Å–µ–∫"
                    
                    try:
                        text = t("rate_limit_exceeded_time", lang, time_str=time_str)
                    except:
                        text = f"‚è≥ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {time_str}"
                    
                    return False, text
                else:
                    del self.blocked_users[user_id]
            
            # 2. ‚úÖ –û–°–ù–û–í–ù–´–ï –õ–ò–ú–ò–¢–´: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –ª–∏–º–∏—Ç—ã (–¥–µ–Ω—å/–Ω–µ–¥–µ–ª—è)
            period_count = self._get_period_count(user_id, action_type)
            period_limit = await self._get_daily_limit_for_user(user_id, action_type)
            
            if period_count >= period_limit:
                lang = get_user_language_sync(user_id)
                subscription_type = self._get_subscription_type_sync(user_id)
                
                # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
                try:
                    action_name_key = f"action_{action_type}s" if action_type != "message" else "action_messages"
                    action_name = t(action_name_key, lang)
                except:
                    action_names = {
                        "message": "—Å–æ–æ–±—â–µ–Ω–∏–π",
                        "document": "–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", 
                        "image": "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
                        "note": "–∑–∞–º–µ—Ç–æ–∫",
                        "pills": "–∏–∑–º–µ–Ω–µ–Ω–∏–π –ª–µ–∫–∞—Ä—Å—Ç–≤"
                    }
                    action_name = action_names.get(action_type, "–∑–∞–ø—Ä–æ—Å–æ–≤")
                
                # –†–∞–∑–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–Ω–µ–≤–Ω—ã—Ö –∏ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤
                if subscription_type == 'subscription':
                    try:
                        text = t("daily_limit_reached_premium", lang, 
                                daily_limit=period_limit, action_name=action_name)
                    except:
                        text = f"üìä –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç {action_name}: {period_limit}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞."
                else:
                    try:
                        text = t("weekly_limit_exceeded_free", lang, 
                                weekly_limit=period_limit, action_name=action_name)
                    except:
                        text = f"üìä –ù–µ–¥–µ–ª—å–Ω—ã–π –ª–∏–º–∏—Ç {action_name}: {period_limit}. –û–±–Ω–æ–≤–∏—Ç—Å—è –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫."
                
                logger.warning(f"Period limit exceeded for user {user_id}, action {action_type}: {period_count}/{period_limit}")
                return False, text
            
            # 3. ‚úÖ –ú–ò–ù–£–¢–ù–´–ï –õ–ò–ú–ò–¢–´: –¢–û–õ–¨–ö–û –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π!
            if action_type == "message":
                is_new_user = await self._is_new_user(user_id)
                
                # –í—ã–±–∏—Ä–∞–µ–º –ª–∏–º–∏—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if is_new_user:
                    limit_config = self.message_limits["new_user"]
                    logger.info(f"üë∂ –ü—Ä–∏–º–µ–Ω—è–µ–º –ª—å–≥–æ—Ç–Ω—ã–µ –ª–∏–º–∏—Ç—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                else:
                    limit_config = self.message_limits["regular_user"]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω—É—Ç–Ω—ã–µ –ª–∏–º–∏—Ç—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
                window_start = current_time - limit_config["window"]
                
                if user_id not in self.user_requests:
                    self.user_requests[user_id] = []
                    
                self.user_requests[user_id] = [
                    req_time for req_time in self.user_requests[user_id] 
                    if req_time > window_start
                ]
                
                request_count = len(self.user_requests[user_id])
                
                if request_count >= limit_config["count"]:
                    # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    self.blocked_users[user_id] = current_time + limit_config["cooldown"]
                    
                    lang = get_user_language_sync(user_id)
                    
                    try:
                        action_name = t("action_messages", lang)
                    except:
                        action_name = "—Å–æ–æ–±—â–µ–Ω–∏–π"
                    
                    cooldown_min = limit_config["cooldown"] // 60
                    
                    # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    if is_new_user:
                        try:
                            text = t("rate_limit_new_user", lang, 
                                    count=limit_config['count'], 
                                    action_name=action_name, 
                                    cooldown_min=cooldown_min)
                        except:
                            text = f"üë∂ –î–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: –ª–∏–º–∏—Ç {action_name} {limit_config['count']}. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {cooldown_min} –º–∏–Ω."
                    else:
                        try:
                            text = t("rate_limit_short", lang, 
                                    count=limit_config['count'], 
                                    action_name=action_name, 
                                    window_min=1, 
                                    cooldown_min=cooldown_min)
                        except:
                            text = f"‚è≥ –õ–∏–º–∏—Ç {action_name}: {limit_config['count']}/–º–∏–Ω. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {cooldown_min}–º–∏–Ω."

                    status = "–Ω–æ–≤—ã–π" if is_new_user else "–æ–±—ã—á–Ω—ã–π"
                    logger.warning(f"Message rate limit exceeded for {status} user {user_id}")
                    return False, text

            # 4. ‚úÖ –í–°–ï –û–°–¢–ê–õ–¨–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø: –ø—Ä–æ—Ö–æ–¥—è—Ç –±–µ–∑ –º–∏–Ω—É—Ç–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫!
            # –î–æ–∫—É–º–µ–Ω—Ç—ã, –∑–∞–º–µ—Ç–∫–∏, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏ –≤—ã—à–µ
            
            return True, ""

    async def _get_daily_limit_for_user(self, user_id: int, action_type: str) -> int:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        """
        try:
            limits_info = await SubscriptionManager.get_user_limits(user_id)
            subscription_type = limits_info.get('subscription_type', 'free')
            
            if subscription_type == 'subscription':
                # –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ - –î–ù–ï–í–ù–´–ï –ª–∏–º–∏—Ç—ã
                subscription_limits = {                     
                    "message": 100,   # —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å                     
                    "document": 40,   # –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –¥–µ–Ω—å                       
                    "image": 10,      # –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –¥–µ–Ω—å                     
                    "note": 10,       # –∑–∞–º–µ—Ç–æ–∫ –≤ –¥–µ–Ω—å
                    "pills": 10,      # –∏–∑–º–µ–Ω–µ–Ω–∏–π –ª–µ–∫–∞—Ä—Å—Ç–≤ –≤ –¥–µ–Ω—å                
                    "summary": 15
                }             
            else:                 
                # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - –ù–ï–î–ï–õ–¨–ù–´–ï –ª–∏–º–∏—Ç—ã                 
                subscription_limits = {                     
                    "message": 50,    # —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ù–ï–î–ï–õ–Æ                     
                    "document": 10,   # –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –ù–ï–î–ï–õ–Æ                     
                    "image": 15,      # –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ù–ï–î–ï–õ–Æ                     
                    "note": 5,        # –∑–∞–º–µ—Ç–æ–∫ –≤ –ù–ï–î–ï–õ–Æ
                    "pills": 5,       # –∏–∑–º–µ–Ω–µ–Ω–∏–π –ª–µ–∫–∞—Ä—Å—Ç–≤ –≤ –ù–ï–î–ï–õ–Æ               
                    "summary": 5
                }
                
            return subscription_limits.get(action_type, 20)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return 20
    
    async def record_request(self, user_id: int, action_type: str = "message"):
        """
        –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        current_time = time.time()
        user_lock = await self._get_user_lock(user_id)
        
        async with user_lock:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–ª—è –º–∏–Ω—É—Ç–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è)
            if action_type == "message":
                self.user_requests[user_id].append(current_time)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –ª–∏–º–∏—Ç–æ–≤ (–≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è)
            self._increment_period_count(user_id, action_type)
            
            logger.info(f"Request recorded: user {user_id}, action {action_type}")
    
    def reset_user_counters(self, user_id: int):
        """üßπ –í–†–ï–ú–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id in self.daily_message_counts:
            del self.daily_message_counts[user_id]
        if user_id in self.user_requests:
            del self.user_requests[user_id]
        if user_id in self.blocked_users:
            del self.blocked_users[user_id]
        logger.info(f"üßπ –°—á–µ—Ç—á–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–±—Ä–æ—à–µ–Ω—ã")
    
    async def cleanup_old_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        current_time = time.time()
        day_ago = current_time - 86400
        
        # –û—á–∏—â–∞–µ–º –º–∏–Ω—É—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        users_to_process = list(self.user_requests.keys())
        
        for user_id in users_to_process:
            user_lock = await self._get_user_lock(user_id)
            
            async with user_lock:
                recent_requests = [
                    req for req in self.user_requests[user_id] 
                    if req > day_ago
                ]
                
                if recent_requests:
                    self.user_requests[user_id] = recent_requests
                else:
                    del self.user_requests[user_id]
                    async with self.locks_lock:
                        self.user_locks.pop(user_id, None)
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–Ω–µ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        today = datetime.now()
        cutoff_date = (today - timedelta(days=7)).strftime("%Y-%m-%d")
        
        for user_id in list(self.daily_message_counts.keys()):
            user_daily = self.daily_message_counts[user_id]
            
            filtered_daily = {}
            for key, count in user_daily.items():
                if "_" in key:
                    date_part = key.split("_")[0]
                    if date_part >= cutoff_date:
                        filtered_daily[key] = count
            
            if filtered_daily:
                self.daily_message_counts[user_id] = filtered_daily
            else:
                del self.daily_message_counts[user_id]
        
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç—ë–∫—à–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        expired_blocks = [
            user_id for user_id, unblock_time in self.blocked_users.items()
            if current_time > unblock_time
        ]
        for user_id in expired_blocks:
            del self.blocked_users[user_id]
            
        logger.info(f"Cleanup completed: removed expired data")

# –°–æ–∑–¥–∞—ë–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
rate_limiter = RateLimiter()

# ‚úÖ –ü–£–ë–õ–ò–ß–ù–´–ï –§–£–ù–ö–¶–ò–ò
async def check_rate_limit(user_id: int, action_type: str = "message") -> Tuple[bool, str]:
    """‚úÖ ASYNC –≤–µ—Ä—Å–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤"""
    return await rate_limiter.check_limit(user_id, action_type)

async def record_user_action(user_id: int, action_type: str = "message"):
    """‚úÖ ASYNC –≤–µ—Ä—Å–∏—è –∑–∞–ø–∏—Å–∏ –¥–µ–π—Å—Ç–≤–∏—è"""
    await rate_limiter.record_request(user_id, action_type)

async def cleanup_rate_limiter():
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ rate limiter"""
    await rate_limiter.cleanup_old_data()

def reset_user_counters(user_id: int):
    """üßπ –í–†–ï–ú–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    rate_limiter.reset_user_counters(user_id)

# ‚úÖ –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨: –û—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def check_daily_limit(user_id: int, action_type: str = "message") -> Tuple[bool, int, int]:
    daily_count = rate_limiter._get_period_count(user_id, action_type)
    daily_limit = await rate_limiter._get_daily_limit_for_user(user_id, action_type)
    return daily_count < daily_limit, daily_count, daily_limit

async def get_daily_stats(user_id: int) -> Dict[str, Dict[str, int]]:
    stats = {}
    action_types = ["message", "document", "image", "note", "pills", "summary"]
    
    for action_type in action_types:
        used = rate_limiter._get_period_count(user_id, action_type)
        limit = await rate_limiter._get_daily_limit_for_user(user_id, action_type)
        stats[action_type] = {"used": used, "limit": limit}
    
    return stats

if __name__ == "__main__":
    print("üö¶ Rate Limiter –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("üìã –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞:")
    print("   ‚Ä¢ –ú–∏–Ω—É—Ç–Ω—ã–µ –ª–∏–º–∏—Ç—ã –¢–û–õ–¨–ö–û –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π (–∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ GPT)")
    print("   ‚Ä¢ –û—Å—Ç–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è - —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏")
    print("   ‚Ä¢ –õ—å–≥–æ—Ç—ã –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (24 —á–∞—Å–∞)")
    print("   ‚Ä¢ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö")