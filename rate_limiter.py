# rate_limiter.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –¥–Ω–µ–≤–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏

import time
import logging
import asyncio
import os
from typing import Dict, Tuple
from collections import defaultdict
from datetime import datetime, timedelta
from db_postgresql import t
from subscription_manager import SubscriptionManager

logger = logging.getLogger(__name__)

def get_user_language_sync(user_id: int) -> str:
    """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è PostgreSQL"""
    try:
        import psycopg2
        
        DATABASE_URL = os.getenv("DATABASE_URL")
        if not DATABASE_URL:
            return "ru"
            
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        cursor.execute("SELECT language FROM users WHERE user_id = %s", (user_id,))
        result = cursor.fetchone()
        conn.close()
        
        return result[0] if result and result[0] else "ru"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return "ru"  # Fallback

class RateLimiter:
    """
    ‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –¥–Ω–µ–≤–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏
    """
    
    def __init__(self):
        # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (–æ—Å—Ç–∞—é—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å)
        self.user_requests: Dict[int, list] = defaultdict(list)
        self.blocked_users: Dict[int, float] = {}
        self.user_locks: Dict[int, asyncio.Lock] = defaultdict(asyncio.Lock)
        self.locks_lock = asyncio.Lock()
        
        # ‚úÖ –ù–û–í–û–ï: –î–Ω–µ–≤–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏
        self.daily_message_counts: Dict[int, Dict[str, int]] = defaultdict(dict)
        # –§–æ—Ä–º–∞—Ç: {user_id: {"2025-07-03_message": 45, "2025-07-03_document": 2}}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏–º–∏—Ç–æ–≤
        self.limits = {
            "message": {"count": 10, "window": 60, "cooldown": 30},
            "document": {"count": 3, "window": 300, "cooldown": 120},
            "image": {"count": 3, "window": 600, "cooldown": 300},
            "note": {"count": 5, "window": 300, "cooldown": 60}
        }
        
    async def _get_user_lock(self, user_id: int) -> asyncio.Lock:
        """–ü–æ–ª—É—á–∏—Ç—å lock –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (thread-safe)"""
        async with self.locks_lock:
            if user_id not in self.user_locks:
                self.user_locks[user_id] = asyncio.Lock()
            return self.user_locks[user_id]
    
    def _get_today_key(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è"""
        return datetime.now().strftime("%Y-%m-%d")
    
    def _get_week_key(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –¥–ª—è —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)"""
        today = datetime.now()
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
        monday = today - timedelta(days=today.weekday())
        return monday.strftime("%Y-W%U")  # –§–æ—Ä–º–∞—Ç: 2025-W27
    
    def _get_period_count(self, user_id: int, action_type: str) -> int:
        """
        –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥ (–¥–µ–Ω—å –∏–ª–∏ –Ω–µ–¥–µ–ª—é)
        """
        from subscription_manager import SubscriptionManager
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
        subscription_type = self._get_subscription_type_sync(user_id)
        
        if subscription_type == 'subscription':
            # –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ - —Å—á–∏—Ç–∞–µ–º –ø–æ –¥–Ω—è–º
            period_key = self._get_today_key()
            user_data = self.daily_message_counts.get(user_id, {})
            return user_data.get(f"{period_key}_{action_type}", 0)
        else:
            # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ - —Å—á–∏—Ç–∞–µ–º –ø–æ –Ω–µ–¥–µ–ª—è–º
            week_key = self._get_week_key()
            user_data = self.daily_message_counts.get(user_id, {})  # –ü–µ—Ä–µ–∏–º–µ–Ω—É–µ–º –ø–æ–∑–∂–µ
            return user_data.get(f"{week_key}_{action_type}", 0)

    def _increment_period_count(self, user_id: int, action_type: str):
        """
        –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥ (–¥–µ–Ω—å –∏–ª–∏ –Ω–µ–¥–µ–ª—é)
        """
        subscription_type = self._get_subscription_type_sync(user_id)
        
        if user_id not in self.daily_message_counts:
            self.daily_message_counts[user_id] = {}
        
        if subscription_type == 'subscription':
            # –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ - —Å—á–∏—Ç–∞–µ–º –ø–æ –¥–Ω—è–º
            period_key = self._get_today_key()
        else:
            # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ - —Å—á–∏—Ç–∞–µ–º –ø–æ –Ω–µ–¥–µ–ª—è–º
            period_key = self._get_week_key()
        
        key = f"{period_key}_{action_type}"
        self.daily_message_counts[user_id][key] = self.daily_message_counts[user_id].get(key, 0) + 1

    def _get_subscription_type_sync(self, user_id: int) -> str:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            import psycopg2
            DATABASE_URL = os.getenv("DATABASE_URL")
            if not DATABASE_URL:
                return "free"
                
            conn = psycopg2.connect(DATABASE_URL)
            cursor = conn.cursor()
            cursor.execute("SELECT subscription_type FROM user_limits WHERE user_id = %s", (user_id,))
            result = cursor.fetchone()
            conn.close()
            
            return result[0] if result and result[0] else "free"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return "free"
    
    async def is_blocked(self, user_id: int) -> Tuple[bool, int]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)"""
        current_time = time.time()
        user_lock = await self._get_user_lock(user_id)
        
        async with user_lock:
            if user_id in self.blocked_users:
                unblock_time = self.blocked_users[user_id]
                if current_time < unblock_time:
                    remaining = int(unblock_time - current_time)
                    return True, remaining
                else:
                    del self.blocked_users[user_id]
                    
            return False, 0
    
    async def check_limit(self, user_id: int, action_type: str = "message") -> Tuple[bool, str]:
        """
        –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        """
        current_time = time.time()
        user_lock = await self._get_user_lock(user_id)
        
        async with user_lock:
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
            if user_id in self.blocked_users:
                unblock_time = self.blocked_users[user_id]
                if current_time < unblock_time:
                    remaining = int(unblock_time - current_time)
                    lang = get_user_language_sync(user_id)
                    minutes = remaining // 60
                    seconds = remaining % 60
                    time_str = f"{minutes} –º–∏–Ω {seconds} —Å–µ–∫" if minutes > 0 else f"{seconds} —Å–µ–∫"
                    
                    try:
                        text = t("rate_limit_exceeded_time", lang, time_str=time_str)
                    except:
                        text = f"‚è≥ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {time_str}"
                    
                    return False, text
                else:
                    del self.blocked_users[user_id]
            
            # ‚úÖ 2. –ù–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ü–µ—Ä–∏–æ–¥ –ª–∏–º–∏—Ç (–¥–µ–Ω—å/–Ω–µ–¥–µ–ª—è) –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–¥–ø–∏—Å–∫–∏
            period_count = self._get_period_count(user_id, action_type)
            period_limit = await self._get_daily_limit_for_user(user_id, action_type)
            
            if period_count >= period_limit:
                lang = get_user_language_sync(user_id)
                subscription_type = self._get_subscription_type_sync(user_id)
                
                # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
                try:
                    action_name_key = f"action_{action_type}s" if action_type != "message" else "action_messages"
                    action_name = t(action_name_key, lang)
                except:
                    action_names = {
                        "message": "—Å–æ–æ–±—â–µ–Ω–∏–π",
                        "document": "–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", 
                        "image": "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
                        "note": "–∑–∞–º–µ—Ç–æ–∫"
                    }
                    action_name = action_names.get(action_type, "–∑–∞–ø—Ä–æ—Å–æ–≤")
                
                # ‚úÖ –ù–û–í–û–ï: –†–∞–∑–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–Ω–µ–≤–Ω—ã—Ö –∏ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤
                if subscription_type == 'subscription':
                    # –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ - –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
                    try:
                        text = t("daily_limit_reached_premium", lang, 
                                daily_limit=period_limit, action_name=action_name)
                    except:
                        text = f"üìä –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç {action_name}: {period_limit}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞."
                else:
                    # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ - –Ω–µ–¥–µ–ª—å–Ω—ã–π –ª–∏–º–∏—Ç
                    try:
                        text = t("weekly_limit_exceeded_free", lang, 
                                weekly_limit=period_limit, action_name=action_name)
                    except:
                        text = f"üìä –ù–µ–¥–µ–ª—å–Ω—ã–π –ª–∏–º–∏—Ç {action_name}: {period_limit}. –û–±–Ω–æ–≤–∏—Ç—Å—è –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫. üíé –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤!"

                logger.warning(f"Period limit exceeded for user {user_id}, action {action_type}: {period_count}/{period_limit}")
                return False, text
            
            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω—É—Ç–Ω—ã–µ –ª–∏–º–∏—Ç—ã (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
            if action_type not in self.limits:
                action_type = "message"
            
            limit_config = self.limits[action_type]
            window_start = current_time - limit_config["window"]
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            self.user_requests[user_id] = [
                req_time for req_time in self.user_requests[user_id] 
                if req_time > window_start
            ]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω—É—Ç–Ω—ã–π –ª–∏–º–∏—Ç
            request_count = len(self.user_requests[user_id])
            
            if request_count >= limit_config["count"]:
                # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                self.blocked_users[user_id] = current_time + limit_config["cooldown"]
                
                lang = get_user_language_sync(user_id)
                
                # ‚úÖ –ó–ê–ú–ï–ù–ò–õ–ò: –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —á–µ—Ä–µ–∑ t()
                try:
                    if action_type == "message":
                        action_name = t("action_messages", lang)
                    elif action_type == "document":
                        action_name = t("action_documents", lang)
                    elif action_type == "image":
                        action_name = t("action_images", lang)
                    elif action_type == "note":
                        action_name = t("action_notes", lang)
                    else:
                        action_name = t("action_requests", lang)
                except:
                    # Fallback –Ω–∞–∑–≤–∞–Ω–∏—è
                    action_names = {
                        "message": "—Å–æ–æ–±—â–µ–Ω–∏–π",
                        "document": "–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
                        "image": "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", 
                        "note": "–∑–∞–º–µ—Ç–æ–∫"
                    }
                    action_name = action_names.get(action_type, "–∑–∞–ø—Ä–æ—Å–æ–≤")
                
                cooldown_min = limit_config["cooldown"] // 60
                window_min = limit_config["window"] // 60
                
                try:
                    text = t("rate_limit_short", lang, 
                            count=limit_config['count'], 
                            action_name=action_name, 
                            window_min=window_min, 
                            cooldown_min=cooldown_min)
                except:
                    text = f"‚è≥ –õ–∏–º–∏—Ç {action_name}: {limit_config['count']}/{window_min}–º–∏–Ω. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {cooldown_min}–º–∏–Ω."

                logger.warning(f"Minute rate limit exceeded for user {user_id}, action {action_type}")
                return False, text

            return True, ""

    async def _get_daily_limit_for_user(self, user_id: int, action_type: str) -> int:
        """
        –û–ë–ù–û–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ—Ç –ª–∏–º–∏—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        - –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: –¥–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã
        - –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ: –Ω–µ–¥–µ–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã
        """
        try:
                        
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            limits_info = await SubscriptionManager.get_user_limits(user_id)
            subscription_type = limits_info.get('subscription_type', 'free')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏–º–∏—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
            if subscription_type == 'subscription':
                # –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ - —â–µ–¥—Ä—ã–µ –î–ù–ï–í–ù–´–ï –ª–∏–º–∏—Ç—ã
                subscription_limits = {
                    "message": 100,   # —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å
                    "document": 40,   # –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –¥–µ–Ω—å  
                    "image": 10,      # –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –¥–µ–Ω—å
                    "note": 10        # –∑–∞–º–µ—Ç–æ–∫ –≤ –¥–µ–Ω—å
                }
            else:
                # ‚úÖ –ù–û–í–û–ï: –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - –ù–ï–î–ï–õ–¨–ù–´–ï –ª–∏–º–∏—Ç—ã
                subscription_limits = {
                    "message": 50,    # —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ù–ï–î–ï–õ–Æ (–±—ã–ª–æ 20 –≤ –¥–µ–Ω—å)
                    "document": 10,   # –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –ù–ï–î–ï–õ–Æ (–±—ã–ª–æ 5 –≤ –¥–µ–Ω—å)
                    "image": 15,      # –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ù–ï–î–ï–õ–Æ (–±—ã–ª–æ 5 –≤ –¥–µ–Ω—å)
                    "note": 5         # –∑–∞–º–µ—Ç–æ–∫ –≤ –ù–ï–î–ï–õ–Æ (–±—ã–ª–æ 2 –≤ –¥–µ–Ω—å)
                }
                
            return subscription_limits.get(action_type, 20)  # 20 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return 20
        
    async def _get_user_subscription_type(self, user_id: int) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            limits_info = await SubscriptionManager.get_user_limits(user_id)
            return limits_info.get('subscription_type', 'free')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return 'free'
    
    async def record_request(self, user_id: int, action_type: str = "message"):
        """
        –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è –∑–∞–ø–∏—Å–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–µ–¥–µ–ª—å
        """
        current_time = time.time()
        user_lock = await self._get_user_lock(user_id)
        
        async with user_lock:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–ª—è –º–∏–Ω—É—Ç–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
            self.user_requests[user_id].append(current_time)
            
            # ‚úÖ –ù–û–í–û–ï: –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –ª–∏–º–∏—Ç–æ–≤ (–¥–µ–Ω—å/–Ω–µ–¥–µ–ª—è)
            self._increment_period_count(user_id, action_type)
            
            logger.info(f"Request recorded: user {user_id}, action {action_type}")
    
    async def get_user_stats(self, user_id: int) -> Dict[str, any]:
        """
        ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –¥–Ω–µ–≤–Ω—ã–º–∏ —Å—á–µ—Ç—á–∏–∫–∞–º–∏
        """
        current_time = time.time()
        hour_ago = current_time - 3600
        
        user_requests = self.user_requests.get(user_id, [])
        recent_requests = [req for req in user_requests if req > hour_ago]
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–Ω–µ–≤–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π
        action_types = ["message", "document", "image", "note"]
        daily_stats = {}
        
        for action_type in action_types:
            daily_count = self._get_period_count(user_id, action_type)
            daily_limit = await self._get_daily_limit_for_user(user_id, action_type)
            daily_stats[f"daily_{action_type}"] = f"{daily_count}/{daily_limit}"
        
        return {
            "total_requests_last_hour": len(recent_requests),
            "is_blocked": user_id in self.blocked_users,
            "requests_in_memory": len(user_requests),
            **daily_stats
        }
    
    async def cleanup_old_data(self):
        """
        ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è –æ—á–∏—Å—Ç–∫–∏ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ä—ã—Ö –¥–Ω–µ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        """
        current_time = time.time()
        day_ago = current_time - 86400
        
        # –û—á–∏—â–∞–µ–º –º–∏–Ω—É—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
        users_to_process = list(self.user_requests.keys())
        
        for user_id in users_to_process:
            user_lock = await self._get_user_lock(user_id)
            
            async with user_lock:
                # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
                recent_requests = [
                    req for req in self.user_requests[user_id] 
                    if req > day_ago
                ]
                
                if recent_requests:
                    self.user_requests[user_id] = recent_requests
                else:
                    del self.user_requests[user_id]
                    async with self.locks_lock:
                        self.user_locks.pop(user_id, None)
        
        # ‚úÖ –ù–û–í–û–ï: –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–Ω–µ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
        today = datetime.now()
        cutoff_date = (today - timedelta(days=7)).strftime("%Y-%m-%d")
        
        for user_id in list(self.daily_message_counts.keys()):
            user_daily = self.daily_message_counts[user_id]
            
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            filtered_daily = {}
            for key, count in user_daily.items():
                if "_" in key:  # –§–æ—Ä–º–∞—Ç "2025-07-03_message"
                    date_part = key.split("_")[0]
                    if date_part >= cutoff_date:
                        filtered_daily[key] = count
            
            if filtered_daily:
                self.daily_message_counts[user_id] = filtered_daily
            else:
                del self.daily_message_counts[user_id]
        
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç—ë–∫—à–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        expired_blocks = [
            user_id for user_id, unblock_time in self.blocked_users.items()
            if current_time > unblock_time
        ]
        for user_id in expired_blocks:
            del self.blocked_users[user_id]
            
        logger.info(f"Cleanup completed: removed expired data")

# –°–æ–∑–¥–∞—ë–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
rate_limiter = RateLimiter()

# ‚úÖ –ü–£–ë–õ–ò–ß–ù–´–ï –§–£–ù–ö–¶–ò–ò
async def check_rate_limit(user_id: int, action_type: str = "message") -> Tuple[bool, str]:
    """‚úÖ ASYNC –≤–µ—Ä—Å–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤"""
    return await rate_limiter.check_limit(user_id, action_type)

async def record_user_action(user_id: int, action_type: str = "message"):
    """‚úÖ ASYNC –≤–µ—Ä—Å–∏—è –∑–∞–ø–∏—Å–∏ –¥–µ–π—Å—Ç–≤–∏—è"""
    await rate_limiter.record_request(user_id, action_type)

async def cleanup_rate_limiter():
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ rate limiter"""
    await rate_limiter.cleanup_old_data()

async def check_daily_limit(user_id: int, action_type: str = "message") -> Tuple[bool, int, int]:
    """
    ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
    
    Returns:
        (–º–æ–∂–Ω–æ_–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, —Ç–µ–∫—É—â–∏–π_—Å—á–µ—Ç—á–∏–∫, –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π_–ª–∏–º–∏—Ç)
    """
    daily_count = rate_limiter._get_period_count(user_id, action_type)
    daily_limit = await rate_limiter._get_daily_limit_for_user(user_id, action_type)
    
    return daily_count < daily_limit, daily_count, daily_limit

async def get_daily_stats(user_id: int) -> Dict[str, Dict[str, int]]:
    """
    ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    
    Returns:
        {
            "message": {"used": 45, "limit": 100},
            "document": {"used": 2, "limit": 10},
            ...
        }
    """
    stats = {}
    action_types = ["message", "document", "image", "note"]
    
    for action_type in action_types:
        used = rate_limiter._get_period_count(user_id, action_type)
        limit = await rate_limiter._get_daily_limit_for_user(user_id, action_type)
        stats[action_type] = {"used": used, "limit": limit}
    
    return stats

# ‚úÖ –¢–û–õ–¨–ö–û –î–õ–Ø –ò–ù–§–û–†–ú–ê–¶–ò–ò - –¢–ï–°–¢–´ –£–î–ê–õ–ï–ù–´
if __name__ == "__main__":
    print("üö¶ Rate Limiter –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("üìã –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
    print("   ‚Ä¢ –ú–∏–Ω—É—Ç–Ω—ã–µ –ª–∏–º–∏—Ç—ã —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π")
    print("   ‚Ä¢ –î–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–¥–ø–∏—Å–∫–∏")
    print("   ‚Ä¢ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("   ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 4 —Ç–∏–ø–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π: message, document, image, note")
    print("\nüí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª test_rate_limiter.py")