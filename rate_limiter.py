# rate_limiter.py - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –¥–Ω–µ–≤–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏

import time
import logging
import asyncio
from typing import Dict, Tuple
from collections import defaultdict
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)

def get_user_language_sync(user_id: int) -> str:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è rate limiter"""
    import sqlite3
    try:
        conn = sqlite3.connect("users.db")
        cursor = conn.cursor()
        cursor.execute("SELECT language FROM users WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()
        conn.close()
        return result[0] if result and result[0] else "ru"
    except:
        return "ru"  # Fallback

class RateLimiter:
    """
    ‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –¥–Ω–µ–≤–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏
    """
    
    def __init__(self):
        # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (–æ—Å—Ç–∞—é—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å)
        self.user_requests: Dict[int, list] = defaultdict(list)
        self.blocked_users: Dict[int, float] = {}
        self.user_locks: Dict[int, asyncio.Lock] = defaultdict(asyncio.Lock)
        self.locks_lock = asyncio.Lock()
        
        # ‚úÖ –ù–û–í–û–ï: –î–Ω–µ–≤–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏
        self.daily_message_counts: Dict[int, Dict[str, int]] = defaultdict(dict)
        # –§–æ—Ä–º–∞—Ç: {user_id: {"2025-06-12": 45, "2025-06-11": 98}}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏–º–∏—Ç–æ–≤
        self.limits = {
            "message": {"count": 10, "window": 60, "cooldown": 30},
            "document": {"count": 3, "window": 300, "cooldown": 120},
            "image": {"count": 3, "window": 600, "cooldown": 300},
            "note": {"count": 5, "window": 300, "cooldown": 60}
        }
        
    async def _get_user_lock(self, user_id: int) -> asyncio.Lock:
        """–ü–æ–ª—É—á–∏—Ç—å lock –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (thread-safe)"""
        async with self.locks_lock:
            if user_id not in self.user_locks:
                self.user_locks[user_id] = asyncio.Lock()
            return self.user_locks[user_id]
    
    def _get_today_key(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è"""
        return datetime.now().strftime("%Y-%m-%d")
    
    def _get_daily_count(self, user_id: int, action_type: str) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
        today = self._get_today_key()
        user_daily = self.daily_message_counts.get(user_id, {})
        return user_daily.get(f"{today}_{action_type}", 0)
    
    def _increment_daily_count(self, user_id: int, action_type: str):
        """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π –∑–∞ –¥–µ–Ω—å"""
        today = self._get_today_key()
        if user_id not in self.daily_message_counts:
            self.daily_message_counts[user_id] = {}
        
        key = f"{today}_{action_type}"
        self.daily_message_counts[user_id][key] = self.daily_message_counts[user_id].get(key, 0) + 1
    
    async def is_blocked(self, user_id: int) -> Tuple[bool, int]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)"""
        current_time = time.time()
        user_lock = await self._get_user_lock(user_id)
        
        async with user_lock:
            if user_id in self.blocked_users:
                unblock_time = self.blocked_users[user_id]
                if current_time < unblock_time:
                    remaining = int(unblock_time - current_time)
                    return True, remaining
                else:
                    del self.blocked_users[user_id]
                    
            return False, 0
    
    async def check_limit(self, user_id: int, action_type: str = "message") -> Tuple[bool, str]:
        """
        ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –¥–Ω–µ–≤–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–¥–ø–∏—Å–∫–∏
        """
        current_time = time.time()
        user_lock = await self._get_user_lock(user_id)
        
        async with user_lock:
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            if user_id in self.blocked_users:
                unblock_time = self.blocked_users[user_id]
                if current_time < unblock_time:
                    remaining = int(unblock_time - current_time)
                    lang = get_user_language_sync(user_id)
                    minutes = remaining // 60
                    seconds = remaining % 60
                    time_str = f"{minutes} –º–∏–Ω {seconds} —Å–µ–∫" if minutes > 0 else f"{seconds} —Å–µ–∫"
                    
                    messages = {
                        "ru": f"‚è≥ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {time_str}",
                        "en": f"‚è≥ Rate limit exceeded. Try again in {time_str}",
                        "uk": f"‚è≥ –ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {time_str}"
                    }
                    return False, messages.get(lang, messages["ru"])
                else:
                    del self.blocked_users[user_id]
            
            # ‚úÖ 2. –ù–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–¥–ø–∏—Å–∫–∏
            daily_count = self._get_daily_count(user_id, action_type)
            daily_limit = await self._get_daily_limit_for_user(user_id, action_type)
            
            if daily_count >= daily_limit:
                lang = get_user_language_sync(user_id)
                
                action_names = {
                    "ru": {
                        "message": "—Å–æ–æ–±—â–µ–Ω–∏–π", 
                        "document": "–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", 
                        "image": "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", 
                        "note": "–∑–∞–º–µ—Ç–æ–∫"
                    },
                    "en": {
                        "message": "messages", 
                        "document": "documents", 
                        "image": "images", 
                        "note": "notes"
                    },
                    "uk": {
                        "message": "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å", 
                        "document": "–¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤", 
                        "image": "–∑–æ–±—Ä–∞–∂–µ–Ω—å", 
                        "note": "–Ω–æ—Ç–∞—Ç–æ–∫"
                    }
                }
                
                action_name = action_names.get(lang, action_names["ru"]).get(action_type, "–∑–∞–ø—Ä–æ—Å–æ–≤")
                
                # ‚úÖ –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                subscription_type = await self._get_user_subscription_type(user_id)
                
                if subscription_type == 'subscription':
                    # –î–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ - –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ª–∏–º–∏—Ç–µ
                    messages = {
                        "ru": f"üò¥ **–î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç**\n\n–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –º–∞–∫—Å–∏–º—É–º: {daily_limit} {action_name} –≤ –¥–µ–Ω—å.\n\nüåÖ –ó–∞–≤—Ç—Ä–∞ –≤ 00:00 –ª–∏–º–∏—Ç—ã –æ–±–Ω–æ–≤—è—Ç—Å—è!",
                        "en": f"üò¥ **Daily limit reached**\n\nYou've used the maximum: {daily_limit} {action_name} per day.\n\nüåÖ Tomorrow at 00:00 limits will reset!",
                        "uk": f"üò¥ **–î–æ—Å—è–≥–Ω—É—Ç–æ –¥–µ–Ω–Ω–∏–π –ª—ñ–º—ñ—Ç**\n\n–í–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–ª–∏ –º–∞–∫—Å–∏–º—É–º: {daily_limit} {action_name} –Ω–∞ –¥–µ–Ω—å.\n\nüåÖ –ó–∞–≤—Ç—Ä–∞ –æ 00:00 –ª—ñ–º—ñ—Ç–∏ –æ–Ω–æ–≤–ª—è—Ç—å—Å—è!"
                    }
                else:
                    # –î–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
                    messages = {
                        "ru": f"üò¥ **–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω**\n\n–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞: {daily_limit} {action_name} –≤ –¥–µ–Ω—å.\n\nüåÖ –ó–∞–≤—Ç—Ä–∞ –≤ 00:00 —è —Å–Ω–æ–≤–∞ –±—É–¥—É –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å!\nüíé –ò–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ –¥–æ 100 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å",
                        "en": f"üò¥ **Daily limit exceeded**\n\nYou've reached the limit: {daily_limit} {action_name} per day.\n\nüåÖ Tomorrow at 00:00 I'll be ready to help again!\nüíé Or get a subscription to increase limits to 100 messages per day",
                        "uk": f"üò¥ **–î–µ–Ω–Ω–∏–π –ª—ñ–º—ñ—Ç –≤–∏—á–µ—Ä–ø–∞–Ω–æ**\n\n–í–∏ –¥–æ—Å—è–≥–ª–∏ –ª—ñ–º—ñ—Ç—É: {daily_limit} {action_name} –Ω–∞ –¥–µ–Ω—å.\n\nüåÖ –ó–∞–≤—Ç—Ä–∞ –æ 00:00 —è –∑–Ω–æ–≤—É –±—É–¥—É –≥–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏!\nüíé –ê–±–æ –æ—Ñ–æ—Ä–º—ñ—Ç—å –ø—ñ–¥–ø–∏—Å–∫—É –¥–ª—è –∑–±—ñ–ª—å—à–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç—ñ–≤ –¥–æ 100 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –Ω–∞ –¥–µ–Ω—å"
                    }
                
                logger.warning(f"Daily limit exceeded for user {user_id}, action {action_type}: {daily_count}/{daily_limit}")
                return False, messages.get(lang, messages["ru"])
            
            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω—É—Ç–Ω—ã–µ –ª–∏–º–∏—Ç—ã (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
            if action_type not in self.limits:
                action_type = "message"
            
            limit_config = self.limits[action_type]
            window_start = current_time - limit_config["window"]
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            self.user_requests[user_id] = [
                req_time for req_time in self.user_requests[user_id] 
                if req_time > window_start
            ]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω—É—Ç–Ω—ã–π –ª–∏–º–∏—Ç
            request_count = len(self.user_requests[user_id])
            
            if request_count >= limit_config["count"]:
                # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                self.blocked_users[user_id] = current_time + limit_config["cooldown"]
                
                lang = get_user_language_sync(user_id)
                
                action_names = {
                    "ru": {"message": "—Å–æ–æ–±—â–µ–Ω–∏–π", "document": "–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", "image": "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", "note": "–∑–∞–º–µ—Ç–æ–∫"},
                    "en": {"message": "messages", "document": "documents", "image": "images", "note": "notes"},
                    "uk": {"message": "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å", "document": "–¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤", "image": "–∑–æ–±—Ä–∞–∂–µ–Ω—å", "note": "–Ω–æ—Ç–∞—Ç–æ–∫"}
                }
                
                cooldown_min = limit_config["cooldown"] // 60
                window_min = limit_config["window"] // 60
                action_name = action_names.get(lang, action_names["ru"]).get(action_type, "–∑–∞–ø—Ä–æ—Å–æ–≤")
                
                messages = {
                    "ru": f"üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç: –º–∞–∫—Å–∏–º—É–º {limit_config['count']} {action_name} –∑–∞ {window_min} –º–∏–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {cooldown_min} –º–∏–Ω.",
                    "en": f"üö´ Rate limit exceeded: max {limit_config['count']} {action_name} per {window_min} min. Try again in {cooldown_min} min.",
                    "uk": f"üö´ –ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç: –º–∞–∫—Å–∏–º—É–º {limit_config['count']} {action_name} –∑–∞ {window_min} —Ö–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {cooldown_min} —Ö–≤."
                }
                
                logger.warning(f"Minute rate limit exceeded for user {user_id}, action {action_type}")
                return False, messages.get(lang, messages["ru"])
            
            return True, ""

    async def _get_daily_limit_for_user(self, user_id: int, action_type: str) -> int:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –ø–æ–¥–ø–∏—Å–∫–∏
        """
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
            from subscription_manager import SubscriptionManager
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            limits_info = await SubscriptionManager.get_user_limits(user_id)
            subscription_type = limits_info.get('subscription_type', 'free')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏–º–∏—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
            if subscription_type == 'subscription':
                # –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ - —â–µ–¥—Ä—ã–µ –ª–∏–º–∏—Ç—ã
                subscription_limits = {
                    "message": 100,   # 100 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å
                    "document": 50,   # 50 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –¥–µ–Ω—å  
                    "image": 50,      # 50 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –¥–µ–Ω—å
                    "note": 30        # 30 –∑–∞–º–µ—Ç–æ–∫ –≤ –¥–µ–Ω—å
                }
            else:
                # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã
                subscription_limits = {
                    "message": 20,    # 20 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å
                    "document": 5,    # 5 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –¥–µ–Ω—å
                    "image": 5,       # 5 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –¥–µ–Ω—å
                    "note": 2        # 2 –∑–∞–º–µ—Ç–æ–∫ –≤ –¥–µ–Ω—å
                }
                
            return subscription_limits.get(action_type, 20)  # 20 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ª–∏–º–∏—Ç
            return 20

    async def _get_user_subscription_type(self, user_id: int) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            from subscription_manager import SubscriptionManager
            limits_info = await SubscriptionManager.get_user_limits(user_id)
            return limits_info.get('subscription_type', 'free')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return 'free'
    
    async def record_request(self, user_id: int, action_type: str = "message"):
        """
        ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è –∑–∞–ø–∏—Å–∏ –∑–∞–ø—Ä–æ—Å–∞
        """
        current_time = time.time()
        user_lock = await self._get_user_lock(user_id)
        
        async with user_lock:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–ª—è –º–∏–Ω—É—Ç–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤
            self.user_requests[user_id].append(current_time)
            
            # ‚úÖ –ù–û–í–û–ï: –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–ª—è –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤
            self._increment_daily_count(user_id, action_type)
            
            logger.info(f"Request recorded: user {user_id}, action {action_type}")
    
    def get_user_stats(self, user_id: int) -> Dict[str, int]:
        """
        ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –¥–Ω–µ–≤–Ω—ã–º–∏ —Å—á–µ—Ç—á–∏–∫–∞–º–∏
        """
        current_time = time.time()
        hour_ago = current_time - 3600
        
        user_requests = self.user_requests.get(user_id, [])
        recent_requests = [req for req in user_requests if req > hour_ago]
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–Ω–µ–≤–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏
        daily_stats = {}
        for action_type in self.daily_limits.keys():
            daily_count = self._get_daily_count(user_id, action_type)
            daily_limit = self.daily_limits[action_type]
            daily_stats[f"daily_{action_type}"] = f"{daily_count}/{daily_limit}"
        
        return {
            "total_requests_last_hour": len(recent_requests),
            "is_blocked": user_id in self.blocked_users,
            "requests_in_memory": len(user_requests),
            **daily_stats
        }
    
    async def cleanup_old_data(self):
        """
        ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è –æ—á–∏—Å—Ç–∫–∏ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ä—ã—Ö –¥–Ω–µ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        """
        current_time = time.time()
        day_ago = current_time - 86400
        
        # –û—á–∏—â–∞–µ–º –º–∏–Ω—É—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
        users_to_process = list(self.user_requests.keys())
        
        for user_id in users_to_process:
            user_lock = await self._get_user_lock(user_id)
            
            async with user_lock:
                # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
                recent_requests = [
                    req for req in self.user_requests[user_id] 
                    if req > day_ago
                ]
                
                if recent_requests:
                    self.user_requests[user_id] = recent_requests
                else:
                    del self.user_requests[user_id]
                    async with self.locks_lock:
                        self.user_locks.pop(user_id, None)
        
        # ‚úÖ –ù–û–í–û–ï: –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–Ω–µ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
        today = datetime.now()
        cutoff_date = (today - timedelta(days=7)).strftime("%Y-%m-%d")
        
        for user_id in list(self.daily_message_counts.keys()):
            user_daily = self.daily_message_counts[user_id]
            
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            filtered_daily = {}
            for key, count in user_daily.items():
                if "_" in key:  # –§–æ—Ä–º–∞—Ç "2025-06-12_message"
                    date_part = key.split("_")[0]
                    if date_part >= cutoff_date:
                        filtered_daily[key] = count
            
            if filtered_daily:
                self.daily_message_counts[user_id] = filtered_daily
            else:
                del self.daily_message_counts[user_id]
        
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç—ë–∫—à–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        expired_blocks = [
            user_id for user_id, unblock_time in self.blocked_users.items()
            if current_time > unblock_time
        ]
        for user_id in expired_blocks:
            del self.blocked_users[user_id]
            
        logger.info(f"Cleanup completed: removed expired data")

# –°–æ–∑–¥–∞—ë–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä (–æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å)
rate_limiter = RateLimiter()

async def check_rate_limit(user_id: int, action_type: str = "message") -> Tuple[bool, str]:
    """‚úÖ ASYNC –≤–µ—Ä—Å–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤"""
    return await rate_limiter.check_limit(user_id, action_type)

async def record_user_action(user_id: int, action_type: str = "message"):
    """‚úÖ ASYNC –≤–µ—Ä—Å–∏—è –∑–∞–ø–∏—Å–∏ –¥–µ–π—Å—Ç–≤–∏—è"""
    await rate_limiter.record_request(user_id, action_type)

def get_rate_limit_stats(user_id: int) -> Dict[str, int]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return rate_limiter.get_user_stats(user_id)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ (–º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å —Ä–∞–∑ –≤ —á–∞—Å)
async def cleanup_rate_limiter():
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ rate limiter"""
    await rate_limiter.cleanup_old_data()

# ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
async def check_daily_limit(user_id: int, action_type: str = "message") -> Tuple[bool, int, int]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–ª—å–∫–æ –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    
    Returns:
        (–º–æ–∂–Ω–æ_–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, —Ç–µ–∫—É—â–∏–π_—Å—á–µ—Ç—á–∏–∫, –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π_–ª–∏–º–∏—Ç)
    """
    daily_count = rate_limiter._get_daily_count(user_id, action_type)
    daily_limit = rate_limiter.daily_limits.get(action_type, 100)
    
    return daily_count < daily_limit, daily_count, daily_limit

# ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def get_daily_stats(user_id: int) -> Dict[str, Dict[str, int]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Returns:
        {
            "message": {"used": 45, "limit": 100},
            "document": {"used": 2, "limit": 10},
            ...
        }
    """
    stats = {}
    for action_type, limit in rate_limiter.daily_limits.items():
        used = rate_limiter._get_daily_count(user_id, action_type)
        stats[action_type] = {"used": used, "limit": limit}
    
    return stats

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    import asyncio
    
    async def test_daily_limits():
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤...")
        
        test_user = 123456
        
        # –¢–µ—Å—Ç: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        print(f"üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π (100/–¥–µ–Ω—å):")
        
        for i in range(105):  # –ë–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞
            allowed, message = await check_rate_limit(test_user, "message")
            if allowed:
                await record_user_action(test_user, "message")
                if i % 20 == 0:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π
                    can_continue, used, limit = await check_daily_limit(test_user, "message")
                    print(f"  –°–æ–æ–±—â–µ–Ω–∏–µ {i+1}: ‚úÖ ({used}/{limit})")
            else:
                print(f"  –°–æ–æ–±—â–µ–Ω–∏–µ {i+1}: ‚ùå {message}")
                break
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        daily_stats = get_daily_stats(test_user)
        print(f"\nüìà –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        for action, stats in daily_stats.items():
            print(f"  {action}: {stats['used']}/{stats['limit']}")
        
        print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    # asyncio.run(test_daily_limits())