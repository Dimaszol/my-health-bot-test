# file_storage.py - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Ñ–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ

import os
import shutil
import logging
from pathlib import Path
from typing import Optional, Tuple

logger = logging.getLogger(__name__)

class FileStorage:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Ñ–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (Railway Volumes + –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ S3)"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ persistent storage (Railway Volumes)
        self.persistent_dir = "/app/persistent_files"
        self.temp_dir = "/app/files"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≥–¥–µ —Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª—ã
        if os.path.exists(self.persistent_dir):
            self.storage_dir = self.persistent_dir
            self.storage_type = "persistent"
            logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º Railway Volumes –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤")
        else:
            self.storage_dir = self.temp_dir
            self.storage_type = "temporary"
            logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (—Ñ–∞–π–ª—ã –ø–æ—Ç–µ—Ä—è—é—Ç—Å—è –ø—Ä–∏ —Ä–µ—Å—Ç–∞—Ä—Ç–µ)")
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        os.makedirs(self.storage_dir, exist_ok=True)
        logger.info(f"üìÅ –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {self.storage_dir}")
    
    def get_user_dir(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_dir = os.path.join(self.storage_dir, f"users/{user_id}")
        os.makedirs(user_dir, exist_ok=True)
        return user_dir
    
    def save_file(self, user_id: int, filename: str, source_path: str) -> Tuple[bool, str]:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            filename: –ò–º—è —Ñ–∞–π–ª–∞
            source_path: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
            
        Returns:
            Tuple[bool, str]: (—É—Å–ø–µ—Ö, –ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É_–∏–ª–∏_–æ—à–∏–±–∫–∞)
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_dir = self.get_user_dir(user_id)
            
            # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            safe_filename = self._sanitize_filename(filename)
            
            # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            destination_path = os.path.join(user_dir, safe_filename)
            
            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
            shutil.copy2(source_path, destination_path)
            
            logger.info(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {destination_path}")
            return True, destination_path
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            return False, f"Save error: {str(e)}"
    
    def file_exists(self, file_path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        try:
            return os.path.exists(file_path) and os.path.isfile(file_path)
        except Exception:
            return False
    
    def delete_file(self, file_path: str) -> bool:
        """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª"""
        try:
            if self.file_exists(file_path):
                os.remove(file_path)
                logger.info(f"‚úÖ –§–∞–π–ª —É–¥–∞–ª–µ–Ω: {file_path}")
                return True
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            return False
    
    def delete_user_files(self, user_id: int) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è GDPR)"""
        try:
            user_dir = os.path.join(self.storage_dir, f"users/{user_id}")
            
            if os.path.exists(user_dir):
                shutil.rmtree(user_dir)
                logger.info(f"‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–¥–∞–ª–µ–Ω—ã")
                return True
            else:
                logger.info(f"üìÇ –ü–∞–ø–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    def get_file_info(self, file_path: str) -> Optional[dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ"""
        try:
            if not self.file_exists(file_path):
                return None
            
            stat = os.stat(file_path)
            return {
                'size': stat.st_size,
                'created': stat.st_ctime,
                'modified': stat.st_mtime,
                'exists': True
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ: {e}")
            return None
    
    def get_storage_stats(self) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
        try:
            total_size = 0
            file_count = 0
            
            for root, dirs, files in os.walk(self.storage_dir):
                for file in files:
                    file_path = os.path.join(root, file)
                    try:
                        total_size += os.path.getsize(file_path)
                        file_count += 1
                    except OSError:
                        continue
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ MB
            total_size_mb = total_size / (1024 * 1024)
            
            return {
                'total_size_mb': round(total_size_mb, 2),
                'file_count': file_count,
                'storage_type': self.storage_type,
                'storage_path': self.storage_dir
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {
                'total_size_mb': 0,
                'file_count': 0,
                'storage_type': self.storage_type,
                'storage_path': self.storage_dir
            }
    
    def _sanitize_filename(self, filename: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞"""
        import re
        
        # –£–±–∏—Ä–∞–µ–º –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        safe_name = re.sub(r'[^\w\.-]', '_', filename)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        if len(safe_name) > 100:
            name, ext = os.path.splitext(safe_name)
            safe_name = name[:90] + ext
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º .file
        if not os.path.splitext(safe_name)[1]:
            safe_name += '.file'
        
        return safe_name

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
file_storage = None

def get_file_storage() -> FileStorage:
    """–ü–æ–ª—É—á–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä FileStorage (–ª–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)"""
    global file_storage
    if file_storage is None:
        file_storage = FileStorage()
    return file_storage

def check_storage_setup() -> dict:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
    try:
        storage = get_file_storage()
        stats = storage.get_storage_stats()
        
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {stats}")
        return {
            'success': True,
            'stats': stats
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {e}")
        return {
            'success': False,
            'error': str(e)
        }