# file_storage.py - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å Supabase Storage

import os
import logging
from pathlib import Path
from typing import Optional, Tuple
from supabase_storage import get_storage_manager

logger = logging.getLogger(__name__)

class FileStorage:
    """–§–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–∞ Supabase Storage (–∑–∞–º–µ–Ω–∞ Railway Volumes)"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase Storage"""
        try:
            self.storage_manager = get_storage_manager()
            self.storage_type = "supabase"
            logger.info("‚úÖ Supabase Storage –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase Storage: {e}")
            # Fallback —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            is_railway = os.getenv("RAILWAY_ENVIRONMENT") == "production"
            if is_railway:
                logger.error("‚ùå –ù–∞ Railway Supabase Storage –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!")
                raise Exception("Supabase Storage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ")
            else:
                # –õ–æ–∫–∞–ª—å–Ω—ã–π fallback —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
                self.storage_manager = None
                self.storage_type = "local_fallback"
                self.temp_dir = "/app/files"
                os.makedirs(self.temp_dir, exist_ok=True)
    
    def save_file(self, user_id: int, filename: str, source_path: str) -> Tuple[bool, str]:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª –≤ Supabase Storage
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            filename: –ò–º—è —Ñ–∞–π–ª–∞
            source_path: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
            
        Returns:
            Tuple[bool, str]: (—É—Å–ø–µ—Ö, –ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É_–∏–ª–∏_–æ—à–∏–±–∫–∞)
        """
        try:
            if self.storage_manager:
                # ‚úÖ –ó–ê–ì–†–£–ñ–ê–ï–ú –í SUPABASE STORAGE
                import asyncio
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                loop = asyncio.get_event_loop()
                success, storage_path = loop.run_until_complete(
                    self.storage_manager.upload_file(user_id, source_path, filename)
                )
                
                if success:
                    logger.info(f"‚úÖ [SUPABASE] –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {storage_path}")
                    return True, storage_path
                else:
                    logger.error(f"‚ùå [SUPABASE] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {storage_path}")
                    return False, storage_path
            else:
                # ‚úÖ FALLBACK: –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                return self._save_file_locally(user_id, filename, source_path)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            # –ù–∞ Railway –Ω–µ—Ç —Å–º—ã—Å–ª–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º fallback
            is_railway = os.getenv("RAILWAY_ENVIRONMENT") == "production"
            if is_railway:
                return False, f"Supabase Storage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(e)}"
            else:
                # –õ–æ–∫–∞–ª—å–Ω—ã–π fallback —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
                return self._save_file_locally(user_id, filename, source_path)
    
    def _save_file_locally(self, user_id: int, filename: str, source_path: str) -> Tuple[bool, str]:
        """Fallback: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É"""
        try:
            import shutil
            
            user_dir = os.path.join(self.temp_dir, f"users/{user_id}")
            os.makedirs(user_dir, exist_ok=True)
            
            # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            safe_filename = self._sanitize_filename(filename)
            destination_path = os.path.join(user_dir, safe_filename)
            
            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
            shutil.copy2(source_path, destination_path)
            
            logger.info(f"‚úÖ [LOCAL] –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {destination_path}")
            return True, destination_path
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return False, f"Local save error: {str(e)}"
    
    def file_exists(self, file_path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        if self.storage_type == "supabase":
            # –î–ª—è Supabase —Ñ–∞–π–ª—ã –≤—Å–µ–≥–¥–∞ —Å—á–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏
            # (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ API –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            return True
        else:
            # –õ–æ–∫–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            try:
                return os.path.exists(file_path) and os.path.isfile(file_path)
            except Exception:
                return False
    
    def delete_file(self, file_path: str) -> bool:
        """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª"""
        try:
            if self.storage_type == "supabase" and self.storage_manager:
                # ‚úÖ –£–î–ê–õ–ï–ù–ò–ï –ò–ó SUPABASE
                import asyncio
                loop = asyncio.get_event_loop()
                success = loop.run_until_complete(
                    self.storage_manager.delete_file(file_path)
                )
                return success
            else:
                # ‚úÖ –õ–û–ö–ê–õ–¨–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï
                if os.path.exists(file_path):
                    os.remove(file_path)
                    logger.info(f"‚úÖ –§–∞–π–ª —É–¥–∞–ª–µ–Ω: {file_path}")
                    return True
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            return False
    
    def delete_user_files(self, user_id: int) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è GDPR)"""
        try:
            if self.storage_type == "supabase":
                # –î–ª—è Supabase –Ω—É–∂–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True (—Ñ–∞–π–ª—ã —É–¥–∞–ª—è—é—Ç—Å—è –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π –∏–∑ –ë–î)
                logger.info(f"‚úÖ GDPR: —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã —á–µ—Ä–µ–∑ –ë–î")
                return True
            else:
                # –õ–æ–∫–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
                import shutil
                user_dir = os.path.join(self.temp_dir, f"users/{user_id}")
                if os.path.exists(user_dir):
                    shutil.rmtree(user_dir)
                    logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_dir}")
                return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False
    
    def _sanitize_filename(self, filename: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞"""
        # –£–±–∏—Ä–∞–µ–º –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        safe_chars = "-_.() abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
        safe_filename = "".join(c for c in filename if c in safe_chars or ord(c) > 127)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        if len(safe_filename) > 100:
            name, ext = os.path.splitext(safe_filename)
            safe_filename = name[:95] + ext
        
        return safe_filename or "document.txt"

# ‚úÖ –ì–õ–û–ë–ê–õ–¨–ù–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–† (—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
_file_storage_instance = None

def get_file_storage() -> FileStorage:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä —Ñ–∞–π–ª–æ–≤–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (Singleton)"""
    global _file_storage_instance
    if _file_storage_instance is None:
        _file_storage_instance = FileStorage()
    return _file_storage_instance

def check_storage_setup() -> dict:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º)"""
    try:
        storage = get_file_storage()
        
        if storage.storage_type == "supabase":
            stats = {
                'storage_type': 'supabase',
                'status': 'connected',
                'bucket': 'medical-documents'
            }
        else:
            stats = {
                'storage_type': 'local_fallback',
                'status': 'fallback_mode',
                'storage_path': storage.temp_dir
            }
        
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {stats}")
        return {
            'success': True,
            'stats': stats
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {e}")
        return {
            'success': False,
            'error': str(e)
        }