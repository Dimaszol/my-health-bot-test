# stripe_manager.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –ø–æ–ª–Ω–æ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π

import stripe
import logging
from typing import Dict, Any, Optional, Tuple
from datetime import datetime
from stripe_config import StripeConfig
from subscription_manager import SubscriptionManager
from db_postgresql import execute_query, fetch_one, get_user_language, t

logger = logging.getLogger(__name__)

class StripeManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏ Stripe"""
    
    @staticmethod
    async def create_checkout_session(user_id: int, package_id: str, user_name: str = "User"):
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é –æ–ø–ª–∞—Ç—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–∏–ø–æ–º"""
        try:
            package_info = StripeConfig.get_package_info(package_id)
            if not package_info:
                # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ø–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –æ—à–∏–±–∫–∏
                try:
                    lang = await get_user_language(user_id)
                    error_msg = t("stripe_package_not_found", lang, package_id=package_id)
                except:
                    error_msg = f"Package {package_id} not found"
                
                return False, error_msg
            
            # ‚úÖ –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–ø–ª–∞—Ç—ã
            if package_info['type'] == 'subscription':
                # ‚úÖ –ü–û–î–ü–ò–°–ö–ê - –∞–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü
                session = stripe.checkout.Session.create(
                    payment_method_types=['card'],
                    line_items=[{
                        'price': package_info['stripe_price_id'],  # –ì–æ—Ç–æ–≤—ã–π Price ID
                        'quantity': 1,
                    }],
                    mode='subscription',  # ‚úÖ –ü–û–î–ü–ò–°–ö–ê
                    success_url=StripeConfig.SUCCESS_URL + f"?session_id={{CHECKOUT_SESSION_ID}}",
                    cancel_url=StripeConfig.CANCEL_URL,
                    allow_promotion_codes=True,
                    subscription_data={
                        'metadata': {
                            'user_id': str(user_id),
                            'package_id': package_id,
                        }
                    },
                    metadata={
                        'user_id': str(user_id),
                        'package_id': package_id,
                        'user_name': user_name,
                        'subscription_type': 'recurring'
                    }
                )
            else:
                # ‚úÖ –†–ê–ó–û–í–ê–Ø –ü–û–ö–£–ü–ö–ê (—Ç–æ–ª—å–∫–æ Extra Pack)
                session = stripe.checkout.Session.create(
                    payment_method_types=['card'],
                    line_items=[{
                        'price_data': {
                            'currency': 'usd',
                            'unit_amount': package_info['price_cents'],
                            'product_data': {
                                'name': package_info['name'],
                                'description': f"{package_info['documents']} documents + {package_info['gpt4o_queries']} GPT-4o queries",
                            },
                        },
                        'quantity': 1,
                    }],
                    mode='payment',  # ‚úÖ –†–ê–ó–û–í–ê–Ø –û–ü–õ–ê–¢–ê
                    success_url=StripeConfig.SUCCESS_URL + f"?session_id={{CHECKOUT_SESSION_ID}}",
                    cancel_url=StripeConfig.CANCEL_URL,
                    metadata={
                        'user_id': str(user_id),
                        'package_id': package_id,
                        'user_name': user_name,
                        'subscription_type': 'one_time'
                    }
                )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –≤ –ë–î
            await StripeManager._save_payment_session(
                user_id=user_id,
                session_id=session.id,
                package_id=package_id,
                amount_cents=package_info['price_cents']
            )
            
            return True, session.url
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏")
            
            # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞
            try:
                lang = await get_user_language(user_id)
                error_msg = t("stripe_session_creation_error", lang)
            except:
                error_msg = "Payment session creation failed"
            
            return False, error_msg
    
    @staticmethod
    async def _save_payment_session(user_id: int, session_id: str, package_id: str, amount_cents: int):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏ –æ–ø–ª–∞—Ç—ã –≤ –ë–î"""
        try:
            await execute_query("""
                INSERT INTO transactions 
                (user_id, stripe_session_id, package_id, amount_usd, package_type, status, payment_method, created_at)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                user_id,
                session_id, 
                package_id,
                amount_cents / 100,  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—Ç—ã –≤ –¥–æ–ª–ª–∞—Ä—ã
                StripeConfig.get_package_info(package_id)['name'],
                'pending',
                'stripe',
                datetime.now()
            ))
            
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –≤ –ë–î")
    
    @staticmethod
    async def handle_successful_payment(session_id: str):
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º PostgreSQL —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º"""
        try:
            session = stripe.checkout.Session.retrieve(session_id)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            user_id = int(session.metadata.get('user_id'))
            package_id = session.metadata.get('package_id')
            
            # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            try:
                lang = await get_user_language(user_id)
            except:
                lang = "ru"  # Fallback –Ω–∞ —Ä—É—Å—Å–∫–∏–π
            
            # –î–ª—è –ø–æ–¥–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏, –Ω–µ –ø–ª–∞—Ç–µ–∂–∞
            if session.mode == 'subscription':
                subscription = stripe.Subscription.retrieve(session.subscription)
                if subscription.status not in ['active', 'trialing']:
                    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏
                    error_msg = f"Subscription not active: {subscription.status}"
                    return False, error_msg
            else:
                # –î–ª—è —Ä–∞–∑–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
                if session.payment_status != 'paid':
                    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏
                    return False, "Payment not completed"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            existing_transaction = await fetch_one("""
                SELECT id FROM transactions 
                WHERE stripe_session_id = ?
                AND status = 'completed'
            """, (session_id,))
            
            if existing_transaction:
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                return True, "Payment already processed"
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–∫–µ—Ç–µ
            package_info = StripeConfig.get_package_info(package_id)
            if not package_info:
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏
                error_msg = f"Package not found: {package_id}"
                return False, error_msg
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï SQL: –ó–∞–º–µ–Ω—è–µ–º INSERT OR REPLACE –Ω–∞ PostgreSQL UPSERT
            if package_info['type'] == 'subscription':
                # –î–ª—è –ø–æ–¥–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω—è–µ–º Stripe subscription ID
                subscription_id = session.subscription
                
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: PostgreSQL UPSERT –≤–º–µ—Å—Ç–æ INSERT OR REPLACE
                await execute_query("""
                    INSERT INTO user_subscriptions 
                    (user_id, stripe_subscription_id, package_id, status, created_at, cancelled_at)
                    VALUES (?, ?, ?, 'active', ?, ?)
                    ON CONFLICT (user_id) 
                    DO UPDATE SET 
                        stripe_subscription_id = EXCLUDED.stripe_subscription_id,
                        package_id = EXCLUDED.package_id,
                        status = EXCLUDED.status,
                        created_at = EXCLUDED.created_at,
                        cancelled_at = EXCLUDED.cancelled_at
                """, (user_id, subscription_id, package_id, datetime.now(), None))
                
                # –í—ã–¥–∞–µ–º –ª–∏–º–∏—Ç—ã
                result = await SubscriptionManager.purchase_package(
                    user_id=user_id,
                    package_id=package_id,
                    payment_method='stripe_subscription'
                )
                
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø–∞–∫–µ—Ç–∞
                package_name = package_info['name']
                message = f"Subscription activated: {package_name}"
                
            else:
                # –î–ª—è —Ä–∞–∑–æ–≤—ã—Ö –ø–æ–∫—É–ø–æ–∫ - –∫–∞–∫ —Ä–∞–Ω—å—à–µ
                result = await SubscriptionManager.purchase_package(
                    user_id=user_id,
                    package_id=package_id,
                    payment_method='stripe_payment'
                )
                
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø–∞–∫–µ—Ç–∞
                package_name = package_info['name']
                message = f"Package purchased: {package_name}"
            
            if not result['success']:
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {result['error']}"
                return False, error_msg
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            await execute_query("""
                UPDATE transactions SET 
                    status = 'completed',
                    completed_at = ?,
                    documents_granted = ?,
                    queries_granted = ?
                WHERE stripe_session_id = ?
            """, (
                datetime.now(),
                package_info['documents'],
                package_info['gpt4o_queries'], 
                session_id
            ))
            
            return True, message
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            
            # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞
            try:
                user_id = int(session.metadata.get('user_id', 0)) if 'session' in locals() else 0
                lang = await get_user_language(user_id) if user_id > 0 else "ru"
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {str(e)}"
            except:
                error_msg = f"Activation error: {e}"
            
            return False, error_msg
    
    @staticmethod
    async def handle_failed_payment(session_id: str, reason: str = "Unknown") -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ—É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
        """
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
            await execute_query("""
                UPDATE transactions SET 
                    status = 'failed'
                WHERE stripe_session_id = ?
            """, (session_id,))
            
            logger.warning(f"–ù–µ—É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞")
            return False
    
    @staticmethod
    async def cancel_user_subscription(user_id: int) -> Tuple[bool, str]:
        """–û—Ç–º–µ–Ω—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return await SubscriptionManager.cancel_stripe_subscription(user_id)
    
    @staticmethod
    async def get_user_payment_history(user_id: int, limit: int = 10) -> list:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            from db_postgresql import fetch_all
            
            transactions = await fetch_all("""
                SELECT package_type, amount_usd, status, created_at, completed_at
                FROM transactions 
                WHERE user_id = ? AND status != 'pending'
                ORDER BY created_at DESC 
                LIMIT ?
            """, (user_id, limit))
            
            return [
                {
                    "package": row[0],
                    "amount": row[1],
                    "status": row[2], 
                    "created": row[3],
                    "completed": row[4]
                }
                for row in transactions
            ]
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return []
        
    
    @staticmethod
    async def create_promo_payment_session(user_id: int, package_id: str, promo_code: str, user_name: str = "User"):
        """
        üí∞ –°–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é –æ–ø–ª–∞—Ç—ã —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–º–æ–∫–æ–¥–∞
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            package_id: ID –ø–∞–∫–µ—Ç–∞ (basic_sub, premium_sub)
            promo_code: –ü—Ä–æ–º–æ–∫–æ–¥ –≤ Stripe (FIRST30BASIC, FIRST30PREMIUM)
            user_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Tuple[bool, str]: (—É—Å–ø–µ—Ö, —Å—Å—ã–ª–∫–∞_–∏–ª–∏_–æ—à–∏–±–∫–∞)
        """
        try:
            logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ —Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–º")
            
            # 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞
            package_info = StripeConfig.get_package_info(package_id)
            if not package_info:
                try:
                    lang = await get_user_language(user_id)
                    error_msg = t("stripe_package_not_found", lang, package_id=package_id)
                except:
                    error_msg = f"Package {package_id} not found"
                
                return False, error_msg
            
            # 2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ (–ø—Ä–æ–º–æ–∫–æ–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫)
            if package_info['type'] != 'subscription':
                return False, "–ü—Ä–æ–º–æ–∫–æ–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫"
            
            # 3Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–¥–ø–∏—Å–∫–∏ —Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–º
            session = stripe.checkout.Session.create(
                payment_method_types=['card'],
                line_items=[{
                    'price': package_info['stripe_price_id'],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–π Price ID
                    'quantity': 1,
                }],
                mode='subscription',  # –ü–æ–¥–ø–∏—Å–∫–∞
                success_url=StripeConfig.SUCCESS_URL + f"?session_id={{CHECKOUT_SESSION_ID}}",
                cancel_url=StripeConfig.CANCEL_URL,
                
                # üéØ –ö–õ–Æ–ß–ï–í–ê–Ø –û–°–û–ë–ï–ù–ù–û–°–¢–¨: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
                discounts=[{
                    'coupon': promo_code  # –ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                }],
                
                # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                subscription_data={
                    'metadata': {
                        'user_id': str(user_id),
                        'package_id': package_id,
                        'promo_code_used': promo_code,  # –û—Ç–º–µ—á–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
                        'is_promo_purchase': 'true'     # –§–ª–∞–≥ –ø—Ä–æ–º–æ–ø–æ–∫—É–ø–∫–∏
                    }
                },
                metadata={
                    'user_id': str(user_id),
                    'package_id': package_id,
                    'user_name': user_name,
                    'subscription_type': 'recurring',
                    'promo_code_used': promo_code,
                    'acquisition_channel': 'promo_30th_message'  # –î–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
                }
            )
            
            # 4Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏ —Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–º
            await StripeManager._save_promo_payment_session(
                user_id=user_id,
                session_id=session.id,
                package_id=package_id,
                amount_cents=package_info['price_cents'],
                promo_code=promo_code
            )
            
            return True, session.url
            
        except stripe.error.InvalidRequestError as e:
            # –û—à–∏–±–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç)
            error_msg = f"–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: {str(e)}"
            return False, error_msg
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ-—Å–µ—Å—Å–∏–∏")
            
            try:
                lang = await get_user_language(user_id)
                error_msg = t("stripe_session_creation_error", lang)
            except:
                error_msg = "Payment session creation failed"
            
            return False, error_msg
    
    @staticmethod
    async def _save_promo_payment_session(user_id: int, session_id: str, package_id: str, amount_cents: int, promo_code: str):
        """
        üíæ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–º–æ-—Å–µ—Å—Å–∏–∏ –≤ –ë–î
        """
        try:
            await execute_query("""
                INSERT INTO transactions 
                (user_id, stripe_session_id, package_id, amount_usd, package_type, status, payment_method, promo_code, created_at)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                user_id,
                session_id, 
                package_id,
                amount_cents / 100,  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—Ç—ã –≤ –¥–æ–ª–ª–∞—Ä—ã
                StripeConfig.get_package_info(package_id)['name'],
                'pending',
                'stripe_promo',  # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π payment_method –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
                promo_code,      # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥
                datetime.now()
            ))
           
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ-—Å–µ—Å—Å–∏–∏ –≤ –ë–î")
    
    @staticmethod
    async def get_promo_usage_stats(promo_code: str) -> Dict[str, Any]:
        """
        üìä –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏)
        
        Returns:
            {"total_uses": 5, "successful_payments": 3, "revenue_usd": 5.97}
        """
        try:
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
            total_uses_result = await fetch_one("""
                SELECT COUNT(*) as total FROM transactions 
                WHERE promo_code = ?
            """, (promo_code,))
            
            # –£—Å–ø–µ—à–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
            successful_result = await fetch_one("""
                SELECT COUNT(*) as successful, COALESCE(SUM(amount_usd), 0) as revenue
                FROM transactions 
                WHERE promo_code = ? AND status = 'completed'
            """, (promo_code,))
            
            return {
                "promo_code": promo_code,
                "total_uses": total_uses_result['total'] if total_uses_result else 0,
                "successful_payments": successful_result['successful'] if successful_result else 0,
                "revenue_usd": float(successful_result['revenue']) if successful_result and successful_result['revenue'] else 0.0
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞")
            return {"promo_code": promo_code, "total_uses": 0, "successful_payments": 0, "revenue_usd": 0.0}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è webhook (–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –æ—Ç Stripe)
async def handle_stripe_webhook(payload: str, sig_header: str) -> Tuple[bool, str]:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook —Å–æ–±—ã—Ç–∏—è –æ—Ç Stripe
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å webhook
        event = stripe.Webhook.construct_event(
            payload, sig_header, StripeConfig.WEBHOOK_SECRET
        )
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π
        if event['type'] == 'checkout.session.completed':
            session = event['data']['object']
            success, message = await StripeManager.handle_successful_payment(session['id'])
            return success, message
            
        elif event['type'] == 'checkout.session.expired':
            session = event['data']['object']
            await StripeManager.handle_failed_payment(session['id'], "Session expired")
            return True, "Session expired processed"
            
        else:
            logger.info(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ Stripe —Å–æ–±—ã—Ç–∏–µ")
            return True, f"Event {event['type']} ignored"
            
    except ValueError as e:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π payload –æ—Ç Stripe")
        return False, "Invalid payload"
        
    except stripe.error.SignatureVerificationError as e:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å Stripe webhook")
        return False, "Invalid signature"
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Stripe webhook")
        return False, f"Webhook error: {e}"
    
class StripeGDPRManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ GDPR-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–º —É–¥–∞–ª–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –∏–∑ Stripe"""
    
    @staticmethod
    async def delete_user_stripe_data_gdpr(user_id: int) -> bool:
        """
        GDPR-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Stripe
        """
        try:
            
            # 1. –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ Stripe –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            stripe_subscriptions = await StripeGDPRManager._find_user_subscriptions(user_id)
            
            # 2. –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
            for subscription_id in stripe_subscriptions:
                await StripeGDPRManager._cancel_stripe_subscription(subscription_id)
            
            # 3. –ù–∞—Ö–æ–¥–∏–º Stripe customer_id
            customer_id = await StripeGDPRManager._find_stripe_customer(user_id)
            
            # 4. –£–¥–∞–ª—è–µ–º customer –∏–∑ Stripe (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if customer_id:
                await StripeGDPRManager._delete_stripe_customer(customer_id)
            
            # 5. –û—á–∏—â–∞–µ–º Stripe —Å—Å—ã–ª–∫–∏ –∏–∑ –Ω–∞—à–µ–π –±–∞–∑—ã
            await StripeGDPRManager._clean_stripe_references(user_id)

            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ GDPR —É–¥–∞–ª–µ–Ω–∏—è Stripe –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return False
    
    @staticmethod
    async def _find_user_subscriptions(user_id: int) -> list:
        """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ Stripe –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            from db_postgresql import get_db_connection, release_db_connection
            
            conn = await get_db_connection()
            try:
                # ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–†–Ø–ú–û–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –í–ú–ï–°–¢–û fetch_all
                rows = await conn.fetch("""
                    SELECT stripe_subscription_id 
                    FROM user_subscriptions 
                    WHERE user_id = $1 AND stripe_subscription_id IS NOT NULL
                """, user_id)
                
                # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û –ò–ó–í–õ–ï–ö–ê–ï–ú –î–ê–ù–ù–´–ï –ò–ó –°–¢–†–û–ö
                subscriptions = [row['stripe_subscription_id'] for row in rows if row['stripe_subscription_id']]
                return subscriptions
                
            finally:
                await release_db_connection(conn)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return []
    
    @staticmethod
    async def _cancel_stripe_subscription(subscription_id: str):
        """–û—Ç–º–µ–Ω—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –≤ Stripe"""
        try:
            # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏
            stripe.Subscription.delete(subscription_id)
            logger.info(f"–û—Ç–º–µ–Ω–µ–Ω–∞ Stripe –ø–æ–¥–ø–∏—Å–∫–∞")
            
        except stripe.error.InvalidRequestError as e:
            if "No such subscription" in str(e):
                logger.warning(f"‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ Stripe")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏")
    
    @staticmethod
    async def _find_stripe_customer(user_id: int) -> str:
        """–ù–∞—Ö–æ–¥–∏—Ç Stripe customer_id –ø–æ user_id"""
        try:
            logger.info(f"–ü–æ–∏—Å–∫ Stripe customer –ø—Ä–æ–ø—É—â–µ–Ω (–ø–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ Stripe customer –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return None
    
    @staticmethod
    async def _delete_stripe_customer(customer_id: str):
        """–£–¥–∞–ª—è–µ—Ç customer –∏–∑ Stripe"""
        try:
            stripe.Customer.delete(customer_id)
            logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω Stripe customer")
            
        except stripe.error.InvalidRequestError as e:
            if "No such customer" in str(e):
                logger.warning(f"‚ö†Ô∏è Customer —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ Stripe")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è customer")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è customer")
    
    @staticmethod
    async def _clean_stripe_references(user_id: int):
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ Stripe –∏–∑ –Ω–∞—à–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            from db_postgresql import get_db_connection, release_db_connection
            
            conn = await get_db_connection()
            try:
                # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ–¥–ø–∏—Å–æ–∫ —Å Stripe ID
                result = await conn.execute("""
                    DELETE FROM user_subscriptions 
                    WHERE user_id = $1 AND stripe_subscription_id IS NOT NULL
                """, user_id)
                
                logger.info(f"‚úÖ Stripe —Å—Å—ã–ª–∫–∏ –æ—á–∏—â–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                
            finally:
                await release_db_connection(conn)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ Stripe —Å—Å—ã–ª–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")