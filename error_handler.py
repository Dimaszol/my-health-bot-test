# error_handler.py - –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫

import logging
import asyncio
import functools
import traceback
from typing import Optional, Callable, Any
from datetime import datetime
import time
import openai
from openai import RateLimitError, APIError, APIConnectionError, APITimeoutError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot_errors.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

class BotError(Exception):
    """–ë–∞–∑–æ–≤–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ –±–æ—Ç–∞"""
    def __init__(self, message: str, user_message: str = None):
        self.message = message
        self.user_message = user_message or "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        super().__init__(self.message)

class OpenAIError(BotError):
    """–û—à–∏–±–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å OpenAI API"""
    pass

class FileProcessingError(BotError):
    """–û—à–∏–±–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤"""
    pass

class DatabaseError(BotError):
    """–û—à–∏–±–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    pass

def get_user_friendly_message(error: Exception, lang: str = "ru") -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–Ω—è—Ç–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    
    Args:
        error: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ
        lang: –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    messages = {
        "ru": {
            "openai_timeout": "‚è±Ô∏è OpenAI –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.",
            "openai_rate_limit": "‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.",
            "openai_api_error": "ü§ñ –ü—Ä–æ–±–ª–µ–º—ã —Å –ò–ò-—Å–µ—Ä–≤–∏—Å–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            "openai_connection": "üåê –ù–µ—Ç —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ò–ò. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç.",
            "file_too_large": "üìÅ –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.",
            "file_corrupted": "üìÑ –§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –Ω–µ —á–∏—Ç–∞–µ—Ç—Å—è.",
            "database_error": "üíæ –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            "unknown_error": "‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º.",
            "validation_error": "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥."
        },
        "en": {
            "openai_timeout": "‚è±Ô∏è OpenAI is not responding. Try again in a minute.",
            "openai_rate_limit": "‚è≥ Too many requests. Please wait a moment.",
            "openai_api_error": "ü§ñ AI service issues. Please try later.",
            "openai_connection": "üåê No connection to AI server. Check your internet.",
            "file_too_large": "üìÅ File too large for processing.",
            "file_corrupted": "üìÑ File is corrupted or unreadable.",
            "database_error": "üíæ Data saving issue. Please try again.",
            "unknown_error": "‚ùå Unexpected error. We're working on a fix.",
            "validation_error": "‚ö†Ô∏è Invalid data. Please check your input."
        },
        "uk": {
            "openai_timeout": "‚è±Ô∏è OpenAI –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î. –°–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ —Ö–≤–∏–ª–∏–Ω—É.",
            "openai_rate_limit": "‚è≥ –ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤. –ó–∞—á–µ–∫–∞–π—Ç–µ —Ç—Ä–æ—Ö–∏.",
            "openai_api_error": "ü§ñ –ü—Ä–æ–±–ª–µ–º–∏ –∑ –®–Ü-—Å–µ—Ä–≤—ñ—Å–æ–º. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            "openai_connection": "üåê –ù–µ–º–∞—î –∑–≤'—è–∑–∫—É –∑ —Å–µ—Ä–≤–µ—Ä–æ–º –®–Ü. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç.",
            "file_too_large": "üìÅ –§–∞–π–ª –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π –¥–ª—è –æ–±—Ä–æ–±–∫–∏.",
            "file_corrupted": "üìÑ –§–∞–π–ª –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π –∞–±–æ –Ω–µ —á–∏—Ç–∞—î—Ç—å—Å—è.",
            "database_error": "üíæ –ü—Ä–æ–±–ª–µ–º–∞ —ñ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            "unknown_error": "‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –ú–∏ –≤–∂–µ –ø—Ä–∞—Ü—é—î–º–æ –Ω–∞–¥ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è–º.",
            "validation_error": "‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—è."
        }
    }
    
    lang_messages = messages.get(lang, messages["ru"])
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if isinstance(error, APITimeoutError):
        return lang_messages["openai_timeout"]
    elif isinstance(error, RateLimitError):
        return lang_messages["openai_rate_limit"]
    elif isinstance(error, APIError):
        return lang_messages["openai_api_error"]
    elif isinstance(error, APIConnectionError):
        return lang_messages["openai_connection"]
    elif isinstance(error, (FileNotFoundError, OSError)):
        return lang_messages["file_corrupted"]
    elif isinstance(error, ValueError):
        return lang_messages["validation_error"]
    elif "database" in str(error).lower():
        return lang_messages["database_error"]
    else:
        return lang_messages["unknown_error"]

def safe_openai_call(max_retries: int = 3, delay: float = 1.0):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ OpenAI API
    
    Args:
        max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        delay: –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    """
    def decorator(func: Callable) -> Callable:
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            last_error = None
            
            for attempt in range(max_retries):
                try:
                    return func(*args, **kwargs)
                    
                except APITimeoutError as e:
                    last_error = e
                    logger.warning(f"OpenAI timeout –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {e}")
                    if attempt < max_retries - 1:
                        time.sleep(delay * (attempt + 1))  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
                    
                except RateLimitError as e:
                    last_error = e
                    logger.warning(f"Rate limit –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {e}")
                    if attempt < max_retries - 1:
                        time.sleep(delay * 2)  # –î–≤–æ–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è rate limit
                    
                except APIConnectionError as e:
                    last_error = e
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å OpenAI –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {e}")
                    if attempt < max_retries - 1:
                        time.sleep(delay)
                    
                except APIError as e:
                    last_error = e
                    logger.error(f"OpenAI API error –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {e}")
                    # –î–ª—è API –æ—à–∏–±–æ–∫ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º
                    break
                    
                except Exception as e:
                    last_error = e
                    logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ {func.__name__}: {e}")
                    logger.error(traceback.format_exc())
                    break
            
            # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
            logger.error(f"–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—ã–∑–æ–≤–∞ {func.__name__} –∏—Å—á–µ—Ä–ø–∞–Ω—ã. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {last_error}")
            raise OpenAIError(
                f"OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {last_error}",
                get_user_friendly_message(last_error)
            )
        
        return wrapper
    return decorator

def safe_async_call(max_retries: int = 3, delay: float = 1.0):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
    """
    def decorator(func: Callable) -> Callable:
        @functools.wraps(func)
        async def wrapper(*args, **kwargs):
            last_error = None
            
            for attempt in range(max_retries):
                try:
                    return await func(*args, **kwargs)
                    
                except Exception as e:
                    last_error = e
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ {func.__name__} –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {e}")
                    
                    if attempt < max_retries - 1:
                        await asyncio.sleep(delay * (attempt + 1))
            
            logger.error(f"–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—ã–∑–æ–≤–∞ {func.__name__} –∏—Å—á–µ—Ä–ø–∞–Ω—ã")
            raise BotError(f"–§—É–Ω–∫—Ü–∏—è {func.__name__} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", get_user_friendly_message(last_error))
        
        return wrapper
    return decorator

def handle_telegram_errors(func: Callable) -> Callable:
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ Telegram handlers
    """
    @functools.wraps(func)
    async def wrapper(*args, **kwargs):
        try:
            return await func(*args, **kwargs)
            
        except BotError as e:
            # –ù–∞—à–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –æ—à–∏–±–∫–∏ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            logger.error(f"BotError –≤ {func.__name__}: {e.message}")
            
            # –ü–æ–ª—É—á–∞–µ–º message object –∏–∑ args
            message = None
            for arg in args:
                if hasattr(arg, 'answer'):
                    message = arg
                    break
                elif hasattr(arg, 'message') and hasattr(arg.message, 'answer'):
                    message = arg.message
                    break
            
            if message:
                try:
                    await message.answer(e.user_message)
                except Exception as send_error:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {send_error}")
            
        except Exception as e:
            # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ {func.__name__}: {e}")
            logger.error(traceback.format_exc())
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            message = None
            for arg in args:
                if hasattr(arg, 'answer'):
                    message = arg
                    break
                elif hasattr(arg, 'message') and hasattr(arg.message, 'answer'):
                    message = arg.message
                    break
            
            if message:
                try:
                    await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                except Exception:
                    pass  # –ù–∏—á–µ–≥–æ –Ω–µ –º–æ–∂–µ–º —Å–¥–µ–ª–∞—Ç—å
    
    return wrapper

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è OpenAI API
def check_openai_health() -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å OpenAI API
    
    Returns:
        True –µ—Å–ª–∏ API –¥–æ—Å—Ç—É–ø–µ–Ω
    """
    try:
        from openai import OpenAI
        import os
        
        client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": "test"}],
            max_tokens=1
        )
        return True
        
    except Exception as e:
        logger.error(f"OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
def log_error_with_context(error: Exception, context: dict = None):
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    
    Args:
        error: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ
        context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (user_id, action, etc.)
    """
    context = context or {}
    
    error_info = {
        "timestamp": datetime.now().isoformat(),
        "error_type": type(error).__name__,
        "error_message": str(error),
        "context": context
    }
    
    logger.error(f"–î–µ—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {error_info}")
    
    # –ï—Å–ª–∏ —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É
    if isinstance(error, (DatabaseError, APIError)):
        logger.critical(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {error_info}")

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤ (–¥–ª—è —Å–ø—Ä–∞–≤–∫–∏)
if __name__ == "__main__":
    # –¢–µ—Å—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞
    @safe_openai_call(max_retries=2, delay=1.0)
    def test_openai():
        raise APITimeoutError("Test timeout")
    
    try:
        test_openai()
    except OpenAIError as e:
        print(f"–ü–æ–π–º–∞–Ω–∞ –æ—à–∏–±–∫–∞: {e.user_message}")